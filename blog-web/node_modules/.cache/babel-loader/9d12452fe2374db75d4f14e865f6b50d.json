{"ast":null,"code":"import { defineComponent, ref, computed, unref, watch, shallowRef, onMounted, nextTick, onBeforeUnmount, provide, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, Transition, withCtx, withDirectives, createVNode, vShow, createCommentVNode, renderSlot, Fragment, renderList, toDisplayString } from 'vue';\nimport { throttle } from 'lodash-unified';\nimport { useResizeObserver } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { carouselProps, carouselEmits } from './carousel.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isString } from '@vue/shared';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { carouselContextKey } from '../../../tokens/carousel.mjs';\nconst _hoisted_1 = [\"onMouseenter\", \"onMouseleave\"];\nconst _hoisted_2 = [\"onMouseenter\", \"onClick\"];\nconst _hoisted_3 = {\n  key: 0\n};\nconst __default__ = {\n  name: \"ElCarousel\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: carouselProps,\n  emits: carouselEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"carousel\");\n    const COMPONENT_NAME = \"ElCarousel\";\n    const THROTTLE_TIME = 300;\n    const activeIndex = ref(-1);\n    const timer = ref(null);\n    const hover = ref(false);\n    const root = ref();\n    const items = ref([]);\n    const arrowDisplay = computed(() => props.arrow !== \"never\" && !unref(isVertical));\n    const hasLabel = computed(() => {\n      return items.value.some(item => item.props.label.toString().length > 0);\n    });\n    const carouselClasses = computed(() => {\n      const classes = [ns.b(), ns.m(props.direction)];\n\n      if (unref(isCardType)) {\n        classes.push(ns.m(\"card\"));\n      }\n\n      return classes;\n    });\n    const indicatorsClasses = computed(() => {\n      const classes = [ns.e(\"indicators\"), ns.em(\"indicators\", props.direction)];\n\n      if (hasLabel.value) {\n        classes.push(ns.em(\"indicators\", \"labels\"));\n      }\n\n      if (props.indicatorPosition === \"outside\" || unref(isCardType)) {\n        classes.push(ns.em(\"indicators\", \"outside\"));\n      }\n\n      return classes;\n    });\n    const isCardType = computed(() => props.type === \"card\");\n    const isVertical = computed(() => props.direction === \"vertical\");\n    const throttledArrowClick = throttle(index => {\n      setActiveItem(index);\n    }, THROTTLE_TIME, {\n      trailing: true\n    });\n    const throttledIndicatorHover = throttle(index => {\n      handleIndicatorHover(index);\n    }, THROTTLE_TIME);\n\n    function pauseTimer() {\n      if (timer.value) {\n        clearInterval(timer.value);\n        timer.value = null;\n      }\n    }\n\n    function startTimer() {\n      if (props.interval <= 0 || !props.autoplay || timer.value) return;\n      timer.value = setInterval(() => playSlides(), props.interval);\n    }\n\n    const playSlides = () => {\n      if (activeIndex.value < items.value.length - 1) {\n        activeIndex.value = activeIndex.value + 1;\n      } else if (props.loop) {\n        activeIndex.value = 0;\n      }\n    };\n\n    function setActiveItem(index) {\n      if (isString(index)) {\n        const filteredItems = items.value.filter(item => item.props.name === index);\n\n        if (filteredItems.length > 0) {\n          index = items.value.indexOf(filteredItems[0]);\n        }\n      }\n\n      index = Number(index);\n\n      if (Number.isNaN(index) || index !== Math.floor(index)) {\n        debugWarn(COMPONENT_NAME, \"index must be integer.\");\n        return;\n      }\n\n      const itemCount = items.value.length;\n      const oldIndex = activeIndex.value;\n\n      if (index < 0) {\n        activeIndex.value = props.loop ? itemCount - 1 : 0;\n      } else if (index >= itemCount) {\n        activeIndex.value = props.loop ? 0 : itemCount - 1;\n      } else {\n        activeIndex.value = index;\n      }\n\n      if (oldIndex === activeIndex.value) {\n        resetItemPosition(oldIndex);\n      }\n    }\n\n    function resetItemPosition(oldIndex) {\n      items.value.forEach((item, index) => {\n        item.translateItem(index, activeIndex.value, oldIndex);\n      });\n    }\n\n    function addItem(item) {\n      items.value.push(item);\n    }\n\n    function removeItem(uid) {\n      const index = items.value.findIndex(item => item.uid === uid);\n\n      if (index !== -1) {\n        items.value.splice(index, 1);\n        if (activeIndex.value === index) next();\n      }\n    }\n\n    function itemInStage(item, index) {\n      var _a, _b, _c, _d;\n\n      const _items = unref(items);\n\n      const itemCount = _items.length;\n      if (itemCount === 0 || !item.states.inStage) return false;\n      const nextItemIndex = index + 1;\n      const prevItemIndex = index - 1;\n      const lastItemIndex = itemCount - 1;\n      const isLastItemActive = _items[lastItemIndex].states.active;\n      const isFirstItemActive = _items[0].states.active;\n      const isNextItemActive = (_b = (_a = _items[nextItemIndex]) == null ? void 0 : _a.states) == null ? void 0 : _b.active;\n      const isPrevItemActive = (_d = (_c = _items[prevItemIndex]) == null ? void 0 : _c.states) == null ? void 0 : _d.active;\n\n      if (index === lastItemIndex && isFirstItemActive || isNextItemActive) {\n        return \"left\";\n      } else if (index === 0 && isLastItemActive || isPrevItemActive) {\n        return \"right\";\n      }\n\n      return false;\n    }\n\n    function handleMouseEnter() {\n      hover.value = true;\n\n      if (props.pauseOnHover) {\n        pauseTimer();\n      }\n    }\n\n    function handleMouseLeave() {\n      hover.value = false;\n      startTimer();\n    }\n\n    function handleButtonEnter(arrow) {\n      if (unref(isVertical)) return;\n      items.value.forEach((item, index) => {\n        if (arrow === itemInStage(item, index)) {\n          item.states.hover = true;\n        }\n      });\n    }\n\n    function handleButtonLeave() {\n      if (unref(isVertical)) return;\n      items.value.forEach(item => {\n        item.states.hover = false;\n      });\n    }\n\n    function handleIndicatorClick(index) {\n      activeIndex.value = index;\n    }\n\n    function handleIndicatorHover(index) {\n      if (props.trigger === \"hover\" && index !== activeIndex.value) {\n        activeIndex.value = index;\n      }\n    }\n\n    function prev() {\n      setActiveItem(activeIndex.value - 1);\n    }\n\n    function next() {\n      setActiveItem(activeIndex.value + 1);\n    }\n\n    watch(() => activeIndex.value, (current, prev2) => {\n      resetItemPosition(prev2);\n\n      if (prev2 > -1) {\n        emit(\"change\", current, prev2);\n      }\n    });\n    watch(() => props.autoplay, autoplay => {\n      autoplay ? startTimer() : pauseTimer();\n    });\n    watch(() => props.loop, () => {\n      setActiveItem(activeIndex.value);\n    });\n    const resizeObserver = shallowRef();\n    onMounted(async () => {\n      await nextTick();\n      resizeObserver.value = useResizeObserver(root.value, () => {\n        resetItemPosition();\n      });\n\n      if (props.initialIndex < items.value.length && props.initialIndex >= 0) {\n        activeIndex.value = props.initialIndex;\n      }\n\n      startTimer();\n    });\n    onBeforeUnmount(() => {\n      pauseTimer();\n      if (root.value && resizeObserver.value) resizeObserver.value.stop();\n    });\n    provide(carouselContextKey, {\n      root,\n      isCardType,\n      isVertical,\n      items,\n      loop: props.loop,\n      addItem,\n      removeItem,\n      setActiveItem\n    });\n    expose({\n      setActiveItem,\n      prev,\n      next\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"root\",\n        ref: root,\n        class: normalizeClass(unref(carouselClasses)),\n        onMouseenter: withModifiers(handleMouseEnter, [\"stop\"]),\n        onMouseleave: withModifiers(handleMouseLeave, [\"stop\"])\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"container\")),\n        style: normalizeStyle({\n          height: _ctx.height\n        })\n      }, [unref(arrowDisplay) ? (openBlock(), createBlock(Transition, {\n        key: 0,\n        name: \"carousel-arrow-left\",\n        persisted: \"\"\n      }, {\n        default: withCtx(() => [withDirectives(createElementVNode(\"button\", {\n          type: \"button\",\n          class: normalizeClass([unref(ns).e(\"arrow\"), unref(ns).em(\"arrow\", \"left\")]),\n          onMouseenter: _cache[0] || (_cache[0] = $event => handleButtonEnter(\"left\")),\n          onMouseleave: handleButtonLeave,\n          onClick: _cache[1] || (_cache[1] = withModifiers($event => unref(throttledArrowClick)(activeIndex.value - 1), [\"stop\"]))\n        }, [createVNode(unref(ElIcon), null, {\n          default: withCtx(() => [createVNode(unref(ArrowLeft))]),\n          _: 1\n        })], 34), [[vShow, (_ctx.arrow === \"always\" || hover.value) && (props.loop || activeIndex.value > 0)]])]),\n        _: 1\n      })) : createCommentVNode(\"v-if\", true), unref(arrowDisplay) ? (openBlock(), createBlock(Transition, {\n        key: 1,\n        name: \"carousel-arrow-right\",\n        persisted: \"\"\n      }, {\n        default: withCtx(() => [withDirectives(createElementVNode(\"button\", {\n          type: \"button\",\n          class: normalizeClass([unref(ns).e(\"arrow\"), unref(ns).em(\"arrow\", \"right\")]),\n          onMouseenter: _cache[2] || (_cache[2] = $event => handleButtonEnter(\"right\")),\n          onMouseleave: handleButtonLeave,\n          onClick: _cache[3] || (_cache[3] = withModifiers($event => unref(throttledArrowClick)(activeIndex.value + 1), [\"stop\"]))\n        }, [createVNode(unref(ElIcon), null, {\n          default: withCtx(() => [createVNode(unref(ArrowRight))]),\n          _: 1\n        })], 34), [[vShow, (_ctx.arrow === \"always\" || hover.value) && (props.loop || activeIndex.value < items.value.length - 1)]])]),\n        _: 1\n      })) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"default\")], 6), _ctx.indicatorPosition !== \"none\" ? (openBlock(), createElementBlock(\"ul\", {\n        key: 0,\n        class: normalizeClass(unref(indicatorsClasses))\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(items.value, (item, index) => {\n        return openBlock(), createElementBlock(\"li\", {\n          key: index,\n          class: normalizeClass([unref(ns).e(\"indicator\"), unref(ns).em(\"indicator\", _ctx.direction), unref(ns).is(\"active\", index === activeIndex.value)]),\n          onMouseenter: $event => unref(throttledIndicatorHover)(index),\n          onClick: withModifiers($event => handleIndicatorClick(index), [\"stop\"])\n        }, [createElementVNode(\"button\", {\n          class: normalizeClass(unref(ns).e(\"button\"))\n        }, [unref(hasLabel) ? (openBlock(), createElementBlock(\"span\", _hoisted_3, toDisplayString(item.props.label), 1)) : createCommentVNode(\"v-if\", true)], 2)], 42, _hoisted_2);\n      }), 128))], 2)) : createCommentVNode(\"v-if\", true)], 42, _hoisted_1);\n    };\n  }\n\n});\n\nvar Carousel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/carousel/src/carousel.vue\"]]);\n\nexport { Carousel as default };","map":null,"metadata":{},"sourceType":"module"}