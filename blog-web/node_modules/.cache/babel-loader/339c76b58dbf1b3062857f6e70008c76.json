{"ast":null,"code":"import { inject } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { getFixedColumnOffset, ensurePosition, getFixedColumnsClass } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nfunction useStyle(props) {\n  const parent = inject(TABLE_INJECTION_KEY);\n  const ns = useNamespace(\"table\");\n\n  const getHeaderRowStyle = rowIndex => {\n    const headerRowStyle = parent == null ? void 0 : parent.props.headerRowStyle;\n\n    if (typeof headerRowStyle === \"function\") {\n      return headerRowStyle.call(null, {\n        rowIndex\n      });\n    }\n\n    return headerRowStyle;\n  };\n\n  const getHeaderRowClass = rowIndex => {\n    const classes = [];\n    const headerRowClassName = parent == null ? void 0 : parent.props.headerRowClassName;\n\n    if (typeof headerRowClassName === \"string\") {\n      classes.push(headerRowClassName);\n    } else if (typeof headerRowClassName === \"function\") {\n      classes.push(headerRowClassName.call(null, {\n        rowIndex\n      }));\n    }\n\n    return classes.join(\" \");\n  };\n\n  const getHeaderCellStyle = (rowIndex, columnIndex, row, column) => {\n    var _a;\n\n    let headerCellStyles = (_a = parent == null ? void 0 : parent.props.headerCellStyle) != null ? _a : {};\n\n    if (typeof headerCellStyles === \"function\") {\n      headerCellStyles = headerCellStyles.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      });\n    }\n\n    const fixedStyle = column.isSubColumn ? null : getFixedColumnOffset(columnIndex, column.fixed, props.store, row);\n    ensurePosition(fixedStyle, \"left\");\n    ensurePosition(fixedStyle, \"right\");\n    return Object.assign({}, headerCellStyles, fixedStyle);\n  };\n\n  const getHeaderCellClass = (rowIndex, columnIndex, row, column) => {\n    const fixedClasses = column.isSubColumn ? [] : getFixedColumnsClass(ns.b(), columnIndex, column.fixed, props.store, row);\n    const classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName, ...fixedClasses];\n\n    if (!column.children) {\n      classes.push(\"is-leaf\");\n    }\n\n    if (column.sortable) {\n      classes.push(\"is-sortable\");\n    }\n\n    const headerCellClassName = parent == null ? void 0 : parent.props.headerCellClassName;\n\n    if (typeof headerCellClassName === \"string\") {\n      classes.push(headerCellClassName);\n    } else if (typeof headerCellClassName === \"function\") {\n      classes.push(headerCellClassName.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      }));\n    }\n\n    classes.push(ns.e(\"cell\"));\n    return classes.filter(className => Boolean(className)).join(\" \");\n  };\n\n  return {\n    getHeaderRowStyle,\n    getHeaderRowClass,\n    getHeaderCellStyle,\n    getHeaderCellClass\n  };\n}\n\nexport { useStyle as default };","map":null,"metadata":{},"sourceType":"module"}