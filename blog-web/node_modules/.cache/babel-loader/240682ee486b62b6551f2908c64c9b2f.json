{"ast":null,"code":"// Process links like https://example.org/\n'use strict'; // RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\nvar SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\n\nmodule.exports = function linkify(state, silent) {\n  var pos, max, match, proto, link, url, fullUrl, token;\n  if (!state.md.options.linkify) return false;\n  if (state.linkLevel > 0) return false;\n  pos = state.pos;\n  max = state.posMax;\n  if (pos + 3 > max) return false;\n  if (state.src.charCodeAt(pos) !== 0x3A\n  /* : */\n  ) return false;\n  if (state.src.charCodeAt(pos + 1) !== 0x2F\n  /* / */\n  ) return false;\n  if (state.src.charCodeAt(pos + 2) !== 0x2F\n  /* / */\n  ) return false;\n  match = state.pending.match(SCHEME_RE);\n  if (!match) return false;\n  proto = match[1];\n  link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n  if (!link) return false;\n  url = link.url; // disallow '*' at the end of the link (conflicts with emphasis)\n\n  url = url.replace(/\\*+$/, '');\n  fullUrl = state.md.normalizeLink(url);\n  if (!state.md.validateLink(fullUrl)) return false;\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length);\n    token = state.push('link_open', 'a', 1);\n    token.attrs = [['href', fullUrl]];\n    token.markup = 'linkify';\n    token.info = 'auto';\n    token = state.push('text', '', 0);\n    token.content = state.md.normalizeLinkText(url);\n    token = state.push('link_close', 'a', -1);\n    token.markup = 'linkify';\n    token.info = 'auto';\n  }\n\n  state.pos += url.length - proto.length;\n  return true;\n};","map":null,"metadata":{},"sourceType":"script"}