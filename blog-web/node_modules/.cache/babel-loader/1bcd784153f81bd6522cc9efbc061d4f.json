{"ast":null,"code":"/* eslint no-var: off */\n\n/**\n * This file is responsible for parsing the content from the DOM and making\n * sure data is nested properly.\n *\n * @author Tim Scanlin\n */\nmodule.exports = function parseContent(options) {\n  var reduce = [].reduce;\n  /**\n   * Get the last item in an array and return a reference to it.\n   * @param {Array} array\n   * @return {Object}\n   */\n\n  function getLastItem(array) {\n    return array[array.length - 1];\n  }\n  /**\n   * Get heading level for a heading dom node.\n   * @param {HTMLElement} heading\n   * @return {Number}\n   */\n\n\n  function getHeadingLevel(heading) {\n    return +heading.nodeName.toUpperCase().replace('H', '');\n  }\n  /**\n   * Get important properties from a heading element and store in a plain object.\n   * @param {HTMLElement} heading\n   * @return {Object}\n   */\n\n\n  function getHeadingObject(heading) {\n    // each node is processed twice by this method because nestHeadingsArray() and addNode() calls it\n    // first time heading is real DOM node element, second time it is obj\n    // that is causing problem so I am processing only original DOM node\n    if (!(heading instanceof window.HTMLElement)) return heading;\n\n    if (options.ignoreHiddenElements && (!heading.offsetHeight || !heading.offsetParent)) {\n      return null;\n    }\n\n    const headingLabel = heading.getAttribute('data-heading-label') || (options.headingLabelCallback ? String(options.headingLabelCallback(heading.textContent)) : heading.textContent.trim());\n    var obj = {\n      id: heading.id,\n      children: [],\n      nodeName: heading.nodeName,\n      headingLevel: getHeadingLevel(heading),\n      textContent: headingLabel\n    };\n\n    if (options.includeHtml) {\n      obj.childNodes = heading.childNodes;\n    }\n\n    if (options.headingObjectCallback) {\n      return options.headingObjectCallback(obj, heading);\n    }\n\n    return obj;\n  }\n  /**\n   * Add a node to the nested array.\n   * @param {Object} node\n   * @param {Array} nest\n   * @return {Array}\n   */\n\n\n  function addNode(node, nest) {\n    var obj = getHeadingObject(node);\n    var level = obj.headingLevel;\n    var array = nest;\n    var lastItem = getLastItem(array);\n    var lastItemLevel = lastItem ? lastItem.headingLevel : 0;\n    var counter = level - lastItemLevel;\n\n    while (counter > 0) {\n      lastItem = getLastItem(array); // Handle case where there are multiple h5+ in a row.\n\n      if (lastItem && level === lastItem.headingLevel) {\n        break;\n      } else if (lastItem && lastItem.children !== undefined) {\n        array = lastItem.children;\n      }\n\n      counter--;\n    }\n\n    if (level >= options.collapseDepth) {\n      obj.isCollapsed = true;\n    }\n\n    array.push(obj);\n    return array;\n  }\n  /**\n   * Select headings in content area, exclude any selector in options.ignoreSelector\n   * @param {HTMLElement} contentElement\n   * @param {Array} headingSelector\n   * @return {Array}\n   */\n\n\n  function selectHeadings(contentElement, headingSelector) {\n    var selectors = headingSelector;\n\n    if (options.ignoreSelector) {\n      selectors = headingSelector.split(',').map(function mapSelectors(selector) {\n        return selector.trim() + ':not(' + options.ignoreSelector + ')';\n      });\n    }\n\n    try {\n      return contentElement.querySelectorAll(selectors);\n    } catch (e) {\n      console.warn('Headers not found with selector: ' + selectors); // eslint-disable-line\n\n      return null;\n    }\n  }\n  /**\n   * Nest headings array into nested arrays with 'children' property.\n   * @param {Array} headingsArray\n   * @return {Object}\n   */\n\n\n  function nestHeadingsArray(headingsArray) {\n    return reduce.call(headingsArray, function reducer(prev, curr) {\n      var currentHeading = getHeadingObject(curr);\n\n      if (currentHeading) {\n        addNode(currentHeading, prev.nest);\n      }\n\n      return prev;\n    }, {\n      nest: []\n    });\n  }\n\n  return {\n    nestHeadingsArray: nestHeadingsArray,\n    selectHeadings: selectHeadings\n  };\n};","map":null,"metadata":{},"sourceType":"script"}