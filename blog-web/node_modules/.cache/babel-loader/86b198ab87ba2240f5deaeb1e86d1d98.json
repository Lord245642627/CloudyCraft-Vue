{"ast":null,"code":"/* eslint no-var: off */\n\n/**\n * This file is responsible for building the DOM and updating DOM state.\n *\n * @author Tim Scanlin\n */\nmodule.exports = function (options) {\n  var forEach = [].forEach;\n  var some = [].some;\n  var body = document.body;\n  var tocElement;\n  var currentlyHighlighting = true;\n  var SPACE_CHAR = ' ';\n  /**\n   * Create link and list elements.\n   * @param {Object} d\n   * @param {HTMLElement} container\n   * @return {HTMLElement}\n   */\n\n  function createEl(d, container) {\n    var link = container.appendChild(createLink(d));\n\n    if (d.children.length) {\n      var list = createList(d.isCollapsed);\n      d.children.forEach(function (child) {\n        createEl(child, list);\n      });\n      link.appendChild(list);\n    }\n  }\n  /**\n   * Render nested heading array data into a given element.\n   * @param {HTMLElement} parent Optional. If provided updates the {@see tocElement} to match.\n   * @param {Array} data\n   * @return {HTMLElement}\n   */\n\n\n  function render(parent, data) {\n    var collapsed = false;\n    var container = createList(collapsed);\n    data.forEach(function (d) {\n      createEl(d, container);\n    }); // Return if no TOC element is provided or known.\n\n    tocElement = parent || tocElement;\n\n    if (tocElement === null) {\n      return;\n    } // Remove existing child if it exists.\n\n\n    if (tocElement.firstChild) {\n      tocElement.removeChild(tocElement.firstChild);\n    } // Just return the parent and don't append the list if no links are found.\n\n\n    if (data.length === 0) {\n      return tocElement;\n    } // Append the Elements that have been created\n\n\n    return tocElement.appendChild(container);\n  }\n  /**\n   * Create link element.\n   * @param {Object} data\n   * @return {HTMLElement}\n   */\n\n\n  function createLink(data) {\n    var item = document.createElement('li');\n    var a = document.createElement('a');\n\n    if (options.listItemClass) {\n      item.setAttribute('class', options.listItemClass);\n    }\n\n    if (options.onClick) {\n      a.onclick = options.onClick;\n    }\n\n    if (options.includeTitleTags) {\n      a.setAttribute('title', data.textContent);\n    }\n\n    if (options.includeHtml && data.childNodes.length) {\n      forEach.call(data.childNodes, function (node) {\n        a.appendChild(node.cloneNode(true));\n      });\n    } else {\n      // Default behavior.\n      a.textContent = data.textContent;\n    }\n\n    a.setAttribute('href', options.basePath + '#' + data.id);\n    a.setAttribute('class', options.linkClass + SPACE_CHAR + 'node-name--' + data.nodeName + SPACE_CHAR + options.extraLinkClasses);\n    item.appendChild(a);\n    return item;\n  }\n  /**\n   * Create list element.\n   * @param {Boolean} isCollapsed\n   * @return {HTMLElement}\n   */\n\n\n  function createList(isCollapsed) {\n    var listElement = options.orderedList ? 'ol' : 'ul';\n    var list = document.createElement(listElement);\n    var classes = options.listClass + SPACE_CHAR + options.extraListClasses;\n\n    if (isCollapsed) {\n      classes += SPACE_CHAR + options.collapsibleClass;\n      classes += SPACE_CHAR + options.isCollapsedClass;\n    }\n\n    list.setAttribute('class', classes);\n    return list;\n  }\n  /**\n   * Update fixed sidebar class.\n   * @return {HTMLElement}\n   */\n\n\n  function updateFixedSidebarClass() {\n    if (options.scrollContainer && document.querySelector(options.scrollContainer)) {\n      var top;\n      top = document.querySelector(options.scrollContainer).scrollTop;\n    } else {\n      top = document.documentElement.scrollTop || body.scrollTop;\n    }\n\n    var posFixedEl = document.querySelector(options.positionFixedSelector);\n\n    if (options.fixedSidebarOffset === 'auto') {\n      options.fixedSidebarOffset = tocElement.offsetTop;\n    }\n\n    if (top > options.fixedSidebarOffset) {\n      if (posFixedEl.className.indexOf(options.positionFixedClass) === -1) {\n        posFixedEl.className += SPACE_CHAR + options.positionFixedClass;\n      }\n    } else {\n      posFixedEl.className = posFixedEl.className.split(SPACE_CHAR + options.positionFixedClass).join('');\n    }\n  }\n  /**\n   * Get top position of heading\n   * @param {HTMLElement} obj\n   * @return {int} position\n   */\n\n\n  function getHeadingTopPos(obj) {\n    var position = 0;\n\n    if (obj !== null) {\n      position = obj.offsetTop;\n\n      if (options.hasInnerContainers) {\n        position += getHeadingTopPos(obj.offsetParent);\n      }\n    }\n\n    return position;\n  }\n  /**\n   * Update TOC highlighting and collpased groupings.\n   */\n\n\n  function updateToc(headingsArray) {\n    // If a fixed content container was set\n    if (options.scrollContainer && document.querySelector(options.scrollContainer)) {\n      var top;\n      top = document.querySelector(options.scrollContainer).scrollTop;\n    } else {\n      top = document.documentElement.scrollTop || body.scrollTop;\n    } // Add fixed class at offset\n\n\n    if (options.positionFixedSelector) {\n      updateFixedSidebarClass();\n    } // Get the top most heading currently visible on the page so we know what to highlight.\n\n\n    var headings = headingsArray;\n    var topHeader; // Using some instead of each so that we can escape early.\n\n    if (currentlyHighlighting && tocElement !== null && headings.length > 0) {\n      some.call(headings, function (heading, i) {\n        if (getHeadingTopPos(heading) > top + options.headingsOffset + 10) {\n          // Don't allow negative index value.\n          var index = i === 0 ? i : i - 1;\n          topHeader = headings[index];\n          return true;\n        } else if (i === headings.length - 1) {\n          // This allows scrolling for the last heading on the page.\n          topHeader = headings[headings.length - 1];\n          return true;\n        }\n      }); // Remove the active class from the other tocLinks.\n\n      var tocLinks = tocElement.querySelectorAll('.' + options.linkClass);\n      forEach.call(tocLinks, function (tocLink) {\n        tocLink.className = tocLink.className.split(SPACE_CHAR + options.activeLinkClass).join('');\n      });\n      var tocLis = tocElement.querySelectorAll('.' + options.listItemClass);\n      forEach.call(tocLis, function (tocLi) {\n        tocLi.className = tocLi.className.split(SPACE_CHAR + options.activeListItemClass).join('');\n      }); // Add the active class to the active tocLink.\n\n      var activeTocLink = tocElement.querySelector('.' + options.linkClass + '.node-name--' + topHeader.nodeName + '[href=\"' + options.basePath + '#' + topHeader.id.replace(/([ #;&,.+*~':\"!^$[\\]()=>|/@])/g, '\\\\$1') + '\"]');\n\n      if (activeTocLink && activeTocLink.className.indexOf(options.activeLinkClass) === -1) {\n        activeTocLink.className += SPACE_CHAR + options.activeLinkClass;\n      }\n\n      var li = activeTocLink && activeTocLink.parentNode;\n\n      if (li && li.className.indexOf(options.activeListItemClass) === -1) {\n        li.className += SPACE_CHAR + options.activeListItemClass;\n      }\n\n      var tocLists = tocElement.querySelectorAll('.' + options.listClass + '.' + options.collapsibleClass); // Collapse the other collapsible lists.\n\n      forEach.call(tocLists, function (list) {\n        if (list.className.indexOf(options.isCollapsedClass) === -1) {\n          list.className += SPACE_CHAR + options.isCollapsedClass;\n        }\n      }); // Expand the active link's collapsible list and its sibling if applicable.\n\n      if (activeTocLink && activeTocLink.nextSibling && activeTocLink.nextSibling.className.indexOf(options.isCollapsedClass) !== -1) {\n        activeTocLink.nextSibling.className = activeTocLink.nextSibling.className.split(SPACE_CHAR + options.isCollapsedClass).join('');\n      }\n\n      removeCollapsedFromParents(activeTocLink && activeTocLink.parentNode.parentNode);\n    }\n  }\n  /**\n   * Remove collpased class from parent elements.\n   * @param {HTMLElement} element\n   * @return {HTMLElement}\n   */\n\n\n  function removeCollapsedFromParents(element) {\n    if (element && element.className.indexOf(options.collapsibleClass) !== -1 && element.className.indexOf(options.isCollapsedClass) !== -1) {\n      element.className = element.className.split(SPACE_CHAR + options.isCollapsedClass).join('');\n      return removeCollapsedFromParents(element.parentNode.parentNode);\n    }\n\n    return element;\n  }\n  /**\n   * Disable TOC Animation when a link is clicked.\n   * @param {Event} event\n   */\n\n\n  function disableTocAnimation(event) {\n    var target = event.target || event.srcElement;\n\n    if (typeof target.className !== 'string' || target.className.indexOf(options.linkClass) === -1) {\n      return;\n    } // Bind to tocLink clicks to temporarily disable highlighting\n    // while smoothScroll is animating.\n\n\n    currentlyHighlighting = false;\n  }\n  /**\n   * Enable TOC Animation.\n   */\n\n\n  function enableTocAnimation() {\n    currentlyHighlighting = true;\n  }\n\n  return {\n    enableTocAnimation: enableTocAnimation,\n    disableTocAnimation: disableTocAnimation,\n    render: render,\n    updateToc: updateToc\n  };\n};","map":null,"metadata":{},"sourceType":"script"}