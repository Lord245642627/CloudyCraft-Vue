{"ast":null,"code":"/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n\n    return '[' + strs.join(', ') + ']';\n  }\n\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}