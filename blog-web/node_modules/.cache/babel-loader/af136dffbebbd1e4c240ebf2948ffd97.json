{"ast":null,"code":"/* IMPORT */\nimport _ from '../utils/index.js';\nimport Type from './type.js';\nimport { TYPE } from '../constants.js';\n/* MAIN */\n\nclass Channels {\n  /* CONSTRUCTOR */\n  constructor(data, color) {\n    this.color = color;\n    this.changed = false;\n    this.data = data; //TSC\n\n    this.type = new Type();\n  }\n  /* API */\n\n\n  set(data, color) {\n    this.color = color;\n    this.changed = false;\n    this.data = data; //TSC\n\n    this.type.type = TYPE.ALL;\n    return this;\n  }\n  /* HELPERS */\n\n\n  _ensureHSL() {\n    const data = this.data;\n    const {\n      h,\n      s,\n      l\n    } = data;\n    if (h === undefined) data.h = _.channel.rgb2hsl(data, 'h');\n    if (s === undefined) data.s = _.channel.rgb2hsl(data, 's');\n    if (l === undefined) data.l = _.channel.rgb2hsl(data, 'l');\n  }\n\n  _ensureRGB() {\n    const data = this.data;\n    const {\n      r,\n      g,\n      b\n    } = data;\n    if (r === undefined) data.r = _.channel.hsl2rgb(data, 'r');\n    if (g === undefined) data.g = _.channel.hsl2rgb(data, 'g');\n    if (b === undefined) data.b = _.channel.hsl2rgb(data, 'b');\n  }\n  /* GETTERS */\n\n\n  get r() {\n    const data = this.data;\n    const r = data.r;\n    if (!this.type.is(TYPE.HSL) && r !== undefined) return r;\n\n    this._ensureHSL();\n\n    return _.channel.hsl2rgb(data, 'r');\n  }\n\n  get g() {\n    const data = this.data;\n    const g = data.g;\n    if (!this.type.is(TYPE.HSL) && g !== undefined) return g;\n\n    this._ensureHSL();\n\n    return _.channel.hsl2rgb(data, 'g');\n  }\n\n  get b() {\n    const data = this.data;\n    const b = data.b;\n    if (!this.type.is(TYPE.HSL) && b !== undefined) return b;\n\n    this._ensureHSL();\n\n    return _.channel.hsl2rgb(data, 'b');\n  }\n\n  get h() {\n    const data = this.data;\n    const h = data.h;\n    if (!this.type.is(TYPE.RGB) && h !== undefined) return h;\n\n    this._ensureRGB();\n\n    return _.channel.rgb2hsl(data, 'h');\n  }\n\n  get s() {\n    const data = this.data;\n    const s = data.s;\n    if (!this.type.is(TYPE.RGB) && s !== undefined) return s;\n\n    this._ensureRGB();\n\n    return _.channel.rgb2hsl(data, 's');\n  }\n\n  get l() {\n    const data = this.data;\n    const l = data.l;\n    if (!this.type.is(TYPE.RGB) && l !== undefined) return l;\n\n    this._ensureRGB();\n\n    return _.channel.rgb2hsl(data, 'l');\n  }\n\n  get a() {\n    return this.data.a;\n  }\n  /* SETTERS */\n\n\n  set r(r) {\n    this.type.set(TYPE.RGB);\n    this.changed = true;\n    this.data.r = r;\n  }\n\n  set g(g) {\n    this.type.set(TYPE.RGB);\n    this.changed = true;\n    this.data.g = g;\n  }\n\n  set b(b) {\n    this.type.set(TYPE.RGB);\n    this.changed = true;\n    this.data.b = b;\n  }\n\n  set h(h) {\n    this.type.set(TYPE.HSL);\n    this.changed = true;\n    this.data.h = h;\n  }\n\n  set s(s) {\n    this.type.set(TYPE.HSL);\n    this.changed = true;\n    this.data.s = s;\n  }\n\n  set l(l) {\n    this.type.set(TYPE.HSL);\n    this.changed = true;\n    this.data.l = l;\n  }\n\n  set a(a) {\n    this.changed = true;\n    this.data.a = a;\n  }\n\n}\n/* EXPORT */\n\n\nexport default Channels;","map":null,"metadata":{},"sourceType":"module"}