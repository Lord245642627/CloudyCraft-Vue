{"ast":null,"code":"import { ref, computed } from 'vue';\nimport '../../../utils/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { castArray } from 'lodash-unified';\nconst SCOPE = \"ElForm\";\n\nfunction useFormLabelWidth() {\n  const potentialLabelWidthArr = ref([]);\n  const autoLabelWidth = computed(() => {\n    if (!potentialLabelWidthArr.value.length) return \"0\";\n    const max = Math.max(...potentialLabelWidthArr.value);\n    return max ? `${max}px` : \"\";\n  });\n\n  function getLabelWidthIndex(width) {\n    const index = potentialLabelWidthArr.value.indexOf(width);\n\n    if (index === -1) {\n      debugWarn(SCOPE, `unexpected width ${width}`);\n    }\n\n    return index;\n  }\n\n  function registerLabelWidth(val, oldVal) {\n    if (val && oldVal) {\n      const index = getLabelWidthIndex(oldVal);\n      potentialLabelWidthArr.value.splice(index, 1, val);\n    } else if (val) {\n      potentialLabelWidthArr.value.push(val);\n    }\n  }\n\n  function deregisterLabelWidth(val) {\n    const index = getLabelWidthIndex(val);\n\n    if (index > -1) {\n      potentialLabelWidthArr.value.splice(index, 1);\n    }\n  }\n\n  return {\n    autoLabelWidth,\n    registerLabelWidth,\n    deregisterLabelWidth\n  };\n}\n\nconst filterFields = (fields, props) => {\n  const normalized = castArray(props);\n  return normalized.length > 0 ? fields.filter(field => field.prop && normalized.includes(field.prop)) : fields;\n};\n\nexport { filterFields, useFormLabelWidth };","map":null,"metadata":{},"sourceType":"module"}