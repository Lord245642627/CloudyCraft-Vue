{"ast":null,"code":"import * as _ from 'lodash-es';\nimport * as util from './util.js';\nexport { run, undo };\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\n\nfunction run(g) {\n  g.graph().dummyChains = [];\n\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n  if (wRank === vRank + 1) return;\n  g.removeEdge(e);\n  var dummy, attrs, i;\n\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height; // @ts-expect-error\n\n      attrs.dummy = 'edge-label'; // @ts-expect-error\n\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n\n    g.setEdge(v, dummy, {\n      weight: edgeLabel.weight\n    }, name);\n\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n\n    v = dummy;\n  }\n\n  g.setEdge(v, w, {\n    weight: edgeLabel.weight\n  }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({\n        x: node.x,\n        y: node.y\n      });\n\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n\n      v = w;\n      node = g.node(v);\n    }\n  });\n}","map":{"version":3,"names":["_","util","run","undo","g","graph","dummyChains","forEach","edges","edge","normalizeEdge","e","v","vRank","node","rank","w","wRank","name","edgeLabel","labelRank","removeEdge","dummy","attrs","i","points","width","height","edgeObj","addDummyNode","labelpos","setEdge","weight","push","origLabel","successors","removeNode","x","y"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-web/node_modules/dagre-d3-es/src/dagre/normalize.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}