{"ast":null,"code":"// src/normalize.ts\nfunction isObject(v) {\n  return typeof v === \"object\" && v !== null;\n}\n\nfunction normalizeOptions(options, globalOptions) {\n  options = isObject(options) ? options : /* @__PURE__ */Object.create(null);\n  return new Proxy(options, {\n    get(target, key, receiver) {\n      return Reflect.get(target, key, receiver) || Reflect.get(globalOptions, key, receiver);\n    }\n\n  });\n} // src/pick.ts\n\n\nfunction get(state, path) {\n  return path.reduce((obj, p) => {\n    return obj == null ? void 0 : obj[p];\n  }, state);\n}\n\nfunction set(state, path, val) {\n  return path.slice(0, -1).reduce((obj, p) => {\n    if (!/^(__proto__)$/.test(p)) return obj[p] = obj[p] || {};else return {};\n  }, state)[path[path.length - 1]] = val, state;\n}\n\nfunction pick(baseState, paths) {\n  return paths.reduce((substate, path) => {\n    const pathArray = path.split(\".\");\n    return set(substate, pathArray, get(baseState, pathArray));\n  }, {});\n} // src/plugin.ts\n\n\nfunction createPersistedState(factoryOptions = {}) {\n  return function (context) {\n    const {\n      options: {\n        persist\n      },\n      store\n    } = context;\n    if (!persist) return;\n    const {\n      storage = localStorage,\n      beforeRestore = null,\n      afterRestore = null,\n      serializer = {\n        serialize: JSON.stringify,\n        deserialize: JSON.parse\n      },\n      key = store.$id,\n      paths = null\n    } = normalizeOptions(persist, factoryOptions);\n    beforeRestore == null ? void 0 : beforeRestore(context);\n\n    try {\n      const fromStorage = storage.getItem(key);\n      if (fromStorage) store.$patch(serializer.deserialize(fromStorage));\n    } catch (_error) {}\n\n    afterRestore == null ? void 0 : afterRestore(context);\n    store.$subscribe((_mutation, state) => {\n      try {\n        const toStore = Array.isArray(paths) ? pick(state, paths) : state;\n        storage.setItem(key, serializer.serialize(toStore));\n      } catch (_error) {}\n    }, {\n      detached: true\n    });\n  };\n}\n\nfunction createNuxtPersistedState(useCookie, factoryOptions) {\n  return createPersistedState({\n    storage: {\n      getItem: key => {\n        return useCookie(key, {\n          encode: encodeURIComponent,\n          decode: decodeURIComponent,\n          ...(factoryOptions == null ? void 0 : factoryOptions.cookieOptions)\n        }).value;\n      },\n      setItem: (key, value) => {\n        useCookie(key, {\n          encode: encodeURIComponent,\n          decode: decodeURIComponent,\n          ...(factoryOptions == null ? void 0 : factoryOptions.cookieOptions)\n        }).value = value;\n      }\n    },\n    ...factoryOptions\n  });\n}\n\nvar persistedState = createPersistedState();\nexport { createNuxtPersistedState, createPersistedState, persistedState as default };","map":null,"metadata":{},"sourceType":"module"}