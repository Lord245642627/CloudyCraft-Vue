{"ast":null,"code":"import { defineComponent, provide, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, createTextVNode, toDisplayString, createCommentVNode, Fragment, renderList, createBlock } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport DescriptionsRow from './descriptions-row.mjs';\nimport { elDescriptionsKey } from './token.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElDescriptions\",\n  components: {\n    [DescriptionsRow.name]: DescriptionsRow\n  },\n  props: {\n    border: {\n      type: Boolean,\n      default: false\n    },\n    column: {\n      type: Number,\n      default: 3\n    },\n    direction: {\n      type: String,\n      default: \"horizontal\"\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    title: {\n      type: String,\n      default: \"\"\n    },\n    extra: {\n      type: String,\n      default: \"\"\n    }\n  },\n\n  setup(props, {\n    slots\n  }) {\n    provide(elDescriptionsKey, props);\n    const descriptionsSize = useSize();\n    const ns = useNamespace(\"descriptions\");\n    const descriptionKls = computed(() => [ns.b(), ns.m(descriptionsSize.value)]);\n\n    const flattedChildren = children => {\n      const temp = Array.isArray(children) ? children : [children];\n      const res = [];\n      temp.forEach(child => {\n        if (Array.isArray(child.children)) {\n          res.push(...flattedChildren(child.children));\n        } else {\n          res.push(child);\n        }\n      });\n      return res;\n    };\n\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {};\n      }\n\n      if (span > count) {\n        node.props.span = count;\n      }\n\n      if (isLast) {\n        node.props.span = span;\n      }\n\n      return node;\n    };\n\n    const getRows = () => {\n      var _a;\n\n      const children = flattedChildren((_a = slots.default) == null ? void 0 : _a.call(slots)).filter(node => {\n        var _a2;\n\n        return ((_a2 = node == null ? void 0 : node.type) == null ? void 0 : _a2.name) === \"ElDescriptionsItem\";\n      });\n      const rows = [];\n      let temp = [];\n      let count = props.column;\n      let totalSpan = 0;\n      children.forEach((node, index) => {\n        var _a2;\n\n        const span = ((_a2 = node.props) == null ? void 0 : _a2.span) || 1;\n\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span;\n        }\n\n        if (index === children.length - 1) {\n          const lastSpan = props.column - totalSpan % props.column;\n          temp.push(filledNode(node, lastSpan, count, true));\n          rows.push(temp);\n          return;\n        }\n\n        if (span < count) {\n          count -= span;\n          temp.push(node);\n        } else {\n          temp.push(filledNode(node, span, count));\n          rows.push(temp);\n          count = props.column;\n          temp = [];\n        }\n      });\n      return rows;\n    };\n\n    return {\n      descriptionKls,\n      getRows,\n      ns\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_descriptions_row = resolveComponent(\"el-descriptions-row\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.descriptionKls)\n  }, [_ctx.title || _ctx.extra || _ctx.$slots.title || _ctx.$slots.extra ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"header\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"title\"))\n  }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title), 1)])], 2), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"extra\"))\n  }, [renderSlot(_ctx.$slots, \"extra\", {}, () => [createTextVNode(toDisplayString(_ctx.extra), 1)])], 2)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"body\"))\n  }, [createElementVNode(\"table\", {\n    class: normalizeClass([_ctx.ns.e(\"table\"), _ctx.ns.is(\"bordered\", _ctx.border)])\n  }, [createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.getRows(), (row, index) => {\n    return openBlock(), createBlock(_component_el_descriptions_row, {\n      key: index,\n      row\n    }, null, 8, [\"row\"]);\n  }), 128))])], 2)], 2)], 2);\n}\n\nvar Descriptions = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/index.vue\"]]);\n\nexport { Descriptions as default };","map":null,"metadata":{},"sourceType":"module"}