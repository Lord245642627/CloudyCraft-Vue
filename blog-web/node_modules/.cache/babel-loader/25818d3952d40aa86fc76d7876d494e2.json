{"ast":null,"code":"import { computed, unref } from 'vue';\nimport { useGlobalConfig } from '../use-global-config/index.mjs';\nconst defaultNamespace = \"el\";\nconst statePrefix = \"is-\";\n\nconst _bem = (namespace, block, blockSuffix, element, modifier) => {\n  let cls = `${namespace}-${block}`;\n\n  if (blockSuffix) {\n    cls += `-${blockSuffix}`;\n  }\n\n  if (element) {\n    cls += `__${element}`;\n  }\n\n  if (modifier) {\n    cls += `--${modifier}`;\n  }\n\n  return cls;\n};\n\nconst useNamespace = block => {\n  const globalConfig = useGlobalConfig(\"namespace\");\n  const namespace = computed(() => globalConfig.value || defaultNamespace);\n\n  const b = (blockSuffix = \"\") => _bem(unref(namespace), block, blockSuffix, \"\", \"\");\n\n  const e = element => element ? _bem(unref(namespace), block, \"\", element, \"\") : \"\";\n\n  const m = modifier => modifier ? _bem(unref(namespace), block, \"\", \"\", modifier) : \"\";\n\n  const be = (blockSuffix, element) => blockSuffix && element ? _bem(unref(namespace), block, blockSuffix, element, \"\") : \"\";\n\n  const em = (element, modifier) => element && modifier ? _bem(unref(namespace), block, \"\", element, modifier) : \"\";\n\n  const bm = (blockSuffix, modifier) => blockSuffix && modifier ? _bem(unref(namespace), block, blockSuffix, \"\", modifier) : \"\";\n\n  const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem(unref(namespace), block, blockSuffix, element, modifier) : \"\";\n\n  const is = (name, ...args) => {\n    const state = args.length >= 1 ? args[0] : true;\n    return name && state ? `${statePrefix}${name}` : \"\";\n  };\n\n  const cssVar = object => {\n    const styles = {};\n\n    for (const key in object) {\n      styles[`--${namespace.value}-${key}`] = object[key];\n    }\n\n    return styles;\n  };\n\n  const cssVarBlock = object => {\n    const styles = {};\n\n    for (const key in object) {\n      styles[`--${namespace.value}-${block}-${key}`] = object[key];\n    }\n\n    return styles;\n  };\n\n  const cssVarName = name => `--${namespace.value}-${name}`;\n\n  const cssVarBlockName = name => `--${namespace.value}-${block}-${name}`;\n\n  return {\n    namespace,\n    b,\n    e,\n    m,\n    be,\n    em,\n    bm,\n    bem,\n    is,\n    cssVar,\n    cssVarName,\n    cssVarBlock,\n    cssVarBlockName\n  };\n};\n\nexport { defaultNamespace, useNamespace };","map":null,"metadata":{},"sourceType":"module"}