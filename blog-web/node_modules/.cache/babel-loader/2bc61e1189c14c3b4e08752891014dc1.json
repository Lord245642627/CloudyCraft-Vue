{"ast":null,"code":"import { isRef, watch, onScopeDispose } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { throwError } from '../../utils/error.mjs';\nimport { hasClass, removeClass, getStyle, addClass } from '../../utils/dom/style.mjs';\nimport { getScrollBarWidth } from '../../utils/dom/scroll.mjs';\n\nconst useLockscreen = trigger => {\n  if (!isRef(trigger)) {\n    throwError(\"[useLockscreen]\", \"You need to pass a ref param to this function\");\n  }\n\n  if (!isClient || hasClass(document.body, \"el-popup-parent--hidden\")) {\n    return;\n  }\n\n  let scrollBarWidth = 0;\n  let withoutHiddenClass = false;\n  let bodyPaddingRight = \"0\";\n  let computedBodyPaddingRight = 0;\n\n  const cleanup = () => {\n    removeClass(document.body, \"el-popup-parent--hidden\");\n\n    if (withoutHiddenClass) {\n      document.body.style.paddingRight = bodyPaddingRight;\n    }\n  };\n\n  watch(trigger, val => {\n    if (!val) {\n      cleanup();\n      return;\n    }\n\n    withoutHiddenClass = !hasClass(document.body, \"el-popup-parent--hidden\");\n\n    if (withoutHiddenClass) {\n      bodyPaddingRight = document.body.style.paddingRight;\n      computedBodyPaddingRight = Number.parseInt(getStyle(document.body, \"paddingRight\"), 10);\n    }\n\n    scrollBarWidth = getScrollBarWidth();\n    const bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;\n    const bodyOverflowY = getStyle(document.body, \"overflowY\");\n\n    if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === \"scroll\") && withoutHiddenClass) {\n      document.body.style.paddingRight = `${computedBodyPaddingRight + scrollBarWidth}px`;\n    }\n\n    addClass(document.body, \"el-popup-parent--hidden\");\n  });\n  onScopeDispose(() => cleanup());\n};\n\nexport { useLockscreen };","map":null,"metadata":{},"sourceType":"module"}