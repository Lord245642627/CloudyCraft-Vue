{"ast":null,"code":"import * as _ from 'lodash-es';\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01'; // Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false; // Label for the graph itself\n\n    this._label = undefined; // Defaults to be set when creating a new node\n\n    this._defaultNodeLabelFn = _.constant(undefined); // Defaults to be set when creating a new edge\n\n    this._defaultEdgeLabelFn = _.constant(undefined); // v -> label\n\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {}; // v -> children\n\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    } // v -> edgeObj\n\n\n    this._in = {}; // u -> v -> Number\n\n    this._preds = {}; // v -> edgeObj\n\n    this._out = {}; // v -> w -> Number\n\n    this._sucs = {}; // e -> edgeObj\n\n    this._edgeObjs = {}; // e -> label\n\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n\n\n  isDirected() {\n    return this._isDirected;\n  }\n\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n\n  isCompound() {\n    return this._isCompound;\n  }\n\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n\n\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n\n  nodeCount() {\n    return this._nodeCount;\n  }\n\n  nodes() {\n    return _.keys(this._nodes);\n  }\n\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n\n    return this;\n  }\n\n  setNode(v, value) {\n    if (_.has(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n\n      return this;\n    } // @ts-expect-error\n\n\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n\n  node(v) {\n    return this._nodes[v];\n  }\n\n  hasNode(v) {\n    return _.has(this._nodes, v);\n  }\n\n  removeNode(v) {\n    var self = this;\n\n    if (_.has(this._nodes, v)) {\n      var removeEdge = function (e) {\n        self.removeEdge(self._edgeObjs[e]);\n      };\n\n      delete this._nodes[v];\n\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n\n        delete this._parent[v];\n\n        _.each(this.children(v), function (child) {\n          self.setParent(child);\n        });\n\n        delete this._children[v];\n      }\n\n      _.each(_.keys(this._in[v]), removeEdge);\n\n      delete this._in[v];\n      delete this._preds[v];\n\n      _.each(_.keys(this._out[v]), removeEdge);\n\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n\n    return this;\n  }\n\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n\n    this._removeFromParentsChildList(v);\n\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n\n  predecessors(v) {\n    var predsV = this._preds[v];\n\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n\n  successors(v) {\n    var sucsV = this._sucs[v];\n\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n\n  neighbors(v) {\n    var preds = this.predecessors(v);\n\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n\n  isLeaf(v) {\n    var neighbors;\n\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n\n    return neighbors.length === 0;\n  }\n\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound\n    });\n    copy.setGraph(this.graph());\n    var self = this;\n\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n\n    function findParent(v) {\n      var parent = self.parent(v);\n\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n\n\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n\n  edgeCount() {\n    return this._edgeCount;\n  }\n\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n\n      return w;\n    });\n\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n\n\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n\n    if (_.has(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    } // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n\n\n    this.setNode(v);\n    this.setNode(w); // @ts-expect-error\n\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name); // Ensure we add undirected edges in a consistent way.\n\n    v = edgeObj.v;\n    w = edgeObj.w;\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n\n  edge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n\n  hasEdge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n    return _.has(this._edgeLabels, e);\n  }\n\n  removeEdge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n\n    return this;\n  }\n\n  inEdges(v, u) {\n    var inV = this._in[v];\n\n    if (inV) {\n      var edges = _.values(inV);\n\n      if (!u) {\n        return edges;\n      }\n\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n\n  outEdges(v, w) {\n    var outV = this._out[v];\n\n    if (outV) {\n      var edges = _.values(outV);\n\n      if (!w) {\n        return edges;\n      }\n\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n\n}\n/* Number of nodes in the graph. Should only be changed by the implementation. */\n\nGraph.prototype._nodeCount = 0;\n/* Number of edges in the graph. Should only be changed by the implementation. */\n\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (! --map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var edgeObj = {\n    v: v,\n    w: w\n  };\n\n  if (name) {\n    edgeObj.name = name;\n  }\n\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}","map":null,"metadata":{},"sourceType":"module"}