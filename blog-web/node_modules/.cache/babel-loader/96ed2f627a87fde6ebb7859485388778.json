{"ast":null,"code":"import { isClient, isNumber } from '@vueuse/core';\nimport '../types.mjs';\nimport '../strings.mjs';\nimport { entriesOf, keysOf } from '../objects.mjs';\nimport { debugWarn } from '../error.mjs';\nimport { camelize, isObject, isString } from '@vue/shared';\nconst SCOPE = \"utils/dom/style\";\n\nconst classNameToArray = (cls = \"\") => cls.split(\" \").filter(item => !!item.trim());\n\nconst hasClass = (el, cls) => {\n  if (!el || !cls) return false;\n  if (cls.includes(\" \")) throw new Error(\"className should not contain space.\");\n  return el.classList.contains(cls);\n};\n\nconst addClass = (el, cls) => {\n  if (!el || !cls.trim()) return;\n  el.classList.add(...classNameToArray(cls));\n};\n\nconst removeClass = (el, cls) => {\n  if (!el || !cls.trim()) return;\n  el.classList.remove(...classNameToArray(cls));\n};\n\nconst getStyle = (element, styleName) => {\n  var _a;\n\n  if (!isClient || !element || !styleName) return \"\";\n  let key = camelize(styleName);\n  if (key === \"float\") key = \"cssFloat\";\n\n  try {\n    const style = element.style[key];\n    if (style) return style;\n    const computed = (_a = document.defaultView) == null ? void 0 : _a.getComputedStyle(element, \"\");\n    return computed ? computed[key] : \"\";\n  } catch (e) {\n    return element.style[key];\n  }\n};\n\nconst setStyle = (element, styleName, value) => {\n  if (!element || !styleName) return;\n\n  if (isObject(styleName)) {\n    entriesOf(styleName).forEach(([prop, value2]) => setStyle(element, prop, value2));\n  } else {\n    const key = camelize(styleName);\n    element.style[key] = value;\n  }\n};\n\nconst removeStyle = (element, style) => {\n  if (!element || !style) return;\n\n  if (isObject(style)) {\n    keysOf(style).forEach(prop => removeStyle(element, prop));\n  } else {\n    setStyle(element, style, \"\");\n  }\n};\n\nfunction addUnit(value, defaultUnit = \"px\") {\n  if (!value) return \"\";\n\n  if (isString(value)) {\n    return value;\n  } else if (isNumber(value)) {\n    return `${value}${defaultUnit}`;\n  }\n\n  debugWarn(SCOPE, \"binding value must be a string or number\");\n}\n\nexport { addClass, addUnit, classNameToArray, getStyle, hasClass, removeClass, removeStyle, setStyle };","map":null,"metadata":{},"sourceType":"module"}