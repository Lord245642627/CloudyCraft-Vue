{"ast":null,"code":"import { defineComponent, ref, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createTextVNode, createCommentVNode, createSlots, normalizeProps, guardReactiveProps, Fragment, renderList, createBlock } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElButtonGroup, ElButton } from '../../button/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport DateTable from './date-table2.mjs';\nimport { calendarProps, calendarEmits } from './calendar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst __default__ = {\n  name: \"ElCalendar\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: calendarProps,\n  emits: calendarEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const COMPONENT_NAME = \"ElCalendar\";\n    const ns = useNamespace(\"calendar\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const selectedDay = ref();\n    const now = dayjs().locale(lang.value);\n    const realSelectedDay = computed({\n      get() {\n        if (!props.modelValue) return selectedDay.value;\n        return date.value;\n      },\n\n      set(val) {\n        if (!val) return;\n        selectedDay.value = val;\n        const result = val.toDate();\n        emit(INPUT_EVENT, result);\n        emit(UPDATE_MODEL_EVENT, result);\n      }\n\n    });\n    const validatedRange = computed(() => {\n      if (!props.range) return [];\n      const rangeArrDayjs = props.range.map(_ => dayjs(_).locale(lang.value));\n      const [startDayjs, endDayjs] = rangeArrDayjs;\n\n      if (startDayjs.isAfter(endDayjs)) {\n        debugWarn(COMPONENT_NAME, \"end time should be greater than start time\");\n        return [];\n      }\n\n      if (startDayjs.isSame(endDayjs, \"month\")) {\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      } else {\n        if (startDayjs.add(1, \"month\").month() !== endDayjs.month()) {\n          debugWarn(COMPONENT_NAME, \"start time and end time interval must not exceed two months\");\n          return [];\n        }\n\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      }\n    });\n    const date = computed(() => {\n      if (!props.modelValue) {\n        if (realSelectedDay.value) {\n          return realSelectedDay.value;\n        } else if (validatedRange.value.length) {\n          return validatedRange.value[0][0];\n        }\n\n        return now;\n      } else {\n        return dayjs(props.modelValue).locale(lang.value);\n      }\n    });\n    const prevMonthDayjs = computed(() => date.value.subtract(1, \"month\").date(1));\n    const nextMonthDayjs = computed(() => date.value.add(1, \"month\").date(1));\n    const prevYearDayjs = computed(() => date.value.subtract(1, \"year\").date(1));\n    const nextYearDayjs = computed(() => date.value.add(1, \"year\").date(1));\n    const i18nDate = computed(() => {\n      const pickedMonth = `el.datepicker.month${date.value.format(\"M\")}`;\n      return `${date.value.year()} ${t(\"el.datepicker.year\")} ${t(pickedMonth)}`;\n    });\n\n    const calculateValidatedDateRange = (startDayjs, endDayjs) => {\n      const firstDay = startDayjs.startOf(\"week\");\n      const lastDay = endDayjs.endOf(\"week\");\n      const firstMonth = firstDay.get(\"month\");\n      const lastMonth = lastDay.get(\"month\");\n\n      if (firstMonth === lastMonth) {\n        return [[firstDay, lastDay]];\n      } else if (firstMonth + 1 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf(\"month\");\n        const lastMonthFirstDay = lastDay.startOf(\"month\");\n        const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, \"week\");\n        const lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else if (firstMonth + 2 === lastMonth || (firstMonth + 1) % 11 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf(\"month\");\n        const secondMonthFirstDay = firstDay.add(1, \"month\").startOf(\"month\");\n        const secondMonthStartDay = firstMonthLastDay.isSame(secondMonthFirstDay, \"week\") ? secondMonthFirstDay.add(1, \"week\") : secondMonthFirstDay;\n        const secondMonthLastDay = secondMonthStartDay.endOf(\"month\");\n        const lastMonthFirstDay = lastDay.startOf(\"month\");\n        const lastMonthStartDay = secondMonthLastDay.isSame(lastMonthFirstDay, \"week\") ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [secondMonthStartDay.startOf(\"week\"), secondMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else {\n        debugWarn(COMPONENT_NAME, \"start time and end time interval must not exceed two months\");\n        return [];\n      }\n    };\n\n    const pickDay = day => {\n      realSelectedDay.value = day;\n    };\n\n    const selectDate = type => {\n      let day;\n\n      if (type === \"prev-month\") {\n        day = prevMonthDayjs.value;\n      } else if (type === \"next-month\") {\n        day = nextMonthDayjs.value;\n      } else if (type === \"prev-year\") {\n        day = prevYearDayjs.value;\n      } else if (type === \"next-year\") {\n        day = nextYearDayjs.value;\n      } else {\n        day = now;\n      }\n\n      if (day.isSame(date.value, \"day\")) return;\n      pickDay(day);\n    };\n\n    expose({\n      selectedDay: realSelectedDay,\n      pickDay,\n      selectDate,\n      calculateValidatedDateRange\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(unref(ns).b())\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"header\"))\n      }, [renderSlot(_ctx.$slots, \"header\", {\n        date: unref(i18nDate)\n      }, () => [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"title\"))\n      }, toDisplayString(unref(i18nDate)), 3), unref(validatedRange).length === 0 ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"button-group\"))\n      }, [createVNode(unref(ElButtonGroup), null, {\n        default: withCtx(() => [createVNode(unref(ElButton), {\n          size: \"small\",\n          onClick: _cache[0] || (_cache[0] = $event => selectDate(\"prev-month\"))\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.prevMonth\")), 1)]),\n          _: 1\n        }), createVNode(unref(ElButton), {\n          size: \"small\",\n          onClick: _cache[1] || (_cache[1] = $event => selectDate(\"today\"))\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.today\")), 1)]),\n          _: 1\n        }), createVNode(unref(ElButton), {\n          size: \"small\",\n          onClick: _cache[2] || (_cache[2] = $event => selectDate(\"next-month\"))\n        }, {\n          default: withCtx(() => [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.nextMonth\")), 1)]),\n          _: 1\n        })]),\n        _: 1\n      })], 2)) : createCommentVNode(\"v-if\", true)])], 2), unref(validatedRange).length === 0 ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"body\"))\n      }, [createVNode(DateTable, {\n        date: unref(date),\n        \"selected-day\": unref(realSelectedDay),\n        onPick: pickDay\n      }, createSlots({\n        _: 2\n      }, [_ctx.$slots.dateCell ? {\n        name: \"dateCell\",\n        fn: withCtx(data => [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))])\n      } : void 0]), 1032, [\"date\", \"selected-day\"])], 2)) : (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(unref(ns).e(\"body\"))\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(validatedRange), (range_, index) => {\n        return openBlock(), createBlock(DateTable, {\n          key: index,\n          date: range_[0],\n          \"selected-day\": unref(realSelectedDay),\n          range: range_,\n          \"hide-header\": index !== 0,\n          onPick: pickDay\n        }, createSlots({\n          _: 2\n        }, [_ctx.$slots.dateCell ? {\n          name: \"dateCell\",\n          fn: withCtx(data => [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))])\n        } : void 0]), 1032, [\"date\", \"selected-day\", \"range\", \"hide-header\"]);\n      }), 128))], 2))], 2);\n    };\n  }\n\n});\n\nvar Calendar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/calendar/src/calendar.vue\"]]);\n\nexport { Calendar as default };","map":null,"metadata":{},"sourceType":"module"}