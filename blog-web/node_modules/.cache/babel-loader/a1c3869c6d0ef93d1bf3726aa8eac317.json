{"ast":null,"code":"import { defineComponent, computed, watch, provide, reactive, toRefs, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { formProps, formEmits } from './form.mjs';\nimport { filterFields, useFormLabelWidth } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isFunction } from '@vue/shared';\nimport { formContextKey } from '../../../tokens/form.mjs';\nconst __default__ = {\n  name: \"ElForm\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: formProps,\n  emits: formEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const COMPONENT_NAME = \"ElForm\";\n    const fields = [];\n    const formSize = useSize();\n    const ns = useNamespace(\"form\");\n    const formClasses = computed(() => {\n      const {\n        labelPosition,\n        inline\n      } = props;\n      return [ns.b(), ns.m(formSize.value || \"default\"), {\n        [ns.m(`label-${labelPosition}`)]: labelPosition,\n        [ns.m(\"inline\")]: inline\n      }];\n    });\n\n    const addField = field => {\n      fields.push(field);\n    };\n\n    const removeField = field => {\n      if (field.prop) {\n        fields.splice(fields.indexOf(field), 1);\n      }\n    };\n\n    const resetFields = (properties = []) => {\n      if (!props.model) {\n        debugWarn(COMPONENT_NAME, \"model is required for resetFields to work.\");\n        return;\n      }\n\n      filterFields(fields, properties).forEach(field => field.resetField());\n    };\n\n    const clearValidate = (props2 = []) => {\n      filterFields(fields, props2).forEach(field => field.clearValidate());\n    };\n\n    const isValidatable = computed(() => {\n      const hasModel = !!props.model;\n\n      if (!hasModel) {\n        debugWarn(COMPONENT_NAME, \"model is required for validate to work.\");\n      }\n\n      return hasModel;\n    });\n\n    const obtainValidateFields = props2 => {\n      if (fields.length === 0) return [];\n      const filteredFields = filterFields(fields, props2);\n\n      if (!filteredFields.length) {\n        debugWarn(COMPONENT_NAME, \"please pass correct props!\");\n        return [];\n      }\n\n      return filteredFields;\n    };\n\n    const validate = async callback => validateField(void 0, callback);\n\n    const doValidateField = async (props2 = []) => {\n      if (!isValidatable.value) return false;\n      const fields2 = obtainValidateFields(props2);\n      if (fields2.length === 0) return true;\n      let validationErrors = {};\n\n      for (const field of fields2) {\n        try {\n          await field.validate(\"\");\n        } catch (fields3) {\n          validationErrors = { ...validationErrors,\n            ...fields3\n          };\n        }\n      }\n\n      if (Object.keys(validationErrors).length === 0) return true;\n      return Promise.reject(validationErrors);\n    };\n\n    const validateField = async (modelProps = [], callback) => {\n      const shouldThrow = !isFunction(callback);\n\n      try {\n        const result = await doValidateField(modelProps);\n\n        if (result === true) {\n          callback == null ? void 0 : callback(result);\n        }\n\n        return result;\n      } catch (e) {\n        const invalidFields = e;\n\n        if (props.scrollToError) {\n          scrollToField(Object.keys(invalidFields)[0]);\n        }\n\n        callback == null ? void 0 : callback(false, invalidFields);\n        return shouldThrow && Promise.reject(invalidFields);\n      }\n    };\n\n    const scrollToField = prop => {\n      var _a;\n\n      const field = filterFields(fields, prop)[0];\n\n      if (field) {\n        (_a = field.$el) == null ? void 0 : _a.scrollIntoView();\n      }\n    };\n\n    watch(() => props.rules, () => {\n      if (props.validateOnRuleChange) {\n        validate().catch(err => debugWarn(err));\n      }\n    }, {\n      deep: true\n    });\n    provide(formContextKey, reactive({ ...toRefs(props),\n      emit,\n      resetFields,\n      clearValidate,\n      validateField,\n      addField,\n      removeField,\n      ...useFormLabelWidth()\n    }));\n    expose({\n      validate,\n      validateField,\n      resetFields,\n      clearValidate,\n      scrollToField\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"form\", {\n        class: normalizeClass(unref(formClasses))\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n\n});\n\nvar Form = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/form/src/form.vue\"]]);\n\nexport { Form as default };","map":null,"metadata":{},"sourceType":"module"}