{"ast":null,"code":"/* IMPORT */\nimport _ from '../utils/index.js';\nimport ChannelsReusable from '../channels/reusable.js';\nimport { DEC2HEX } from '../constants.js';\n/* MAIN */\n\nconst Hex = {\n  /* VARIABLES */\n  re: /^#((?:[a-f0-9]{2}){2,4}|[a-f0-9]{3})$/i,\n\n  /* API */\n  parse: color => {\n    if (color.charCodeAt(0) !== 35) return; // '#'\n\n    const match = color.match(Hex.re);\n    if (!match) return;\n    const hex = match[1];\n    const dec = parseInt(hex, 16);\n    const length = hex.length;\n    const hasAlpha = length % 4 === 0;\n    const isFullLength = length > 4;\n    const multiplier = isFullLength ? 1 : 17;\n    const bits = isFullLength ? 8 : 4;\n    const bitsOffset = hasAlpha ? 0 : -1;\n    const mask = isFullLength ? 255 : 15;\n    return ChannelsReusable.set({\n      r: (dec >> bits * (bitsOffset + 3) & mask) * multiplier,\n      g: (dec >> bits * (bitsOffset + 2) & mask) * multiplier,\n      b: (dec >> bits * (bitsOffset + 1) & mask) * multiplier,\n      a: hasAlpha ? (dec & mask) * multiplier / 255 : 1\n    }, color);\n  },\n  stringify: channels => {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = channels;\n\n    if (a < 1) {\n      // #RRGGBBAA\n      return `#${DEC2HEX[Math.round(r)]}${DEC2HEX[Math.round(g)]}${DEC2HEX[Math.round(b)]}${DEC2HEX[Math.round(a * 255)]}`;\n    } else {\n      // #RRGGBB\n      return `#${DEC2HEX[Math.round(r)]}${DEC2HEX[Math.round(g)]}${DEC2HEX[Math.round(b)]}`;\n    }\n  }\n};\n/* EXPORT */\n\nexport default Hex;","map":null,"metadata":{},"sourceType":"module"}