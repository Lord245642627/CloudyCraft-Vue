{"ast":null,"code":"import { defineComponent, inject, ref, computed, nextTick, watch, onMounted, resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, withModifiers, Fragment, renderList, toDisplayString, createElementVNode, withKeys, vModelText, createCommentVNode, vShow, renderSlot } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport { debounce } from 'lodash-unified';\nimport { isClient, useResizeObserver } from '@vueuse/core';\nimport _CascaderPanel from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { CircleClose, Check, ArrowDown } from '@element-plus/icons-vue';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { CommonProps } from '../../cascader-panel/src/config.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/tooltip.mjs';\nimport { tagProps } from '../../tag/src/tag.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nconst DEFAULT_INPUT_HEIGHT = 40;\nconst INPUT_HEIGHT_MAP = {\n  large: 36,\n  default: 32,\n  small: 28\n};\nconst popperOptions = {\n  modifiers: [{\n    name: \"arrowPosition\",\n    enabled: true,\n    phase: \"main\",\n    fn: ({\n      state\n    }) => {\n      const {\n        modifiersData,\n        placement\n      } = state;\n      if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n      modifiersData.arrow.x = 35;\n    },\n    requires: [\"arrow\"]\n  }]\n};\nconst COMPONENT_NAME = \"ElCascader\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElCascaderPanel: _CascaderPanel,\n    ElInput,\n    ElTooltip,\n    ElScrollbar,\n    ElTag,\n    ElIcon,\n    CircleClose,\n    Check,\n    ArrowDown\n  },\n  directives: {\n    Clickoutside: ClickOutside\n  },\n  props: { ...CommonProps,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    placeholder: {\n      type: String\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: {\n      type: Function,\n      default: (node, keyword) => node.text.includes(keyword)\n    },\n    separator: {\n      type: String,\n      default: \" / \"\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: Boolean,\n    collapseTagsTooltip: {\n      type: Boolean,\n      default: false\n    },\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    beforeFilter: {\n      type: Function,\n      default: () => true\n    },\n    popperClass: {\n      type: String,\n      default: \"\"\n    },\n    teleported: useTooltipContentProps.teleported,\n    tagType: { ...tagProps.type,\n      default: \"info\"\n    },\n    validateEvent: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"focus\", \"blur\", \"visible-change\", \"expand-change\", \"remove-tag\"],\n\n  setup(props, {\n    emit\n  }) {\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const nsCascader = useNamespace(\"cascader\");\n    const nsInput = useNamespace(\"input\");\n    const {\n      t\n    } = useLocale();\n    const elForm = inject(formContextKey, {});\n    const elFormItem = inject(formItemContextKey, {});\n    const tooltipRef = ref(null);\n    const input = ref(null);\n    const tagWrapper = ref(null);\n    const panel = ref(null);\n    const suggestionPanel = ref(null);\n    const popperVisible = ref(false);\n    const inputHover = ref(false);\n    const filtering = ref(false);\n    const inputValue = ref(\"\");\n    const searchInputValue = ref(\"\");\n    const presentTags = ref([]);\n    const allPresentTags = ref([]);\n    const suggestions = ref([]);\n    const isOnComposition = ref(false);\n    const isDisabled = computed(() => props.disabled || elForm.disabled);\n    const inputPlaceholder = computed(() => props.placeholder || t(\"el.cascader.placeholder\"));\n    const realSize = useSize();\n    const tagSize = computed(() => [\"small\"].includes(realSize.value) ? \"small\" : \"default\");\n    const multiple = computed(() => !!props.props.multiple);\n    const readonly = computed(() => !props.filterable || multiple.value);\n    const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = computed(() => {\n      var _a;\n\n      return ((_a = panel.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const clearBtnVisible = computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = computed(() => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \" \" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const checkedValue = computed({\n      get() {\n        return props.modelValue;\n      },\n\n      set(val) {\n        var _a;\n\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n\n        if (props.validateEvent) {\n          (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n        }\n      }\n\n    });\n    const popperPaneRef = computed(() => {\n      var _a, _b;\n\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n\n    const togglePopperVisible = visible => {\n      var _a, _b, _c;\n\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = panel.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          const {\n            value\n          } = presentText;\n          inputValue.value = value;\n          searchInputValue.value = value;\n        }\n\n        emit(\"visible-change\", visible);\n      }\n    };\n\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        var _a;\n\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n\n    const genTag = node => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n\n    const deleteTag = tag => {\n      var _a;\n\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = panel.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"remove-tag\", node.valueByOption);\n    };\n\n    const calculatePresentTags = () => {\n      if (!multiple.value) return;\n      const nodes = checkedNodes.value;\n      const tags = [];\n      const allTags = [];\n      nodes.forEach(node => allTags.push(genTag(node)));\n      allPresentTags.value = allTags;\n\n      if (nodes.length) {\n        const [first, ...rest] = nodes;\n        const restCount = rest.length;\n        tags.push(genTag(first));\n\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach(node => tags.push(genTag(node)));\n          }\n        }\n      }\n\n      presentTags.value = tags;\n    };\n\n    const calculateSuggestions = () => {\n      var _a, _b;\n\n      const {\n        filterMethod,\n        showAllLevels,\n        separator\n      } = props;\n      const res = (_b = (_a = panel.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(node => {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n\n      if (multiple.value) {\n        presentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n      }\n\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n\n    const focusFirstNode = () => {\n      var _a;\n\n      let firstNode;\n\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e(\"suggestion-item\")}`);\n      } else {\n        firstNode = (_a = panel.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b(\"node\")}[tabindex=\"-1\"]`);\n      }\n\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n\n    const updateStyle = () => {\n      var _a, _b;\n\n      const inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner) return;\n\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e(\"suggestion-list\")}`);\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n\n      if (tagWrapperEl) {\n        const {\n          offsetHeight\n        } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n\n    const getCheckedNodes = leafOnly => {\n      var _a;\n\n      return (_a = panel.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n\n    const handleExpandChange = value => {\n      updatePopperPosition();\n      emit(\"expand-change\", value);\n    };\n\n    const handleComposition = event => {\n      var _a;\n\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n\n      if (event.type === \"compositionend\") {\n        isOnComposition.value = false;\n        nextTick(() => handleInput(text));\n      } else {\n        const lastCharacter = text[text.length - 1] || \"\";\n        isOnComposition.value = !isKorean(lastCharacter);\n      }\n    };\n\n    const handleKeyDown = e => {\n      if (isOnComposition.value) return;\n\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible();\n          break;\n\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n\n          break;\n\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n\n    const handleClear = () => {\n      var _a;\n\n      (_a = panel.value) == null ? void 0 : _a.clearCheckedNodes();\n      togglePopperVisible(false);\n    };\n\n    const handleSuggestionClick = node => {\n      var _a, _b;\n\n      const {\n        checked\n      } = node;\n\n      if (multiple.value) {\n        (_a = panel.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = panel.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n\n    const handleSuggestionKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, `.${nsCascader.e(\"suggestion-item\")}[tabindex=\"-1\"]`));\n            break;\n          }\n\n        case EVENT_CODE.enter:\n          target.click();\n          break;\n      }\n    };\n\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount) return;\n\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n\n    const handleFilter = debounce(() => {\n      const {\n        value\n      } = searchKeyword;\n      if (!value) return;\n      const passed = props.beforeFilter(value);\n\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled], calculatePresentTags);\n    watch(presentTags, () => {\n      nextTick(() => updateStyle());\n    });\n    watch(presentText, val => inputValue.value = val, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n\n      const inputEl = (_a = input.value) == null ? void 0 : _a.$el;\n      inputInitialHeight = (inputEl == null ? void 0 : inputEl.offsetHeight) || INPUT_HEIGHT_MAP[realSize.value] || DEFAULT_INPUT_HEIGHT;\n      useResizeObserver(inputEl, updateStyle);\n    });\n    return {\n      popperOptions,\n      tooltipRef,\n      popperPaneRef,\n      input,\n      tagWrapper,\n      panel,\n      suggestionPanel,\n      popperVisible,\n      inputHover,\n      inputPlaceholder,\n      filtering,\n      presentText,\n      checkedValue,\n      inputValue,\n      searchInputValue,\n      presentTags,\n      allPresentTags,\n      suggestions,\n      isDisabled,\n      isOnComposition,\n      realSize,\n      tagSize,\n      multiple,\n      readonly,\n      clearBtnVisible,\n      nsCascader,\n      nsInput,\n      t,\n      togglePopperVisible,\n      hideSuggestionPanel,\n      deleteTag,\n      focusFirstNode,\n      getCheckedNodes,\n      handleExpandChange,\n      handleKeyDown,\n      handleComposition,\n      handleClear,\n      handleSuggestionClick,\n      handleSuggestionKeyDown,\n      handleDelete,\n      handleInput\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  class: \"el-cascader__collapse-tags\"\n};\nconst _hoisted_3 = [\"placeholder\"];\nconst _hoisted_4 = [\"onClick\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_circle_close = resolveComponent(\"circle-close\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_el_tag = resolveComponent(\"el-tag\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  const _component_el_cascader_panel = resolveComponent(\"el-cascader-panel\");\n\n  const _component_check = resolveComponent(\"check\");\n\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  const _directive_clickoutside = resolveDirective(\"clickoutside\");\n\n  return openBlock(), createBlock(_component_el_tooltip, {\n    ref: \"tooltipRef\",\n    visible: _ctx.popperVisible,\n    \"onUpdate:visible\": _cache[17] || (_cache[17] = $event => _ctx.popperVisible = $event),\n    teleported: _ctx.teleported,\n    \"popper-class\": [_ctx.nsCascader.e(\"dropdown\"), _ctx.popperClass],\n    \"popper-options\": _ctx.popperOptions,\n    \"fallback-placements\": [\"bottom-start\", \"bottom\", \"top-start\", \"top\", \"right\", \"left\"],\n    \"stop-popper-mouse-event\": false,\n    \"gpu-acceleration\": false,\n    placement: \"bottom-start\",\n    transition: `${_ctx.nsCascader.namespace.value}-zoom-in-top`,\n    effect: \"light\",\n    pure: \"\",\n    persistent: \"\",\n    onHide: _ctx.hideSuggestionPanel\n  }, {\n    default: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", {\n      class: normalizeClass([_ctx.nsCascader.b(), _ctx.nsCascader.m(_ctx.realSize), _ctx.nsCascader.is(\"disabled\", _ctx.isDisabled), _ctx.$attrs.class]),\n      style: normalizeStyle(_ctx.$attrs.style),\n      onClick: _cache[11] || (_cache[11] = () => _ctx.togglePopperVisible(_ctx.readonly ? void 0 : true)),\n      onKeydown: _cache[12] || (_cache[12] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args)),\n      onMouseenter: _cache[13] || (_cache[13] = $event => _ctx.inputHover = true),\n      onMouseleave: _cache[14] || (_cache[14] = $event => _ctx.inputHover = false)\n    }, [createVNode(_component_el_input, {\n      ref: \"input\",\n      modelValue: _ctx.inputValue,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.inputValue = $event),\n      placeholder: _ctx.searchInputValue ? \"\" : _ctx.inputPlaceholder,\n      readonly: _ctx.readonly,\n      disabled: _ctx.isDisabled,\n      \"validate-event\": false,\n      size: _ctx.realSize,\n      class: normalizeClass(_ctx.nsCascader.is(\"focus\", _ctx.popperVisible)),\n      onCompositionstart: _ctx.handleComposition,\n      onCompositionupdate: _ctx.handleComposition,\n      onCompositionend: _ctx.handleComposition,\n      onFocus: _cache[2] || (_cache[2] = e => _ctx.$emit(\"focus\", e)),\n      onBlur: _cache[3] || (_cache[3] = e => _ctx.$emit(\"blur\", e)),\n      onInput: _ctx.handleInput\n    }, {\n      suffix: withCtx(() => [_ctx.clearBtnVisible ? (openBlock(), createBlock(_component_el_icon, {\n        key: \"clear\",\n        class: normalizeClass([_ctx.nsInput.e(\"icon\"), \"icon-circle-close\"]),\n        onClick: withModifiers(_ctx.handleClear, [\"stop\"])\n      }, {\n        default: withCtx(() => [createVNode(_component_circle_close)]),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])) : (openBlock(), createBlock(_component_el_icon, {\n        key: \"arrow-down\",\n        class: normalizeClass([_ctx.nsInput.e(\"icon\"), \"icon-arrow-down\", _ctx.nsCascader.is(\"reverse\", _ctx.popperVisible)]),\n        onClick: _cache[0] || (_cache[0] = withModifiers($event => _ctx.togglePopperVisible(), [\"stop\"]))\n      }, {\n        default: withCtx(() => [createVNode(_component_arrow_down)]),\n        _: 1\n      }, 8, [\"class\"]))]),\n      _: 1\n    }, 8, [\"modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\", \"onInput\"]), _ctx.multiple ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      ref: \"tagWrapper\",\n      class: normalizeClass(_ctx.nsCascader.e(\"tags\"))\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.presentTags, tag => {\n      return openBlock(), createBlock(_component_el_tag, {\n        key: tag.key,\n        type: _ctx.tagType,\n        size: _ctx.tagSize,\n        hit: tag.hitState,\n        closable: tag.closable,\n        \"disable-transitions\": \"\",\n        onClose: $event => _ctx.deleteTag(tag)\n      }, {\n        default: withCtx(() => [tag.isCollapseTag === false ? (openBlock(), createElementBlock(\"span\", _hoisted_1, toDisplayString(tag.text), 1)) : (openBlock(), createBlock(_component_el_tooltip, {\n          key: 1,\n          teleported: false,\n          disabled: _ctx.popperVisible || !_ctx.collapseTagsTooltip,\n          \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n          placement: \"bottom\",\n          effect: \"light\"\n        }, {\n          default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)]),\n          content: withCtx(() => [createElementVNode(\"div\", _hoisted_2, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.allPresentTags, (tag2, idx) => {\n            return openBlock(), createElementBlock(\"div\", {\n              key: idx,\n              class: \"el-cascader__collapse-tag\"\n            }, [(openBlock(), createBlock(_component_el_tag, {\n              key: tag2.key,\n              class: \"in-tooltip\",\n              type: _ctx.tagType,\n              size: _ctx.tagSize,\n              hit: tag2.hitState,\n              closable: tag2.closable,\n              \"disable-transitions\": \"\",\n              onClose: $event => _ctx.deleteTag(tag2)\n            }, {\n              default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag2.text), 1)]),\n              _: 2\n            }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]))]);\n          }), 128))])]),\n          _: 2\n        }, 1032, [\"disabled\"]))]),\n        _: 2\n      }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]);\n    }), 128)), _ctx.filterable && !_ctx.isDisabled ? withDirectives((openBlock(), createElementBlock(\"input\", {\n      key: 0,\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.searchInputValue = $event),\n      type: \"text\",\n      class: normalizeClass(_ctx.nsCascader.e(\"search-input\")),\n      placeholder: _ctx.presentText ? \"\" : _ctx.inputPlaceholder,\n      onInput: _cache[5] || (_cache[5] = e => _ctx.handleInput(_ctx.searchInputValue, e)),\n      onClick: _cache[6] || (_cache[6] = withModifiers($event => _ctx.togglePopperVisible(true), [\"stop\"])),\n      onKeydown: _cache[7] || (_cache[7] = withKeys((...args) => _ctx.handleDelete && _ctx.handleDelete(...args), [\"delete\"])),\n      onCompositionstart: _cache[8] || (_cache[8] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionupdate: _cache[9] || (_cache[9] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionend: _cache[10] || (_cache[10] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args))\n    }, null, 42, _hoisted_3)), [[vModelText, _ctx.searchInputValue]]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 38)), [[_directive_clickoutside, () => _ctx.togglePopperVisible(false), _ctx.popperPaneRef]])]),\n    content: withCtx(() => [withDirectives(createVNode(_component_el_cascader_panel, {\n      ref: \"panel\",\n      modelValue: _ctx.checkedValue,\n      \"onUpdate:modelValue\": _cache[15] || (_cache[15] = $event => _ctx.checkedValue = $event),\n      options: _ctx.options,\n      props: _ctx.props,\n      border: false,\n      \"render-label\": _ctx.$slots.default,\n      onExpandChange: _ctx.handleExpandChange,\n      onClose: _cache[16] || (_cache[16] = $event => _ctx.$nextTick(() => _ctx.togglePopperVisible(false)))\n    }, null, 8, [\"modelValue\", \"options\", \"props\", \"render-label\", \"onExpandChange\"]), [[vShow, !_ctx.filtering]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(_component_el_scrollbar, {\n      key: 0,\n      ref: \"suggestionPanel\",\n      tag: \"ul\",\n      class: normalizeClass(_ctx.nsCascader.e(\"suggestion-panel\")),\n      \"view-class\": _ctx.nsCascader.e(\"suggestion-list\"),\n      onKeydown: _ctx.handleSuggestionKeyDown\n    }, {\n      default: withCtx(() => [_ctx.suggestions.length ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(_ctx.suggestions, item => {\n        return openBlock(), createElementBlock(\"li\", {\n          key: item.uid,\n          class: normalizeClass([_ctx.nsCascader.e(\"suggestion-item\"), _ctx.nsCascader.is(\"checked\", item.checked)]),\n          tabindex: -1,\n          onClick: $event => _ctx.handleSuggestionClick(item)\n        }, [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(_component_el_icon, {\n          key: 0\n        }, {\n          default: withCtx(() => [createVNode(_component_check)]),\n          _: 1\n        })) : createCommentVNode(\"v-if\", true)], 10, _hoisted_4);\n      }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n        key: 1\n      }, () => [createElementVNode(\"li\", {\n        class: normalizeClass(_ctx.nsCascader.e(\"empty-text\"))\n      }, toDisplayString(_ctx.t(\"el.cascader.noMatch\")), 3)])]),\n      _: 3\n    }, 8, [\"class\", \"view-class\", \"onKeydown\"])), [[vShow, _ctx.filtering]]) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 8, [\"visible\", \"teleported\", \"popper-class\", \"popper-options\", \"transition\", \"onHide\"]);\n}\n\nvar Cascader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader/src/index.vue\"]]);\n\nexport { Cascader as default };","map":null,"metadata":{},"sourceType":"module"}