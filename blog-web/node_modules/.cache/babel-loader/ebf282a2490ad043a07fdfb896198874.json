{"ast":null,"code":"import { ref, unref, watch } from 'vue';\n\nconst useScrollbar = (props, {\n  mainTableRef,\n  leftTableRef,\n  rightTableRef,\n  onMaybeEndReached\n}) => {\n  const scrollPos = ref({\n    scrollLeft: 0,\n    scrollTop: 0\n  });\n\n  function doScroll(params) {\n    var _a, _b, _c;\n\n    const {\n      scrollTop\n    } = params;\n    (_a = mainTableRef.value) == null ? void 0 : _a.scrollTo(params);\n    (_b = leftTableRef.value) == null ? void 0 : _b.scrollToTop(scrollTop);\n    (_c = rightTableRef.value) == null ? void 0 : _c.scrollToTop(scrollTop);\n  }\n\n  function scrollTo(params) {\n    scrollPos.value = params;\n    doScroll(params);\n  }\n\n  function scrollToTop(scrollTop) {\n    scrollPos.value.scrollTop = scrollTop;\n    doScroll(unref(scrollPos));\n  }\n\n  function scrollToLeft(scrollLeft) {\n    var _a, _b;\n\n    scrollPos.value.scrollLeft = scrollLeft;\n    (_b = (_a = mainTableRef.value) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, unref(scrollPos));\n  }\n\n  function onScroll(params) {\n    var _a;\n\n    scrollTo(params);\n    (_a = props.onScroll) == null ? void 0 : _a.call(props, params);\n  }\n\n  function onVerticalScroll({\n    scrollTop\n  }) {\n    const {\n      scrollTop: currentScrollTop\n    } = unref(scrollPos);\n    if (scrollTop !== currentScrollTop) scrollToTop(scrollTop);\n  }\n\n  function scrollToRow(row, strategy = \"auto\") {\n    var _a;\n\n    (_a = mainTableRef.value) == null ? void 0 : _a.scrollToRow(row, strategy);\n  }\n\n  watch(() => unref(scrollPos).scrollTop, (cur, prev) => {\n    if (cur > prev) onMaybeEndReached();\n  });\n  return {\n    scrollPos,\n    scrollTo,\n    scrollToLeft,\n    scrollToTop,\n    scrollToRow,\n    onScroll,\n    onVerticalScroll\n  };\n};\n\nexport { useScrollbar };","map":null,"metadata":{},"sourceType":"module"}