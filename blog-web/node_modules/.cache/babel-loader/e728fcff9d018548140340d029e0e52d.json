{"ast":null,"code":"import { defineComponent, inject, h } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { elDescriptionsKey } from './token.mjs';\nimport { getNormalizedProps } from '../../../utils/vue/vnode.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar DescriptionsCell = defineComponent({\n  name: \"ElDescriptionsCell\",\n  props: {\n    cell: {\n      type: Object\n    },\n    tag: {\n      type: String\n    },\n    type: {\n      type: String\n    }\n  },\n\n  setup() {\n    const descriptions = inject(elDescriptionsKey, {});\n    return {\n      descriptions\n    };\n  },\n\n  render() {\n    var _a, _b, _c, _d, _e, _f;\n\n    const item = getNormalizedProps(this.cell);\n    const {\n      border,\n      direction\n    } = this.descriptions;\n    const isVertical = direction === \"vertical\";\n    const label = ((_c = (_b = (_a = this.cell) == null ? void 0 : _a.children) == null ? void 0 : _b.label) == null ? void 0 : _c.call(_b)) || item.label;\n    const content = (_f = (_e = (_d = this.cell) == null ? void 0 : _d.children) == null ? void 0 : _e.default) == null ? void 0 : _f.call(_e);\n    const span = item.span;\n    const align = item.align ? `is-${item.align}` : \"\";\n    const labelAlign = item.labelAlign ? `is-${item.labelAlign}` : align;\n    const className = item.className;\n    const labelClassName = item.labelClassName;\n    const style = {\n      width: addUnit(item.width),\n      minWidth: addUnit(item.minWidth)\n    };\n    const ns = useNamespace(\"descriptions\");\n\n    switch (this.type) {\n      case \"label\":\n        return h(this.tag, {\n          style,\n          class: [ns.e(\"cell\"), ns.e(\"label\"), ns.is(\"bordered-label\", border), ns.is(\"vertical-label\", isVertical), labelAlign, labelClassName],\n          colSpan: isVertical ? span : 1\n        }, label);\n\n      case \"content\":\n        return h(this.tag, {\n          style,\n          class: [ns.e(\"cell\"), ns.e(\"content\"), ns.is(\"bordered-content\", border), ns.is(\"vertical-content\", isVertical), align, className],\n          colSpan: isVertical ? span : span * 2 - 1\n        }, content);\n\n      default:\n        return h(\"td\", {\n          style,\n          class: [ns.e(\"cell\"), align],\n          colSpan: span\n        }, [h(\"span\", {\n          class: [ns.e(\"label\"), labelClassName]\n        }, label), h(\"span\", {\n          class: [ns.e(\"content\"), className]\n        }, content)]);\n    }\n  }\n\n});\nexport { DescriptionsCell as default };","map":null,"metadata":{},"sourceType":"module"}