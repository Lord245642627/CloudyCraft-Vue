{"ast":null,"code":"import { defineComponent, useSlots, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, createElementVNode, withDirectives, createElementBlock, isRef, vModelCheckbox, renderSlot, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { checkboxProps, checkboxEmits, useCheckbox } from './checkbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _hoisted_1 = [\"tabindex\", \"role\", \"aria-checked\"];\nconst _hoisted_2 = [\"id\", \"aria-hidden\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nconst _hoisted_3 = [\"id\", \"aria-hidden\", \"disabled\", \"value\", \"name\", \"tabindex\"];\nconst __default__ = {\n  name: \"ElCheckbox\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: checkboxProps,\n  emits: checkboxEmits,\n\n  setup(__props) {\n    const props = __props;\n    const slots = useSlots();\n    const {\n      inputId,\n      isLabeledByFormItem,\n      isChecked,\n      isDisabled,\n      checkboxSize,\n      hasOwnLabel,\n      model,\n      handleChange,\n      onClickRoot,\n      focus\n    } = useCheckbox(props, slots);\n    const ns = useNamespace(\"checkbox\");\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(resolveDynamicComponent(!unref(hasOwnLabel) && unref(isLabeledByFormItem) ? \"span\" : \"label\"), {\n        class: normalizeClass([unref(ns).b(), unref(ns).m(unref(checkboxSize)), unref(ns).is(\"disabled\", unref(isDisabled)), unref(ns).is(\"bordered\", _ctx.border), unref(ns).is(\"checked\", unref(isChecked))]),\n        \"aria-controls\": _ctx.indeterminate ? _ctx.controls : null,\n        onClick: unref(onClickRoot)\n      }, {\n        default: withCtx(() => [createElementVNode(\"span\", {\n          class: normalizeClass([unref(ns).e(\"input\"), unref(ns).is(\"disabled\", unref(isDisabled)), unref(ns).is(\"checked\", unref(isChecked)), unref(ns).is(\"indeterminate\", _ctx.indeterminate), unref(ns).is(\"focus\", unref(focus))]),\n          tabindex: _ctx.indeterminate ? 0 : void 0,\n          role: _ctx.indeterminate ? \"checkbox\" : void 0,\n          \"aria-checked\": _ctx.indeterminate ? \"mixed\" : void 0\n        }, [_ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n          key: 0,\n          id: unref(inputId),\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => isRef(model) ? model.value = $event : null),\n          class: normalizeClass(unref(ns).e(\"original\")),\n          type: \"checkbox\",\n          \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n          name: _ctx.name,\n          tabindex: _ctx.tabindex,\n          disabled: unref(isDisabled),\n          \"true-value\": _ctx.trueLabel,\n          \"false-value\": _ctx.falseLabel,\n          onChange: _cache[1] || (_cache[1] = (...args) => unref(handleChange) && unref(handleChange)(...args)),\n          onFocus: _cache[2] || (_cache[2] = $event => focus.value = true),\n          onBlur: _cache[3] || (_cache[3] = $event => focus.value = false)\n        }, null, 42, _hoisted_2)), [[vModelCheckbox, unref(model)]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n          key: 1,\n          id: unref(inputId),\n          \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => isRef(model) ? model.value = $event : null),\n          class: normalizeClass(unref(ns).e(\"original\")),\n          type: \"checkbox\",\n          \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n          disabled: unref(isDisabled),\n          value: _ctx.label,\n          name: _ctx.name,\n          tabindex: _ctx.tabindex,\n          onChange: _cache[5] || (_cache[5] = (...args) => unref(handleChange) && unref(handleChange)(...args)),\n          onFocus: _cache[6] || (_cache[6] = $event => focus.value = true),\n          onBlur: _cache[7] || (_cache[7] = $event => focus.value = false)\n        }, null, 42, _hoisted_3)), [[vModelCheckbox, unref(model)]]), createElementVNode(\"span\", {\n          class: normalizeClass(unref(ns).e(\"inner\"))\n        }, null, 2)], 10, _hoisted_1), unref(hasOwnLabel) ? (openBlock(), createElementBlock(\"span\", {\n          key: 0,\n          class: normalizeClass(unref(ns).e(\"label\"))\n        }, [renderSlot(_ctx.$slots, \"default\"), !_ctx.$slots.default ? (openBlock(), createElementBlock(Fragment, {\n          key: 0\n        }, [createTextVNode(toDisplayString(_ctx.label), 1)], 64)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"class\", \"aria-controls\", \"onClick\"]);\n    };\n  }\n\n});\n\nvar Checkbox = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox.vue\"]]);\n\nexport { Checkbox as default };","map":null,"metadata":{},"sourceType":"module"}