{"ast":null,"code":"import { defineComponent, inject, computed, openBlock, createElementBlock, unref, normalizeClass, normalizeStyle, withModifiers, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createBlock, resolveDynamicComponent, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { dialogContentProps, dialogContentEmits } from './dialog-content.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { CloseComponents } from '../../../utils/vue/icon.mjs';\nimport { dialogInjectionKey } from '../../../tokens/dialog.mjs';\nimport { FOCUS_TRAP_INJECTION_KEY } from '../../focus-trap/src/tokens.mjs';\nimport { composeRefs } from '../../../utils/vue/refs.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = [\"id\"];\nconst __default__ = {\n  name: \"ElDialogContent\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: dialogContentProps,\n  emits: dialogContentEmits,\n\n  setup(__props) {\n    const props = __props;\n    const {\n      t\n    } = useLocale();\n    const {\n      Close\n    } = CloseComponents;\n    const {\n      dialogRef,\n      headerRef,\n      bodyId,\n      ns,\n      style\n    } = inject(dialogInjectionKey);\n    const {\n      focusTrapRef\n    } = inject(FOCUS_TRAP_INJECTION_KEY);\n    const composedDialogRef = composeRefs(focusTrapRef, dialogRef);\n    const draggable = computed(() => props.draggable);\n    useDraggable(dialogRef, headerRef, draggable);\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref: unref(composedDialogRef),\n        class: normalizeClass([unref(ns).b(), unref(ns).is(\"fullscreen\", _ctx.fullscreen), unref(ns).is(\"draggable\", unref(draggable)), {\n          [unref(ns).m(\"center\")]: _ctx.center\n        }, _ctx.customClass]),\n        style: normalizeStyle(unref(style)),\n        tabindex: \"-1\",\n        onClick: _cache[1] || (_cache[1] = withModifiers(() => {}, [\"stop\"]))\n      }, [createElementVNode(\"header\", {\n        ref_key: \"headerRef\",\n        ref: headerRef,\n        class: normalizeClass(unref(ns).e(\"header\"))\n      }, [renderSlot(_ctx.$slots, \"header\", {}, () => [createElementVNode(\"span\", {\n        role: \"heading\",\n        class: normalizeClass(unref(ns).e(\"title\"))\n      }, toDisplayString(_ctx.title), 3)]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        \"aria-label\": unref(t)(\"el.dialog.close\"),\n        class: normalizeClass(unref(ns).e(\"headerbtn\")),\n        type: \"button\",\n        onClick: _cache[0] || (_cache[0] = $event => _ctx.$emit(\"close\"))\n      }, [createVNode(unref(ElIcon), {\n        class: normalizeClass(unref(ns).e(\"close\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon || unref(Close))))]),\n        _: 1\n      }, 8, [\"class\"])], 10, _hoisted_1)) : createCommentVNode(\"v-if\", true)], 2), createElementVNode(\"div\", {\n        id: unref(bodyId),\n        class: normalizeClass(unref(ns).e(\"body\"))\n      }, [renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_2), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"footer\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"footer\"))\n      }, [renderSlot(_ctx.$slots, \"footer\")], 2)) : createCommentVNode(\"v-if\", true)], 6);\n    };\n  }\n\n});\n\nvar ElDialogContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog-content.vue\"]]);\n\nexport { ElDialogContent as default };","map":null,"metadata":{},"sourceType":"module"}