{"ast":null,"code":"import { inject, computed } from 'vue';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\n\nconst getAllColumns = columns => {\n  const result = [];\n  columns.forEach(column => {\n    if (column.children) {\n      result.push(column);\n      result.push.apply(result, getAllColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\n\nconst convertToRows = originColumns => {\n  let maxLevel = 1;\n\n  const traverse = (column, parent) => {\n    if (parent) {\n      column.level = parent.level + 1;\n\n      if (maxLevel < column.level) {\n        maxLevel = column.level;\n      }\n    }\n\n    if (column.children) {\n      let colSpan = 0;\n      column.children.forEach(subColumn => {\n        traverse(subColumn, column);\n        colSpan += subColumn.colSpan;\n      });\n      column.colSpan = colSpan;\n    } else {\n      column.colSpan = 1;\n    }\n  };\n\n  originColumns.forEach(column => {\n    column.level = 1;\n    traverse(column, void 0);\n  });\n  const rows = [];\n\n  for (let i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n\n  const allColumns = getAllColumns(originColumns);\n  allColumns.forEach(column => {\n    if (!column.children) {\n      column.rowSpan = maxLevel - column.level + 1;\n    } else {\n      column.rowSpan = 1;\n      column.children.forEach(col => col.isSubColumn = true);\n    }\n\n    rows[column.level - 1].push(column);\n  });\n  return rows;\n};\n\nfunction useUtils(props) {\n  const parent = inject(TABLE_INJECTION_KEY);\n  const columnRows = computed(() => {\n    return convertToRows(props.store.states.originColumns.value);\n  });\n  const isGroup = computed(() => {\n    const result = columnRows.value.length > 1;\n\n    if (result && parent) {\n      parent.state.isGroup.value = true;\n    }\n\n    return result;\n  });\n\n  const toggleAllSelection = event => {\n    event.stopPropagation();\n    parent == null ? void 0 : parent.store.commit(\"toggleAllSelection\");\n  };\n\n  return {\n    isGroup,\n    toggleAllSelection,\n    columnRows\n  };\n}\n\nexport { useUtils as default };","map":null,"metadata":{},"sourceType":"module"}