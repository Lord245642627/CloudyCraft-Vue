{"ast":null,"code":"import { defineComponent, useSlots, computed, inject, ref, Text, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, Fragment, renderSlot, createBlock, withCtx, resolveDynamicComponent, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { buttonProps, buttonEmits } from './button.mjs';\nimport { useButtonCustomStyle } from './button-custom.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { buttonGroupContextKey } from '../../../tokens/button.mjs';\nimport { useGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nconst _hoisted_1 = [\"aria-disabled\", \"disabled\", \"autofocus\", \"type\"];\nconst __default__ = {\n  name: \"ElButton\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: buttonProps,\n  emits: buttonEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const slots = useSlots();\n    useDeprecated({\n      from: \"type.text\",\n      replacement: \"type.link\",\n      version: \"3.0.0\",\n      scope: \"props\",\n      ref: \"https://element-plus.org/en-US/component/button.html#button-attributes\"\n    }, computed(() => props.type === \"text\"));\n    const buttonGroupContext = inject(buttonGroupContextKey, void 0);\n    const globalConfig = useGlobalConfig(\"button\");\n    const ns = useNamespace(\"button\");\n    const {\n      form\n    } = useFormItem();\n\n    const _size = useSize(computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));\n\n    const _disabled = useDisabled();\n\n    const _ref = ref();\n\n    const _type = computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || \"\");\n\n    const autoInsertSpace = computed(() => {\n      var _a, _b, _c;\n\n      return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a = globalConfig.value) == null ? void 0 : _a.autoInsertSpace) != null ? _c : false;\n    });\n    const shouldAddSpace = computed(() => {\n      var _a;\n\n      const defaultSlot = (_a = slots.default) == null ? void 0 : _a.call(slots);\n\n      if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {\n        const slot = defaultSlot[0];\n\n        if ((slot == null ? void 0 : slot.type) === Text) {\n          const text = slot.children;\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text.trim());\n        }\n      }\n\n      return false;\n    });\n    const buttonStyle = useButtonCustomStyle(props);\n\n    const handleClick = evt => {\n      if (props.nativeType === \"reset\") {\n        form == null ? void 0 : form.resetFields();\n      }\n\n      emit(\"click\", evt);\n    };\n\n    expose({\n      ref: _ref,\n      size: _size,\n      type: _type,\n      disabled: _disabled,\n      shouldAddSpace\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"button\", {\n        ref_key: \"_ref\",\n        ref: _ref,\n        class: normalizeClass([unref(ns).b(), unref(ns).m(unref(_type)), unref(ns).m(unref(_size)), unref(ns).is(\"disabled\", unref(_disabled)), unref(ns).is(\"loading\", _ctx.loading), unref(ns).is(\"plain\", _ctx.plain), unref(ns).is(\"round\", _ctx.round), unref(ns).is(\"circle\", _ctx.circle), unref(ns).is(\"text\", _ctx.text), unref(ns).is(\"link\", _ctx.link), unref(ns).is(\"has-bg\", _ctx.bg)]),\n        \"aria-disabled\": unref(_disabled) || _ctx.loading,\n        disabled: unref(_disabled) || _ctx.loading,\n        autofocus: _ctx.autofocus,\n        type: _ctx.nativeType,\n        style: normalizeStyle(unref(buttonStyle)),\n        onClick: handleClick\n      }, [_ctx.loading ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [_ctx.$slots.loading ? renderSlot(_ctx.$slots, \"loading\", {\n        key: 0\n      }) : (openBlock(), createBlock(unref(ElIcon), {\n        key: 1,\n        class: normalizeClass(unref(ns).is(\"loading\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon)))]),\n        _: 1\n      }, 8, [\"class\"]))], 64)) : _ctx.icon || _ctx.$slots.icon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 1\n      }, {\n        default: withCtx(() => [_ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {\n          key: 0\n        })) : renderSlot(_ctx.$slots, \"icon\", {\n          key: 1\n        })]),\n        _: 3\n      })) : createCommentVNode(\"v-if\", true), _ctx.$slots.default ? (openBlock(), createElementBlock(\"span\", {\n        key: 2,\n        class: normalizeClass({\n          [unref(ns).em(\"text\", \"expand\")]: unref(shouldAddSpace)\n        })\n      }, [renderSlot(_ctx.$slots, \"default\")], 2)) : createCommentVNode(\"v-if\", true)], 14, _hoisted_1);\n    };\n  }\n\n});\n\nvar Button = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/button/src/button.vue\"]]);\n\nexport { Button as default };","map":null,"metadata":{},"sourceType":"module"}