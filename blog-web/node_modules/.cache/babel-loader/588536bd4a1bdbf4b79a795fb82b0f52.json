{"ast":null,"code":"import { defineComponent, inject, ref, openBlock, createElementBlock, normalizeClass, unref, withModifiers, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { uploadDraggerProps, uploadDraggerEmits } from './upload-dragger.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { uploadContextKey } from '../../../tokens/upload.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _hoisted_1 = [\"onDrop\", \"onDragover\"];\nconst __default__ = {\n  name: \"ElUploadDrag\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: uploadDraggerProps,\n  emits: uploadDraggerEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const COMPONENT_NAME = \"ElUploadDrag\";\n    const uploaderContext = inject(uploadContextKey);\n\n    if (!uploaderContext) {\n      throwError(COMPONENT_NAME, \"usage: <el-upload><el-upload-dragger /></el-upload>\");\n    }\n\n    const ns = useNamespace(\"upload\");\n    const dragover = ref(false);\n\n    const onDrop = e => {\n      if (props.disabled) return;\n      dragover.value = false;\n      const files = Array.from(e.dataTransfer.files);\n      const accept = uploaderContext.accept.value;\n\n      if (!accept) {\n        emit(\"file\", files);\n        return;\n      }\n\n      const filesFiltered = files.filter(file => {\n        const {\n          type,\n          name\n        } = file;\n        const extension = name.includes(\".\") ? `.${name.split(\".\").pop()}` : \"\";\n        const baseType = type.replace(/\\/.*$/, \"\");\n        return accept.split(\",\").map(type2 => type2.trim()).filter(type2 => type2).some(acceptedType => {\n          if (acceptedType.startsWith(\".\")) {\n            return extension === acceptedType;\n          }\n\n          if (/\\/\\*$/.test(acceptedType)) {\n            return baseType === acceptedType.replace(/\\/\\*$/, \"\");\n          }\n\n          if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n            return type === acceptedType;\n          }\n\n          return false;\n        });\n      });\n      emit(\"file\", filesFiltered);\n    };\n\n    const onDragover = () => {\n      if (!props.disabled) dragover.value = true;\n    };\n\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(\"dragger\"), unref(ns).is(\"dragover\", dragover.value)]),\n        onDrop: withModifiers(onDrop, [\"prevent\"]),\n        onDragover: withModifiers(onDragover, [\"prevent\"]),\n        onDragleave: _cache[0] || (_cache[0] = withModifiers($event => dragover.value = false, [\"prevent\"]))\n      }, [renderSlot(_ctx.$slots, \"default\")], 42, _hoisted_1);\n    };\n  }\n\n});\n\nvar UploadDragger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-dragger.vue\"]]);\n\nexport { UploadDragger as default };","map":null,"metadata":{},"sourceType":"module"}