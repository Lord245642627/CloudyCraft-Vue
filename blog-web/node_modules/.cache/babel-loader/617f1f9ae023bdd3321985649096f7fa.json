{"ast":null,"code":"/*!\n  * @intlify/shared v9.1.10\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n\n/**\r\n * Original Utilities\r\n * written by kazuya kawaguchi\r\n */\nconst inBrowser = typeof window !== 'undefined';\nlet mark;\nlet measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  const perf = inBrowser && window.performance;\n\n  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {\n    mark = tag => perf.mark(tag);\n\n    measure = (name, startTag, endTag) => {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n    };\n  }\n}\n\nconst RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\n/* eslint-disable */\n\nfunction format(message, ...args) {\n  if (args.length === 1 && isObject(args[0])) {\n    args = args[0];\n  }\n\n  if (!args || !args.hasOwnProperty) {\n    args = {};\n  }\n\n  return message.replace(RE_ARGS, (match, identifier) => {\n    return args.hasOwnProperty(identifier) ? args[identifier] : '';\n  });\n}\n\nconst hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nconst makeSymbol = name => hasSymbol ? Symbol(name) : name;\n\nconst generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({\n  l: locale,\n  k: key,\n  s: source\n});\n\nconst friendlyJSONstringify = json => JSON.stringify(json).replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029').replace(/\\u0027/g, '\\\\u0027');\n\nconst isNumber = val => typeof val === 'number' && isFinite(val);\n\nconst isDate = val => toTypeString(val) === '[object Date]';\n\nconst isRegExp = val => toTypeString(val) === '[object RegExp]';\n\nconst isEmptyObject = val => isPlainObject(val) && Object.keys(val).length === 0;\n\nfunction warn(msg, err) {\n  if (typeof console !== 'undefined') {\n    console.warn(`[intlify] ` + msg);\n    /* istanbul ignore if */\n\n    if (err) {\n      console.warn(err.stack);\n    }\n  }\n}\n\nconst assign = Object.assign;\n\nlet _globalThis;\n\nconst getGlobalThis = () => {\n  // prettier-ignore\n  return _globalThis || (_globalThis = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {});\n};\n\nfunction escapeHtml(rawText) {\n  return rawText.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n/* eslint-enable */\n\n/**\r\n * Useful Utilities By Evan you\r\n * Modified by kazuya kawaguchi\r\n * MIT License\r\n * https://github.com/vuejs/vue-next/blob/master/packages/shared/src/index.ts\r\n * https://github.com/vuejs/vue-next/blob/master/packages/shared/src/codeframe.ts\r\n */\n\n\nconst isArray = Array.isArray;\n\nconst isFunction = val => typeof val === 'function';\n\nconst isString = val => typeof val === 'string';\n\nconst isBoolean = val => typeof val === 'boolean';\n\nconst isSymbol = val => typeof val === 'symbol';\n\nconst isObject = val => // eslint-disable-line\nval !== null && typeof val === 'object';\n\nconst isPromise = val => {\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch);\n};\n\nconst objectToString = Object.prototype.toString;\n\nconst toTypeString = value => objectToString.call(value);\n\nconst isPlainObject = val => toTypeString(val) === '[object Object]'; // for converting list and named values to displayed strings.\n\n\nconst toDisplayString = val => {\n  return val == null ? '' : isArray(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);\n};\n\nconst RANGE = 2;\n\nfunction generateCodeFrame(source, start = 0, end = source.length) {\n  const lines = source.split(/\\r?\\n/);\n  let count = 0;\n  const res = [];\n\n  for (let i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n\n    if (count >= start) {\n      for (let j = i - RANGE; j <= i + RANGE || end > count; j++) {\n        if (j < 0 || j >= lines.length) continue;\n        const line = j + 1;\n        res.push(`${line}${' '.repeat(3 - String(line).length)}|  ${lines[j]}`);\n        const lineLength = lines[j].length;\n\n        if (j === i) {\n          // push underline\n          const pad = start - (count - lineLength) + 1;\n          const length = Math.max(1, end > count ? lineLength - pad : end - start);\n          res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));\n        } else if (j > i) {\n          if (end > count) {\n            const length = Math.max(Math.min(end - count, lineLength), 1);\n            res.push(`   |  ` + '^'.repeat(length));\n          }\n\n          count += lineLength + 1;\n        }\n      }\n\n      break;\n    }\n  }\n\n  return res.join('\\n');\n}\n/**\r\n * Event emitter, forked from the below:\r\n * - original repository url: https://github.com/developit/mitt\r\n * - code url: https://github.com/developit/mitt/blob/master/src/index.ts\r\n * - author: Jason Miller (https://github.com/developit)\r\n * - license: MIT\r\n */\n\n/**\r\n * Create a event emitter\r\n *\r\n * @returns An event emitter\r\n */\n\n\nfunction createEmitter() {\n  const events = new Map();\n  const emitter = {\n    events,\n\n    on(event, handler) {\n      const handlers = events.get(event);\n      const added = handlers && handlers.push(handler);\n\n      if (!added) {\n        events.set(event, [handler]);\n      }\n    },\n\n    off(event, handler) {\n      const handlers = events.get(event);\n\n      if (handlers) {\n        handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n      }\n    },\n\n    emit(event, payload) {\n      (events.get(event) || []).slice().map(handler => handler(payload));\n      (events.get('*') || []).slice().map(handler => handler(event, payload));\n    }\n\n  };\n  return emitter;\n}\n\nexport { assign, createEmitter, escapeHtml, format, friendlyJSONstringify, generateCodeFrame, generateFormatCacheKey, getGlobalThis, hasOwn, inBrowser, isArray, isBoolean, isDate, isEmptyObject, isFunction, isNumber, isObject, isPlainObject, isPromise, isRegExp, isString, isSymbol, makeSymbol, mark, measure, objectToString, toDisplayString, toTypeString, warn };","map":null,"metadata":{},"sourceType":"module"}