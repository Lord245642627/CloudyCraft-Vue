{"ast":null,"code":"import { defineComponent, inject, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode } from 'vue';\nimport { CaretRight } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport '../../../hooks/index.mjs';\nimport ElNodeContent from './tree-node-content.mjs';\nimport { treeNodeProps, treeNodeEmits, ROOT_TREE_INJECTION_KEY, NODE_CONTEXTMENU } from './virtual-tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst DEFAULT_ICON = \"caret-right\";\n\nconst _sfc_main = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElIcon,\n    CaretRight,\n    ElCheckbox,\n    ElNodeContent\n  },\n  props: treeNodeProps,\n  emits: treeNodeEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const tree = inject(ROOT_TREE_INJECTION_KEY);\n    const ns = useNamespace(\"tree\");\n    const indent = computed(() => {\n      var _a;\n\n      return (_a = tree == null ? void 0 : tree.props.indent) != null ? _a : 16;\n    });\n    const icon = computed(() => {\n      var _a;\n\n      return (_a = tree == null ? void 0 : tree.props.icon) != null ? _a : DEFAULT_ICON;\n    });\n\n    const handleClick = e => {\n      emit(\"click\", props.node, e);\n    };\n\n    const handleExpandIconClick = () => {\n      emit(\"toggle\", props.node);\n    };\n\n    const handleCheckChange = value => {\n      emit(\"check\", props.node, value);\n    };\n\n    const handleContextMenu = event => {\n      var _a, _b, _c, _d;\n\n      if ((_c = (_b = (_a = tree == null ? void 0 : tree.instance) == null ? void 0 : _a.vnode) == null ? void 0 : _b.props) == null ? void 0 : _c[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n\n      tree == null ? void 0 : tree.ctx.emit(NODE_CONTEXTMENU, event, (_d = props.node) == null ? void 0 : _d.data, props.node);\n    };\n\n    return {\n      ns,\n      indent,\n      icon,\n      handleClick,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleContextMenu\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"data-key\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a, _b, _c;\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  const _component_el_node_content = resolveComponent(\"el-node-content\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.current), _ctx.ns.is(\"focusable\", !_ctx.disabled), _ctx.ns.is(\"checked\", !_ctx.disabled && _ctx.checked)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.disabled,\n    \"aria-checked\": _ctx.checked,\n    \"data-key\": (_a = _ctx.node) == null ? void 0 : _a.key,\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: normalizeStyle({\n      paddingLeft: `${(_ctx.node.level - 1) * _ctx.indent}px`\n    })\n  }, [_ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.is(\"leaf\", !!((_b = _ctx.node) == null ? void 0 : _b.isLeaf)), _ctx.ns.is(\"hidden\", _ctx.hiddenExpandIcon), {\n      expanded: !((_c = _ctx.node) == null ? void 0 : _c.isLeaf) && _ctx.expanded\n    }, _ctx.ns.be(\"node\", \"expand-icon\")]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.checked,\n    indeterminate: _ctx.indeterminate,\n    disabled: _ctx.disabled,\n    onChange: _ctx.handleCheckChange,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"]))\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_el_node_content, {\n    node: _ctx.node\n  }, null, 8, [\"node\"])], 6)], 42, _hoisted_1);\n}\n\nvar ElTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree-v2/src/tree-node.vue\"]]);\n\nexport { ElTreeNode as default };","map":null,"metadata":{},"sourceType":"module"}