{"ast":null,"code":"import { intersectLine } from './intersect-line.js';\nexport { intersectPolygon };\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\n\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n  var intersections = [];\n  var minX = Number.POSITIVE_INFINITY;\n  var minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function (entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n  var left = x1 - node.width / 2 - minX;\n  var top = y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(node, point, {\n      x: left + p1.x,\n      y: top + p1.y\n    }, {\n      x: left + p2.x,\n      y: top + p2.y\n    });\n\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log('NO INTERSECTION FOUND, RETURN NODE CENTER', node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function (p, q) {\n      var pdx = p.x - point.x;\n      var pdy = p.y - point.y;\n      var distp = Math.sqrt(pdx * pdx + pdy * pdy);\n      var qdx = q.x - point.x;\n      var qdy = q.y - point.y;\n      var distq = Math.sqrt(qdx * qdx + qdy * qdy);\n      return distp < distq ? -1 : distp === distq ? 0 : 1;\n    });\n  }\n\n  return intersections[0];\n}","map":{"version":3,"names":["intersectLine","intersectPolygon","node","polyPoints","point","x1","x","y1","y","intersections","minX","Number","POSITIVE_INFINITY","minY","forEach","entry","Math","min","left","width","top","height","i","length","p1","p2","intersect","push","console","log","sort","p","q","pdx","pdy","distp","sqrt","qdx","qdy","distq"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-web/node_modules/dagre-d3-es/src/dagre-js/intersect/intersect-polygon.js"],"sourcesContent":["import { intersectLine } from './intersect-line.js';\n\nexport { intersectPolygon };\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY;\n  var minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function (entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top = y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(\n      node,\n      point,\n      { x: left + p1.x, y: top + p1.y },\n      { x: left + p2.x, y: top + p2.y }\n    );\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log('NO INTERSECTION FOUND, RETURN NODE CENTER', node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function (p, q) {\n      var pdx = p.x - point.x;\n      var pdy = p.y - point.y;\n      var distp = Math.sqrt(pdx * pdx + pdy * pdy);\n\n      var qdx = q.x - point.x;\n      var qdy = q.y - point.y;\n      var distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return distp < distq ? -1 : distp === distq ? 0 : 1;\n    });\n  }\n  return intersections[0];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}