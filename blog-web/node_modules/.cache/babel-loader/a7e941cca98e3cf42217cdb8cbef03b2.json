{"ast":null,"code":"import { defineComponent, inject, ref, provide, computed, unref, onMounted, watch, toRefs, onBeforeUnmount, openBlock, createElementBlock, normalizeStyle, normalizeClass, createVNode, withCtx, renderSlot } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport { isNil } from 'lodash-unified';\nimport { createPopper } from '@popperjs/core';\nimport '../../focus-trap/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport { usePopperContentProps, usePopperContentEmits } from './content.mjs';\nimport { unwrapMeasurableEl, buildPopperOptions } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { POPPER_INJECTION_KEY, POPPER_CONTENT_INJECTION_KEY } from '../../../tokens/popper.mjs';\nimport { formItemContextKey } from '../../../tokens/form.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nconst __default__ = {\n  name: \"ElPopperContent\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: usePopperContentProps,\n  emits: usePopperContentEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      popperInstanceRef,\n      contentRef,\n      triggerRef,\n      role\n    } = inject(POPPER_INJECTION_KEY, void 0);\n    const formItemContext = inject(formItemContextKey, void 0);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const ns = useNamespace(\"popper\");\n    const popperContentRef = ref();\n    const focusStartRef = ref(\"first\");\n    const arrowRef = ref();\n    const arrowOffset = ref();\n    provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowRef,\n      arrowOffset\n    });\n\n    if (formItemContext && (formItemContext.addInputId || formItemContext.removeInputId)) {\n      provide(formItemContextKey, { ...formItemContext,\n        addInputId: NOOP,\n        removeInputId: NOOP\n      });\n    }\n\n    const contentZIndex = ref(props.zIndex || nextZIndex());\n    const trapped = ref(false);\n    let triggerTargetAriaStopWatch = void 0;\n    const computedReference = computed(() => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef));\n    const contentStyle = computed(() => [{\n      zIndex: unref(contentZIndex)\n    }, props.popperStyle]);\n    const contentClass = computed(() => [ns.b(), ns.is(\"pure\", props.pure), ns.is(props.effect), props.popperClass]);\n    const ariaModal = computed(() => {\n      return role && role.value === \"dialog\" ? \"false\" : void 0;\n    });\n\n    const createPopperInstance = ({\n      referenceEl,\n      popperContentEl,\n      arrowEl\n    }) => {\n      const options = buildPopperOptions(props, {\n        arrowEl,\n        arrowOffset: unref(arrowOffset)\n      });\n      return createPopper(referenceEl, popperContentEl, options);\n    };\n\n    const updatePopper = (shouldUpdateZIndex = true) => {\n      var _a;\n\n      (_a = unref(popperInstanceRef)) == null ? void 0 : _a.update();\n      shouldUpdateZIndex && (contentZIndex.value = props.zIndex || nextZIndex());\n    };\n\n    const togglePopperAlive = () => {\n      var _a, _b;\n\n      const monitorable = {\n        name: \"eventListeners\",\n        enabled: props.visible\n      };\n      (_b = (_a = unref(popperInstanceRef)) == null ? void 0 : _a.setOptions) == null ? void 0 : _b.call(_a, options => ({ ...options,\n        modifiers: [...(options.modifiers || []), monitorable]\n      }));\n      updatePopper(false);\n\n      if (props.visible && props.focusOnShow) {\n        trapped.value = true;\n      } else if (props.visible === false) {\n        trapped.value = false;\n      }\n    };\n\n    const onFocusAfterTrapped = () => {\n      emit(\"focus\");\n    };\n\n    const onFocusAfterReleased = () => {\n      focusStartRef.value = \"first\";\n      emit(\"blur\");\n    };\n\n    const onFocusInTrap = event => {\n      var _a;\n\n      if (props.visible && !trapped.value) {\n        if (event.relatedTarget) {\n          ;\n          (_a = event.relatedTarget) == null ? void 0 : _a.focus();\n        }\n\n        if (event.target) {\n          focusStartRef.value = event.target;\n        }\n\n        trapped.value = true;\n      }\n    };\n\n    const onFocusoutPrevented = () => {\n      if (!props.trapping) {\n        trapped.value = false;\n      }\n    };\n\n    const onReleaseRequested = () => {\n      trapped.value = false;\n      emit(\"close\");\n    };\n\n    onMounted(() => {\n      let updateHandle;\n      watch(computedReference, referenceEl => {\n        var _a;\n\n        updateHandle == null ? void 0 : updateHandle();\n        const popperInstance = unref(popperInstanceRef);\n        (_a = popperInstance == null ? void 0 : popperInstance.destroy) == null ? void 0 : _a.call(popperInstance);\n\n        if (referenceEl) {\n          const popperContentEl = unref(popperContentRef);\n          contentRef.value = popperContentEl;\n          popperInstanceRef.value = createPopperInstance({\n            referenceEl,\n            popperContentEl,\n            arrowEl: unref(arrowRef)\n          });\n          updateHandle = watch(() => referenceEl.getBoundingClientRect(), () => updatePopper(), {\n            immediate: true\n          });\n        } else {\n          popperInstanceRef.value = void 0;\n        }\n      }, {\n        immediate: true\n      });\n      watch(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {\n        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n        triggerTargetAriaStopWatch = void 0;\n        const el = unref(triggerTargetEl || popperContentRef.value);\n        const prevEl = unref(prevTriggerTargetEl || popperContentRef.value);\n\n        if (isElement(el)) {\n          const {\n            ariaLabel,\n            id\n          } = toRefs(props);\n          triggerTargetAriaStopWatch = watch([role, ariaLabel, ariaModal, id], watches => {\n            ;\n            [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach((key, idx) => {\n              isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);\n            });\n          }, {\n            immediate: true\n          });\n        }\n\n        if (isElement(prevEl)) {\n          ;\n          [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach(key => {\n            prevEl.removeAttribute(key);\n          });\n        }\n      }, {\n        immediate: true\n      });\n      watch(() => props.visible, togglePopperAlive, {\n        immediate: true\n      });\n      watch(() => buildPopperOptions(props, {\n        arrowEl: unref(arrowRef),\n        arrowOffset: unref(arrowOffset)\n      }), option => {\n        var _a;\n\n        return (_a = popperInstanceRef.value) == null ? void 0 : _a.setOptions(option);\n      });\n    });\n    onBeforeUnmount(() => {\n      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n      triggerTargetAriaStopWatch = void 0;\n    });\n    expose({\n      popperContentRef,\n      popperInstanceRef,\n      updatePopper,\n      contentStyle\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"popperContentRef\",\n        ref: popperContentRef,\n        style: normalizeStyle(unref(contentStyle)),\n        class: normalizeClass(unref(contentClass)),\n        tabindex: \"-1\",\n        onMouseenter: _cache[0] || (_cache[0] = e => _ctx.$emit(\"mouseenter\", e)),\n        onMouseleave: _cache[1] || (_cache[1] = e => _ctx.$emit(\"mouseleave\", e))\n      }, [createVNode(unref(ElFocusTrap), {\n        trapped: trapped.value,\n        \"trap-on-focus-in\": true,\n        \"focus-trap-el\": popperContentRef.value,\n        \"focus-start-el\": focusStartRef.value,\n        onFocusAfterTrapped,\n        onFocusAfterReleased,\n        onFocusin: onFocusInTrap,\n        onFocusoutPrevented,\n        onReleaseRequested\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\"])], 38);\n    };\n  }\n\n});\n\nvar ElPopperContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue\"]]);\n\nexport { ElPopperContent as default };","map":null,"metadata":{},"sourceType":"module"}