{"ast":null,"code":"import { defineComponent, vModelText, provide, reactive, toRefs, resolveComponent, resolveDirective, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createVNode, withCtx, createElementVNode, renderSlot, createCommentVNode, normalizeStyle, toDisplayString, createBlock, Fragment, renderList, withKeys, resolveDynamicComponent, vShow, normalizeProps, guardReactiveProps } from 'vue';\nimport '../../../directives/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../constants/index.mjs';\nimport ElSelectMenu from './select-dropdown.mjs';\nimport useSelect from './useSelect.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport { SelectProps } from './defaults.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSelectV2\",\n  components: {\n    ElSelectMenu,\n    ElTag,\n    ElTooltip,\n    ElIcon\n  },\n  directives: {\n    ClickOutside,\n    ModelText: vModelText\n  },\n  props: SelectProps,\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"remove-tag\", \"clear\", \"visible-change\", \"focus\", \"blur\"],\n\n  setup(props, {\n    emit\n  }) {\n    const API = useSelect(props, emit);\n    provide(selectV2InjectionKey, {\n      props: reactive({ ...toRefs(props),\n        height: API.popupHeight\n      }),\n      onSelect: API.onSelect,\n      onHover: API.onHover,\n      onKeyboardNavigate: API.onKeyboardNavigate,\n      onKeyboardSelect: API.onKeyboardSelect\n    });\n    return API;\n  }\n\n});\n\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"id\", \"autocomplete\", \"aria-expanded\", \"aria-labelledby\", \"disabled\", \"readonly\", \"name\", \"unselectable\"];\nconst _hoisted_3 = [\"textContent\"];\nconst _hoisted_4 = [\"id\", \"aria-labelledby\", \"aria-expanded\", \"autocomplete\", \"disabled\", \"name\", \"readonly\", \"unselectable\"];\nconst _hoisted_5 = [\"textContent\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tag = resolveComponent(\"el-tag\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_select_menu = resolveComponent(\"el-select-menu\");\n\n  const _directive_model_text = resolveDirective(\"model-text\");\n\n  const _directive_click_outside = resolveDirective(\"click-outside\");\n\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"selectRef\",\n    class: normalizeClass([_ctx.nsSelectV2.b(), _ctx.nsSelectV2.m(_ctx.selectSize)]),\n    onClick: _cache[24] || (_cache[24] = withModifiers((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), [\"stop\"])),\n    onMouseenter: _cache[25] || (_cache[25] = $event => _ctx.states.comboBoxHovering = true),\n    onMouseleave: _cache[26] || (_cache[26] = $event => _ctx.states.comboBoxHovering = false)\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"popper\",\n    visible: _ctx.dropdownMenuVisible,\n    \"onUpdate:visible\": _cache[22] || (_cache[22] = $event => _ctx.dropdownMenuVisible = $event),\n    teleported: _ctx.teleported,\n    \"popper-class\": [_ctx.nsSelectV2.e(\"popper\"), _ctx.popperClass],\n    \"gpu-acceleration\": false,\n    \"stop-popper-mouse-event\": false,\n    \"popper-options\": _ctx.popperOptions,\n    \"fallback-placements\": [\"bottom-start\", \"top-start\", \"right\", \"left\"],\n    effect: _ctx.effect,\n    placement: \"bottom-start\",\n    pure: \"\",\n    transition: `${_ctx.nsSelectV2.namespace.value}-zoom-in-top`,\n    trigger: \"click\",\n    persistent: _ctx.persistent,\n    onBeforeShow: _ctx.handleMenuEnter,\n    onHide: _cache[23] || (_cache[23] = $event => _ctx.states.inputValue = _ctx.states.displayInputValue)\n  }, {\n    default: withCtx(() => {\n      var _a;\n\n      return [createElementVNode(\"div\", {\n        ref: \"selectionRef\",\n        class: normalizeClass([_ctx.nsSelectV2.e(\"wrapper\"), _ctx.nsSelectV2.is(\"focused\", _ctx.states.isComposing), _ctx.nsSelectV2.is(\"hovering\", _ctx.states.comboBoxHovering), _ctx.nsSelectV2.is(\"filterable\", _ctx.filterable), _ctx.nsSelectV2.is(\"disabled\", _ctx.selectDisabled)])\n      }, [_ctx.$slots.prefix ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [renderSlot(_ctx.$slots, \"prefix\")])) : createCommentVNode(\"v-if\", true), _ctx.multiple ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(_ctx.nsSelectV2.e(\"selection\"))\n      }, [_ctx.collapseTags && _ctx.modelValue.length > 0 ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(_ctx.nsSelectV2.e(\"selected-item\"))\n      }, [createVNode(_component_el_tag, {\n        closable: !_ctx.selectDisabled && !((_a = _ctx.states.cachedOptions[0]) == null ? void 0 : _a.disable),\n        size: _ctx.collapseTagSize,\n        type: \"info\",\n        \"disable-transitions\": \"\",\n        onClose: _cache[0] || (_cache[0] = $event => _ctx.deleteTag($event, _ctx.states.cachedOptions[0]))\n      }, {\n        default: withCtx(() => {\n          var _a2;\n\n          return [createElementVNode(\"span\", {\n            class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n            style: normalizeStyle({\n              maxWidth: `${_ctx.tagMaxWidth}px`\n            })\n          }, toDisplayString((_a2 = _ctx.states.cachedOptions[0]) == null ? void 0 : _a2.label), 7)];\n        }),\n        _: 1\n      }, 8, [\"closable\", \"size\"]), _ctx.modelValue.length > 1 ? (openBlock(), createBlock(_component_el_tag, {\n        key: 0,\n        closable: false,\n        size: _ctx.collapseTagSize,\n        type: \"info\",\n        \"disable-transitions\": \"\"\n      }, {\n        default: withCtx(() => [_ctx.collapseTagsTooltip ? (openBlock(), createBlock(_component_el_tooltip, {\n          key: 0,\n          disabled: _ctx.dropdownMenuVisible,\n          \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n          effect: _ctx.effect,\n          placement: \"bottom\",\n          teleported: false\n        }, {\n          default: withCtx(() => [createElementVNode(\"span\", {\n            class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n            style: normalizeStyle({\n              maxWidth: `${_ctx.tagMaxWidth}px`\n            })\n          }, \"+ \" + toDisplayString(_ctx.modelValue.length - 1), 7)]),\n          content: withCtx(() => [createElementVNode(\"div\", {\n            class: normalizeClass(_ctx.nsSelectV2.e(\"selection\"))\n          }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.states.cachedOptions.slice(1), (selected, idx) => {\n            return openBlock(), createElementBlock(\"div\", {\n              key: idx,\n              class: normalizeClass(_ctx.nsSelectV2.e(\"selected-item\"))\n            }, [(openBlock(), createBlock(_component_el_tag, {\n              key: _ctx.getValueKey(selected),\n              closable: !_ctx.selectDisabled && !selected.disabled,\n              size: _ctx.collapseTagSize,\n              class: \"in-tooltip\",\n              type: \"info\",\n              \"disable-transitions\": \"\",\n              onClose: $event => _ctx.deleteTag($event, selected)\n            }, {\n              default: withCtx(() => [createElementVNode(\"span\", {\n                class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n                style: normalizeStyle({\n                  maxWidth: `${_ctx.tagMaxWidth}px`\n                })\n              }, toDisplayString(_ctx.getLabel(selected)), 7)]),\n              _: 2\n            }, 1032, [\"closable\", \"size\", \"onClose\"]))], 2);\n          }), 128))], 2)]),\n          _: 1\n        }, 8, [\"disabled\", \"effect\"])) : (openBlock(), createElementBlock(\"span\", {\n          key: 1,\n          class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n          style: normalizeStyle({\n            maxWidth: `${_ctx.tagMaxWidth}px`\n          })\n        }, \"+ \" + toDisplayString(_ctx.modelValue.length - 1), 7))]),\n        _: 1\n      }, 8, [\"size\"])) : createCommentVNode(\"v-if\", true)], 2)) : (openBlock(true), createElementBlock(Fragment, {\n        key: 1\n      }, renderList(_ctx.states.cachedOptions, (selected, idx) => {\n        return openBlock(), createElementBlock(\"div\", {\n          key: idx,\n          class: normalizeClass(_ctx.nsSelectV2.e(\"selected-item\"))\n        }, [(openBlock(), createBlock(_component_el_tag, {\n          key: _ctx.getValueKey(selected),\n          closable: !_ctx.selectDisabled && !selected.disabled,\n          size: _ctx.collapseTagSize,\n          type: \"info\",\n          \"disable-transitions\": \"\",\n          onClose: $event => _ctx.deleteTag($event, selected)\n        }, {\n          default: withCtx(() => [createElementVNode(\"span\", {\n            class: normalizeClass(_ctx.nsSelectV2.e(\"tags-text\")),\n            style: normalizeStyle({\n              maxWidth: `${_ctx.tagMaxWidth}px`\n            })\n          }, toDisplayString(_ctx.getLabel(selected)), 7)]),\n          _: 2\n        }, 1032, [\"closable\", \"size\", \"onClose\"]))], 2);\n      }), 128)), createElementVNode(\"div\", {\n        class: normalizeClass([_ctx.nsSelectV2.e(\"selected-item\"), _ctx.nsSelectV2.e(\"input-wrapper\")]),\n        style: normalizeStyle(_ctx.inputWrapperStyle)\n      }, [withDirectives(createElementVNode(\"input\", {\n        id: _ctx.id,\n        ref: \"inputRef\",\n        autocomplete: _ctx.autocomplete,\n        \"aria-autocomplete\": \"list\",\n        \"aria-haspopup\": \"listbox\",\n        autocapitalize: \"off\",\n        \"aria-expanded\": _ctx.expanded,\n        \"aria-labelledby\": _ctx.label,\n        class: normalizeClass([_ctx.nsSelectV2.is(_ctx.selectSize), _ctx.nsSelectV2.e(\"combobox-input\")]),\n        disabled: _ctx.disabled,\n        role: \"combobox\",\n        readonly: !_ctx.filterable,\n        spellcheck: \"false\",\n        type: \"text\",\n        name: _ctx.name,\n        unselectable: _ctx.expanded ? \"on\" : void 0,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = (...args) => _ctx.onUpdateInputValue && _ctx.onUpdateInputValue(...args)),\n        onFocus: _cache[2] || (_cache[2] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n        onInput: _cache[3] || (_cache[3] = (...args) => _ctx.onInput && _ctx.onInput(...args)),\n        onCompositionstart: _cache[4] || (_cache[4] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n        onCompositionupdate: _cache[5] || (_cache[5] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n        onCompositionend: _cache[6] || (_cache[6] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n        onKeydown: [_cache[7] || (_cache[7] = withKeys(withModifiers($event => _ctx.onKeyboardNavigate(\"backward\"), [\"stop\", \"prevent\"]), [\"up\"])), _cache[8] || (_cache[8] = withKeys(withModifiers($event => _ctx.onKeyboardNavigate(\"forward\"), [\"stop\", \"prevent\"]), [\"down\"])), _cache[9] || (_cache[9] = withKeys(withModifiers((...args) => _ctx.onKeyboardSelect && _ctx.onKeyboardSelect(...args), [\"stop\", \"prevent\"]), [\"enter\"])), _cache[10] || (_cache[10] = withKeys(withModifiers((...args) => _ctx.handleEsc && _ctx.handleEsc(...args), [\"stop\", \"prevent\"]), [\"esc\"])), _cache[11] || (_cache[11] = withKeys(withModifiers((...args) => _ctx.handleDel && _ctx.handleDel(...args), [\"stop\"]), [\"delete\"]))]\n      }, null, 42, _hoisted_2), [[_directive_model_text, _ctx.states.displayInputValue]]), _ctx.filterable ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        ref: \"calculatorRef\",\n        \"aria-hidden\": \"true\",\n        class: normalizeClass(_ctx.nsSelectV2.e(\"input-calculator\")),\n        textContent: toDisplayString(_ctx.states.displayInputValue)\n      }, null, 10, _hoisted_3)) : createCommentVNode(\"v-if\", true)], 6)], 2)) : (openBlock(), createElementBlock(Fragment, {\n        key: 2\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass([_ctx.nsSelectV2.e(\"selected-item\"), _ctx.nsSelectV2.e(\"input-wrapper\")])\n      }, [withDirectives(createElementVNode(\"input\", {\n        id: _ctx.id,\n        ref: \"inputRef\",\n        \"aria-autocomplete\": \"list\",\n        \"aria-haspopup\": \"listbox\",\n        \"aria-labelledby\": _ctx.label,\n        \"aria-expanded\": _ctx.expanded,\n        autocapitalize: \"off\",\n        autocomplete: _ctx.autocomplete,\n        class: normalizeClass(_ctx.nsSelectV2.e(\"combobox-input\")),\n        disabled: _ctx.disabled,\n        name: _ctx.name,\n        role: \"combobox\",\n        readonly: !_ctx.filterable,\n        spellcheck: \"false\",\n        type: \"text\",\n        unselectable: _ctx.expanded ? \"on\" : void 0,\n        onCompositionstart: _cache[12] || (_cache[12] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n        onCompositionupdate: _cache[13] || (_cache[13] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n        onCompositionend: _cache[14] || (_cache[14] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n        onFocus: _cache[15] || (_cache[15] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n        onInput: _cache[16] || (_cache[16] = (...args) => _ctx.onInput && _ctx.onInput(...args)),\n        onKeydown: [_cache[17] || (_cache[17] = withKeys(withModifiers($event => _ctx.onKeyboardNavigate(\"backward\"), [\"stop\", \"prevent\"]), [\"up\"])), _cache[18] || (_cache[18] = withKeys(withModifiers($event => _ctx.onKeyboardNavigate(\"forward\"), [\"stop\", \"prevent\"]), [\"down\"])), _cache[19] || (_cache[19] = withKeys(withModifiers((...args) => _ctx.onKeyboardSelect && _ctx.onKeyboardSelect(...args), [\"stop\", \"prevent\"]), [\"enter\"])), _cache[20] || (_cache[20] = withKeys(withModifiers((...args) => _ctx.handleEsc && _ctx.handleEsc(...args), [\"stop\", \"prevent\"]), [\"esc\"]))],\n        \"onUpdate:modelValue\": _cache[21] || (_cache[21] = (...args) => _ctx.onUpdateInputValue && _ctx.onUpdateInputValue(...args))\n      }, null, 42, _hoisted_4), [[_directive_model_text, _ctx.states.displayInputValue]])], 2), _ctx.filterable ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        ref: \"calculatorRef\",\n        \"aria-hidden\": \"true\",\n        class: normalizeClass([_ctx.nsSelectV2.e(\"selected-item\"), _ctx.nsSelectV2.e(\"input-calculator\")]),\n        textContent: toDisplayString(_ctx.states.displayInputValue)\n      }, null, 10, _hoisted_5)) : createCommentVNode(\"v-if\", true)], 64)), _ctx.shouldShowPlaceholder ? (openBlock(), createElementBlock(\"span\", {\n        key: 3,\n        class: normalizeClass([_ctx.nsSelectV2.e(\"placeholder\"), _ctx.nsSelectV2.is(\"transparent\", _ctx.states.isComposing || (_ctx.placeholder && _ctx.multiple ? _ctx.modelValue.length === 0 : !_ctx.hasModelValue))])\n      }, toDisplayString(_ctx.currentPlaceholder), 3)) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", {\n        class: normalizeClass(_ctx.nsSelectV2.e(\"suffix\"))\n      }, [_ctx.iconComponent ? withDirectives((openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([_ctx.nsSelectV2.e(\"caret\"), _ctx.nsInput.e(\"icon\"), _ctx.iconReverse])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])), [[vShow, !_ctx.showClearBtn]]) : createCommentVNode(\"v-if\", true), _ctx.showClearBtn && _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 1,\n        class: normalizeClass([_ctx.nsSelectV2.e(\"caret\"), _ctx.nsInput.e(\"icon\")]),\n        onClick: withModifiers(_ctx.handleClear, [\"prevent\", \"stop\"])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.validateState && _ctx.validateIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 2,\n        class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"validateIcon\")])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.validateIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)];\n    }),\n    content: withCtx(() => [createVNode(_component_el_select_menu, {\n      ref: \"menuRef\",\n      data: _ctx.filteredOptions,\n      width: _ctx.popperSize,\n      \"hovering-index\": _ctx.states.hoveringIndex,\n      \"scrollbar-always-on\": _ctx.scrollbarAlwaysOn\n    }, {\n      default: withCtx(scope => [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(scope)))]),\n      empty: withCtx(() => [renderSlot(_ctx.$slots, \"empty\", {}, () => [createElementVNode(\"p\", {\n        class: normalizeClass(_ctx.nsSelectV2.e(\"empty\"))\n      }, toDisplayString(_ctx.emptyText ? _ctx.emptyText : \"\"), 3)])]),\n      _: 3\n    }, 8, [\"data\", \"width\", \"hovering-index\", \"scrollbar-always-on\"])]),\n    _: 3\n  }, 8, [\"visible\", \"teleported\", \"popper-class\", \"popper-options\", \"effect\", \"transition\", \"persistent\", \"onBeforeShow\"])], 34)), [[_directive_click_outside, _ctx.handleClickOutside, _ctx.popperRef]]);\n}\n\nvar Select = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/select.vue\"]]);\n\nexport { Select as default };","map":null,"metadata":{},"sourceType":"module"}