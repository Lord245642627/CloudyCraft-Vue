{"ast":null,"code":"import pointRadial from \"../pointRadial.js\";\n\nclass Bump {\n  constructor(context, x) {\n    this._context = context;\n    this._x = x;\n  }\n\n  areaStart() {\n    this._line = 0;\n  }\n\n  areaEnd() {\n    this._line = NaN;\n  }\n\n  lineStart() {\n    this._point = 0;\n  }\n\n  lineEnd() {\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n\n  point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        {\n          this._point = 1;\n          if (this._line) this._context.lineTo(x, y);else this._context.moveTo(x, y);\n          break;\n        }\n\n      case 1:\n        this._point = 2;\n      // falls through\n\n      default:\n        {\n          if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);\n          break;\n        }\n    }\n\n    this._x0 = x, this._y0 = y;\n  }\n\n}\n\nclass BumpRadial {\n  constructor(context) {\n    this._context = context;\n  }\n\n  lineStart() {\n    this._point = 0;\n  }\n\n  lineEnd() {}\n\n  point(x, y) {\n    x = +x, y = +y;\n\n    if (this._point === 0) {\n      this._point = 1;\n    } else {\n      const p0 = pointRadial(this._x0, this._y0);\n      const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);\n      const p2 = pointRadial(x, this._y0);\n      const p3 = pointRadial(x, y);\n\n      this._context.moveTo(...p0);\n\n      this._context.bezierCurveTo(...p1, ...p2, ...p3);\n    }\n\n    this._x0 = x, this._y0 = y;\n  }\n\n}\n\nexport function bumpX(context) {\n  return new Bump(context, true);\n}\nexport function bumpY(context) {\n  return new Bump(context, false);\n}\nexport function bumpRadial(context) {\n  return new BumpRadial(context);\n}","map":null,"metadata":{},"sourceType":"module"}