{"ast":null,"code":"import * as _ from 'lodash-es';\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (pathIdx < path.length - 1 && g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {\n          pathIdx++;\n        }\n\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n} // Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\n\n\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca; // Traverse up from v to find the LCA\n\n  parent = v;\n\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n\n  lca = parent; // Traverse from w to LCA\n\n  parent = w;\n\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return {\n    path: vPath.concat(wPath.reverse()),\n    lca: lca\n  };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n\n    _.forEach(g.children(v), dfs);\n\n    result[v] = {\n      low: low,\n      lim: lim++\n    };\n  }\n\n  _.forEach(g.children(), dfs);\n\n  return result;\n}","map":{"version":3,"names":["_","parentDummyChains","g","postorderNums","postorder","forEach","graph","dummyChains","v","node","edgeObj","pathData","findPath","w","path","lca","pathIdx","pathV","ascending","maxRank","rank","length","minRank","setParent","successors","vPath","wPath","low","Math","min","lim","max","parent","push","concat","reverse","result","dfs","children"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-web/node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}