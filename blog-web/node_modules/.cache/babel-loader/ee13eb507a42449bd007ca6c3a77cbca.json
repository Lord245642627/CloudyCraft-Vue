{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\nimport { orient2d } from 'robust-predicates';\nexport default class Delaunator {\n  static from(points, getX = defaultGetX, getY = defaultGetY) {\n    const n = points.length;\n    const coords = new Float64Array(n * 2);\n\n    for (let i = 0; i < n; i++) {\n      const p = points[i];\n      coords[2 * i] = getX(p);\n      coords[2 * i + 1] = getY(p);\n    }\n\n    return new Delaunator(coords);\n  }\n\n  constructor(coords) {\n    const n = coords.length >> 1;\n    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n    this.coords = coords; // arrays that will store the triangulation graph\n\n    const maxTriangles = Math.max(2 * n - 5, 0);\n    this._triangles = new Uint32Array(maxTriangles * 3);\n    this._halfedges = new Int32Array(maxTriangles * 3); // temporary arrays for tracking the edges of the advancing convex hull\n\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hullPrev = new Uint32Array(n); // edge to prev edge\n\n    this._hullNext = new Uint32Array(n); // edge to next edge\n\n    this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n\n    this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n    // temporary arrays for sorting points\n\n    this._ids = new Uint32Array(n);\n    this._dists = new Float64Array(n);\n    this.update();\n  }\n\n  update() {\n    const {\n      coords,\n      _hullPrev: hullPrev,\n      _hullNext: hullNext,\n      _hullTri: hullTri,\n      _hullHash: hullHash\n    } = this;\n    const n = coords.length >> 1; // populate an array of point indices; calculate input data bbox\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for (let i = 0; i < n; i++) {\n      const x = coords[2 * i];\n      const y = coords[2 * i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      this._ids[i] = i;\n    }\n\n    const cx = (minX + maxX) / 2;\n    const cy = (minY + maxY) / 2;\n    let minDist = Infinity;\n    let i0, i1, i2; // pick a seed point close to the center\n\n    for (let i = 0; i < n; i++) {\n      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n\n      if (d < minDist) {\n        i0 = i;\n        minDist = d;\n      }\n    }\n\n    const i0x = coords[2 * i0];\n    const i0y = coords[2 * i0 + 1];\n    minDist = Infinity; // find the point closest to the seed\n\n    for (let i = 0; i < n; i++) {\n      if (i === i0) continue;\n      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n\n      if (d < minDist && d > 0) {\n        i1 = i;\n        minDist = d;\n      }\n    }\n\n    let i1x = coords[2 * i1];\n    let i1y = coords[2 * i1 + 1];\n    let minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two\n\n    for (let i = 0; i < n; i++) {\n      if (i === i0 || i === i1) continue;\n      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n\n      if (r < minRadius) {\n        i2 = i;\n        minRadius = r;\n      }\n    }\n\n    let i2x = coords[2 * i2];\n    let i2y = coords[2 * i2 + 1];\n\n    if (minRadius === Infinity) {\n      // order collinear points by dx (or dy if all x are identical)\n      // and return the list as a hull\n      for (let i = 0; i < n; i++) {\n        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];\n      }\n\n      quicksort(this._ids, this._dists, 0, n - 1);\n      const hull = new Uint32Array(n);\n      let j = 0;\n\n      for (let i = 0, d0 = -Infinity; i < n; i++) {\n        const id = this._ids[i];\n\n        if (this._dists[id] > d0) {\n          hull[j++] = id;\n          d0 = this._dists[id];\n        }\n      }\n\n      this.hull = hull.subarray(0, j);\n      this.triangles = new Uint32Array(0);\n      this.halfedges = new Uint32Array(0);\n      return;\n    } // swap the order of the seed points for counter-clockwise orientation\n\n\n    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n      const i = i1;\n      const x = i1x;\n      const y = i1y;\n      i1 = i2;\n      i1x = i2x;\n      i1y = i2y;\n      i2 = i;\n      i2x = x;\n      i2y = y;\n    }\n\n    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n    this._cx = center.x;\n    this._cy = center.y;\n\n    for (let i = 0; i < n; i++) {\n      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n    } // sort the points by distance from the seed triangle circumcenter\n\n\n    quicksort(this._ids, this._dists, 0, n - 1); // set up the seed triangle as the starting hull\n\n    this._hullStart = i0;\n    let hullSize = 3;\n    hullNext[i0] = hullPrev[i2] = i1;\n    hullNext[i1] = hullPrev[i0] = i2;\n    hullNext[i2] = hullPrev[i1] = i0;\n    hullTri[i0] = 0;\n    hullTri[i1] = 1;\n    hullTri[i2] = 2;\n    hullHash.fill(-1);\n    hullHash[this._hashKey(i0x, i0y)] = i0;\n    hullHash[this._hashKey(i1x, i1y)] = i1;\n    hullHash[this._hashKey(i2x, i2y)] = i2;\n    this.trianglesLen = 0;\n\n    this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n    for (let k = 0, xp, yp; k < this._ids.length; k++) {\n      const i = this._ids[k];\n      const x = coords[2 * i];\n      const y = coords[2 * i + 1]; // skip near-duplicate points\n\n      if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n      xp = x;\n      yp = y; // skip seed triangle points\n\n      if (i === i0 || i === i1 || i === i2) continue; // find a visible edge on the convex hull using edge hash\n\n      let start = 0;\n\n      for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n        start = hullHash[(key + j) % this._hashSize];\n        if (start !== -1 && start !== hullNext[start]) break;\n      }\n\n      start = hullPrev[start];\n      let e = start,\n          q;\n\n      while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n        e = q;\n\n        if (e === start) {\n          e = -1;\n          break;\n        }\n      }\n\n      if (e === -1) continue; // likely a near-duplicate point; skip it\n      // add the first triangle from the point\n\n      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]); // recursively flip triangles from the point until they satisfy the Delaunay condition\n\n\n      hullTri[i] = this._legalize(t + 2);\n      hullTri[e] = t; // keep track of boundary triangles on the hull\n\n      hullSize++; // walk forward through the hull, adding more triangles and flipping recursively\n\n      let n = hullNext[e];\n\n      while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n        t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n        hullTri[i] = this._legalize(t + 2);\n        hullNext[n] = n; // mark as removed\n\n        hullSize--;\n        n = q;\n      } // walk backward from the other side, adding more triangles and flipping\n\n\n      if (e === start) {\n        while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n\n          this._legalize(t + 2);\n\n          hullTri[q] = t;\n          hullNext[e] = e; // mark as removed\n\n          hullSize--;\n          e = q;\n        }\n      } // update the hull indices\n\n\n      this._hullStart = hullPrev[i] = e;\n      hullNext[e] = hullPrev[n] = i;\n      hullNext[i] = n; // save the two new edges in the hash table\n\n      hullHash[this._hashKey(x, y)] = i;\n      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n    }\n\n    this.hull = new Uint32Array(hullSize);\n\n    for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n      this.hull[i] = e;\n      e = hullNext[e];\n    } // trim typed triangle mesh arrays\n\n\n    this.triangles = this._triangles.subarray(0, this.trianglesLen);\n    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n  }\n\n  _hashKey(x, y) {\n    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n  }\n\n  _legalize(a) {\n    const {\n      _triangles: triangles,\n      _halfedges: halfedges,\n      coords\n    } = this;\n    let i = 0;\n    let ar = 0; // recursion eliminated with a fixed-size stack\n\n    while (true) {\n      const b = halfedges[a];\n      /* if the pair of triangles doesn't satisfy the Delaunay condition\n       * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n       * then do the same check/flip recursively for the new pair of triangles\n       *\n       *           pl                    pl\n       *          /||\\                  /  \\\n       *       al/ || \\bl            al/    \\a\n       *        /  ||  \\              /      \\\n       *       /  a||b  \\    flip    /___ar___\\\n       *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n       *        \\  ||  /              \\      /\n       *       ar\\ || /br             b\\    /br\n       *          \\||/                  \\  /\n       *           pr                    pr\n       */\n\n      const a0 = a - a % 3;\n      ar = a0 + (a + 2) % 3;\n\n      if (b === -1) {\n        // convex hull edge\n        if (i === 0) break;\n        a = EDGE_STACK[--i];\n        continue;\n      }\n\n      const b0 = b - b % 3;\n      const al = a0 + (a + 1) % 3;\n      const bl = b0 + (b + 2) % 3;\n      const p0 = triangles[ar];\n      const pr = triangles[a];\n      const pl = triangles[al];\n      const p1 = triangles[bl];\n      const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n\n      if (illegal) {\n        triangles[a] = p1;\n        triangles[b] = p0;\n        const hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference\n\n        if (hbl === -1) {\n          let e = this._hullStart;\n\n          do {\n            if (this._hullTri[e] === bl) {\n              this._hullTri[e] = a;\n              break;\n            }\n\n            e = this._hullPrev[e];\n          } while (e !== this._hullStart);\n        }\n\n        this._link(a, hbl);\n\n        this._link(b, halfedges[ar]);\n\n        this._link(ar, bl);\n\n        const br = b0 + (b + 1) % 3; // don't worry about hitting the cap: it can only happen on extremely degenerate input\n\n        if (i < EDGE_STACK.length) {\n          EDGE_STACK[i++] = br;\n        }\n      } else {\n        if (i === 0) break;\n        a = EDGE_STACK[--i];\n      }\n    }\n\n    return ar;\n  }\n\n  _link(a, b) {\n    this._halfedges[a] = b;\n    if (b !== -1) this._halfedges[b] = a;\n  } // add a new triangle given vertex indices and adjacent half-edge ids\n\n\n  _addTriangle(i0, i1, i2, a, b, c) {\n    const t = this.trianglesLen;\n    this._triangles[t] = i0;\n    this._triangles[t + 1] = i1;\n    this._triangles[t + 2] = i2;\n\n    this._link(t, a);\n\n    this._link(t + 1, b);\n\n    this._link(t + 2, c);\n\n    this.trianglesLen += 3;\n    return t;\n  }\n\n} // monotonically increases with real angle, but doesn't need expensive trigonometry\n\nfunction pseudoAngle(dx, dy) {\n  const p = dx / (Math.abs(dx) + Math.abs(dy));\n  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n  const dx = ax - bx;\n  const dy = ay - by;\n  return dx * dx + dy * dy;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  const dx = ax - px;\n  const dy = ay - py;\n  const ex = bx - px;\n  const ey = by - py;\n  const fx = cx - px;\n  const fy = cy - py;\n  const ap = dx * dx + dy * dy;\n  const bp = ex * ex + ey * ey;\n  const cp = fx * fx + fy * fy;\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n  const dx = bx - ax;\n  const dy = by - ay;\n  const ex = cx - ax;\n  const ey = cy - ay;\n  const bl = dx * dx + dy * dy;\n  const cl = ex * ex + ey * ey;\n  const d = 0.5 / (dx * ey - dy * ex);\n  const x = (ey * bl - dy * cl) * d;\n  const y = (dx * cl - ex * bl) * d;\n  return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n  const dx = bx - ax;\n  const dy = by - ay;\n  const ex = cx - ax;\n  const ey = cy - ay;\n  const bl = dx * dx + dy * dy;\n  const cl = ex * ex + ey * ey;\n  const d = 0.5 / (dx * ey - dy * ex);\n  const x = ax + (ey * bl - dy * cl) * d;\n  const y = ay + (dx * cl - ex * bl) * d;\n  return {\n    x,\n    y\n  };\n}\n\nfunction quicksort(ids, dists, left, right) {\n  if (right - left <= 20) {\n    for (let i = left + 1; i <= right; i++) {\n      const temp = ids[i];\n      const tempDist = dists[temp];\n      let j = i - 1;\n\n      while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n\n      ids[j + 1] = temp;\n    }\n  } else {\n    const median = left + right >> 1;\n    let i = left + 1;\n    let j = right;\n    swap(ids, median, i);\n    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n    if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n    if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n    const temp = ids[i];\n    const tempDist = dists[temp];\n\n    while (true) {\n      do i++; while (dists[ids[i]] < tempDist);\n\n      do j--; while (dists[ids[j]] > tempDist);\n\n      if (j < i) break;\n      swap(ids, i, j);\n    }\n\n    ids[left + 1] = ids[j];\n    ids[j] = temp;\n\n    if (right - i + 1 >= j - left) {\n      quicksort(ids, dists, i, right);\n      quicksort(ids, dists, left, j - 1);\n    } else {\n      quicksort(ids, dists, left, j - 1);\n      quicksort(ids, dists, i, right);\n    }\n  }\n}\n\nfunction swap(arr, i, j) {\n  const tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n  return p[0];\n}\n\nfunction defaultGetY(p) {\n  return p[1];\n}","map":null,"metadata":{},"sourceType":"module"}