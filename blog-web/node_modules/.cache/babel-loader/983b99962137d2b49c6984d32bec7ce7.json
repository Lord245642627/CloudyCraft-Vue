{"ast":null,"code":"import { isString } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { useSizeProp } from '../../../hooks/use-common-props/index.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nconst inputProps = buildProps({\n  id: {\n    type: String,\n    default: void 0\n  },\n  size: useSizeProp,\n  disabled: Boolean,\n  modelValue: {\n    type: definePropType([String, Number, Object]),\n    default: \"\"\n  },\n  type: {\n    type: String,\n    default: \"text\"\n  },\n  resize: {\n    type: String,\n    values: [\"none\", \"both\", \"horizontal\", \"vertical\"]\n  },\n  autosize: {\n    type: definePropType([Boolean, Object]),\n    default: false\n  },\n  autocomplete: {\n    type: String,\n    default: \"off\"\n  },\n  formatter: {\n    type: Function\n  },\n  parser: {\n    type: Function\n  },\n  placeholder: {\n    type: String\n  },\n  form: {\n    type: String,\n    default: \"\"\n  },\n  readonly: {\n    type: Boolean,\n    default: false\n  },\n  clearable: {\n    type: Boolean,\n    default: false\n  },\n  showPassword: {\n    type: Boolean,\n    default: false\n  },\n  showWordLimit: {\n    type: Boolean,\n    default: false\n  },\n  suffixIcon: {\n    type: iconPropType,\n    default: \"\"\n  },\n  prefixIcon: {\n    type: iconPropType,\n    default: \"\"\n  },\n  containerRole: {\n    type: String,\n    default: void 0\n  },\n  label: {\n    type: String,\n    default: void 0\n  },\n  tabindex: {\n    type: [String, Number],\n    default: 0\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  },\n  inputStyle: {\n    type: definePropType([Object, Array, String]),\n    default: () => mutable({})\n  }\n});\nconst inputEmits = {\n  [UPDATE_MODEL_EVENT]: value => isString(value),\n  input: value => isString(value),\n  change: value => isString(value),\n  focus: evt => evt instanceof FocusEvent,\n  blur: evt => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: evt => evt instanceof MouseEvent,\n  mouseenter: evt => evt instanceof MouseEvent,\n  keydown: evt => evt instanceof Event,\n  compositionstart: evt => evt instanceof CompositionEvent,\n  compositionupdate: evt => evt instanceof CompositionEvent,\n  compositionend: evt => evt instanceof CompositionEvent\n};\nexport { inputEmits, inputProps };","map":null,"metadata":{},"sourceType":"module"}