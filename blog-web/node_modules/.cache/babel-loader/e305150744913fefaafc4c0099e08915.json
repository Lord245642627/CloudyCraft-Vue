{"ast":null,"code":"import { defineComponent, inject, ref, reactive, computed, watch, nextTick, onMounted, provide, resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementBlock, createElementVNode, normalizeClass, createVNode, createCommentVNode, withKeys, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Close, ArrowDown } from '@element-plus/icons-vue';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport Color from './color.mjs';\nimport { OPTIONS_KEY } from './useOption.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { useFormItemInputId } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElColorPicker\",\n  components: {\n    ElButton,\n    ElTooltip,\n    ElInput,\n    ElIcon,\n    Close,\n    ArrowDown,\n    SvPanel,\n    HueSlider,\n    AlphaSlider,\n    Predefine\n  },\n  directives: {\n    ClickOutside\n  },\n  props: {\n    modelValue: String,\n    id: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    popperClass: String,\n    label: {\n      type: String,\n      default: void 0\n    },\n    tabindex: {\n      type: [String, Number],\n      default: 0\n    },\n    predefine: Array,\n    validateEvent: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: [\"change\", \"active-change\", UPDATE_MODEL_EVENT],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"color\");\n    const elForm = inject(formContextKey, {});\n    const elFormItem = inject(formItemContextKey, {});\n    const {\n      inputId: buttonId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: elFormItem\n    });\n    const hue = ref();\n    const svPanel = ref();\n    const alpha = ref();\n    const popper = ref(null);\n    let shouldActiveChange = true;\n    const color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || \"\",\n      value: props.modelValue\n    }));\n    const showPicker = ref(false);\n    const showPanelColor = ref(false);\n    const customInput = ref(\"\");\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n\n      return displayedRgb(color, props.showAlpha);\n    });\n    const colorSize = useSize();\n    const colorDisabled = computed(() => {\n      return !!(props.disabled || elForm.disabled);\n    });\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    const buttonAriaLabel = computed(() => {\n      return !isLabeledByFormItem.value ? props.label || t(\"el.colorpicker.defaultLabel\") : void 0;\n    });\n    const buttonAriaLabelledby = computed(() => {\n      return isLabeledByFormItem.value ? elFormItem.labelId : void 0;\n    });\n    watch(() => props.modelValue, newVal => {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        shouldActiveChange = false;\n        color.fromString(newVal);\n      }\n    });\n    watch(() => currentColor.value, val => {\n      customInput.value = val;\n      shouldActiveChange && emit(\"active-change\", val);\n      shouldActiveChange = true;\n    });\n    watch(() => color.value, () => {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw new TypeError(\"color should be instance of _color Class\");\n      }\n\n      const {\n        r,\n        g,\n        b\n      } = color2.toRgb();\n      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get(\"alpha\") / 100})` : `rgb(${r}, ${g}, ${b})`;\n    }\n\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n\n    const debounceSetShowPicker = debounce(setShowPicker, 100);\n\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          color.value = \"\";\n          nextTick(() => {\n            showPanelColor.value = false;\n          });\n        }\n      });\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n\n    function confirmValue() {\n      var _a;\n\n      const value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n\n      if (props.validateEvent) {\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n      }\n\n      debounceSetShowPicker(false);\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || \"\",\n          value: props.modelValue\n        });\n\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n\n    function clear() {\n      var _a;\n\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n\n      if (props.modelValue !== null && props.validateEvent) {\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n      }\n\n      resetColor();\n    }\n\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(() => showPicker.value, () => {\n      nextTick(() => {\n        var _a, _b, _c;\n\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = svPanel.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(OPTIONS_KEY, {\n      currentColor\n    });\n    return {\n      color,\n      colorDisabled,\n      colorSize,\n      displayedColor,\n      showPanelColor,\n      showPicker,\n      customInput,\n      buttonId,\n      buttonAriaLabel,\n      buttonAriaLabelledby,\n      handleConfirm,\n      hide,\n      handleTrigger,\n      clear,\n      confirmValue,\n      t,\n      ns,\n      hue,\n      svPanel,\n      alpha,\n      popper\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-description\", \"tabindex\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_hue_slider = resolveComponent(\"hue-slider\");\n\n  const _component_sv_panel = resolveComponent(\"sv-panel\");\n\n  const _component_alpha_slider = resolveComponent(\"alpha-slider\");\n\n  const _component_predefine = resolveComponent(\"predefine\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_close = resolveComponent(\"close\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  const _directive_click_outside = resolveDirective(\"click-outside\");\n\n  return openBlock(), createBlock(_component_el_tooltip, {\n    ref: \"popper\",\n    visible: _ctx.showPicker,\n    \"onUpdate:visible\": _cache[3] || (_cache[3] = $event => _ctx.showPicker = $event),\n    \"show-arrow\": false,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    offset: 0,\n    \"gpu-acceleration\": false,\n    \"popper-class\": [_ctx.ns.be(\"picker\", \"panel\"), _ctx.ns.b(\"dropdown\"), _ctx.popperClass],\n    \"stop-popper-mouse-event\": false,\n    effect: \"light\",\n    trigger: \"click\",\n    transition: \"el-zoom-in-top\",\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", null, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"main-wrapper\"))\n    }, [createVNode(_component_hue_slider, {\n      ref: \"hue\",\n      class: \"hue-slider\",\n      color: _ctx.color,\n      vertical: \"\"\n    }, null, 8, [\"color\"]), createVNode(_component_sv_panel, {\n      ref: \"svPanel\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (openBlock(), createBlock(_component_alpha_slider, {\n      key: 0,\n      ref: \"alpha\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(_component_predefine, {\n      key: 1,\n      ref: \"predefine\",\n      color: _ctx.color,\n      colors: _ctx.predefine\n    }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btns\"))\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"value\"))\n    }, [createVNode(_component_el_input, {\n      modelValue: _ctx.customInput,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.customInput = $event),\n      \"validate-event\": false,\n      size: \"small\",\n      onKeyup: withKeys(_ctx.handleConfirm, [\"enter\"]),\n      onBlur: _ctx.handleConfirm\n    }, null, 8, [\"modelValue\", \"onKeyup\", \"onBlur\"])], 2), createVNode(_component_el_button, {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"link-btn\")),\n      text: \"\",\n      size: \"small\",\n      onClick: _ctx.clear\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.clear\")), 1)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"]), createVNode(_component_el_button, {\n      plain: \"\",\n      size: \"small\",\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btn\")),\n      onClick: _ctx.confirmValue\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.confirm\")), 1)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])], 2)])), [[_directive_click_outside, _ctx.hide]])]),\n    default: withCtx(() => [createElementVNode(\"div\", {\n      id: _ctx.buttonId,\n      class: normalizeClass([_ctx.ns.b(\"picker\"), _ctx.ns.is(\"disabled\", _ctx.colorDisabled), _ctx.ns.bm(\"picker\", _ctx.colorSize)]),\n      role: \"button\",\n      \"aria-label\": _ctx.buttonAriaLabel,\n      \"aria-labelledby\": _ctx.buttonAriaLabelledby,\n      \"aria-description\": _ctx.t(\"el.colorpicker.description\", {\n        color: _ctx.modelValue || \"\"\n      }),\n      tabindex: _ctx.tabindex,\n      onKeydown: _cache[2] || (_cache[2] = withKeys((...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args), [\"enter\"]))\n    }, [_ctx.colorDisabled ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"mask\"))\n    }, null, 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"trigger\")),\n      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args))\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"color\"), _ctx.ns.is(\"alpha\", _ctx.showAlpha)])\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"color-inner\")),\n      style: normalizeStyle({\n        backgroundColor: _ctx.displayedColor\n      })\n    }, [withDirectives(createVNode(_component_el_icon, {\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"icon\"), _ctx.ns.is(\"icon-arrow-down\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_down)]),\n      _: 1\n    }, 8, [\"class\"]), [[vShow, _ctx.modelValue || _ctx.showPanelColor]]), !_ctx.modelValue && !_ctx.showPanelColor ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"empty\"), _ctx.ns.is(\"icon-close\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 6)], 2)], 2)], 42, _hoisted_1)]),\n    _: 1\n  }, 8, [\"visible\", \"popper-class\"]);\n}\n\nvar ColorPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/index.vue\"]]);\n\nexport { ColorPicker as default };","map":null,"metadata":{},"sourceType":"module"}