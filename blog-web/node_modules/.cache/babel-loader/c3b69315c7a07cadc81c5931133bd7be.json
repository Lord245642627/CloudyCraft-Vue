{"ast":null,"code":"import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\n\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx); // Expand multi-edges\n\n  return _.flatten(_.map(results, function (e) {\n    return g.outEdges(e.v, e.w);\n  }));\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n  var entry;\n\n  while (g.nodeCount()) {\n    while (entry = sinks.dequeue()) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n\n    while (entry = sources.dequeue()) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({\n        v: edge.v,\n        w: edge.w\n      });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, {\n      v: v,\n      in: 0,\n      out: 0\n    });\n  }); // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n\n\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n    maxIn = Math.max(maxIn, fasGraph.node(e.w)['in'] += weight);\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return {\n    graph: fasGraph,\n    buckets: buckets,\n    zeroIdx: zeroIdx\n  };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}","map":{"version":3,"names":["_","Graph","List","greedyFAS","DEFAULT_WEIGHT_FN","constant","g","weightFn","nodeCount","state","buildState","results","doGreedyFAS","graph","buckets","zeroIdx","flatten","map","e","outEdges","v","w","sources","length","sinks","entry","dequeue","removeNode","i","concat","collectPredecessors","undefined","forEach","inEdges","edge","weight","uEntry","node","push","out","assignBucket","wEntry","fasGraph","maxIn","maxOut","nodes","setNode","in","edges","prevWeight","edgeWeight","setEdge","Math","max","range","enqueue"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-web/node_modules/dagre-d3-es/src/dagre/greedy-fas.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}