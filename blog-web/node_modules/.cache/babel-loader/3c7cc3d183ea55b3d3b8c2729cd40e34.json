{"ast":null,"code":"import { inject, ref, h } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../utils/index.mjs';\nimport { getCell, getColumnByCell, createTablePopper } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport { hasClass, getStyle } from '../../../../utils/dom/style.mjs';\n\nfunction useEvents(props) {\n  const parent = inject(TABLE_INJECTION_KEY);\n  const tooltipContent = ref(\"\");\n  const tooltipTrigger = ref(h(\"div\"));\n\n  const handleEvent = (event, row, name) => {\n    var _a;\n\n    const table = parent;\n    const cell = getCell(event);\n    let column;\n    const namespace = (_a = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a.dataset.prefix;\n\n    if (cell) {\n      column = getColumnByCell({\n        columns: props.store.states.columns.value\n      }, cell, namespace);\n\n      if (column) {\n        table == null ? void 0 : table.emit(`cell-${name}`, row, column, cell, event);\n      }\n    }\n\n    table == null ? void 0 : table.emit(`row-${name}`, row, column, event);\n  };\n\n  const handleDoubleClick = (event, row) => {\n    handleEvent(event, row, \"dblclick\");\n  };\n\n  const handleClick = (event, row) => {\n    props.store.commit(\"setCurrentRow\", row);\n    handleEvent(event, row, \"click\");\n  };\n\n  const handleContextMenu = (event, row) => {\n    handleEvent(event, row, \"contextmenu\");\n  };\n\n  const handleMouseEnter = debounce(index => {\n    props.store.commit(\"setHoverRow\", index);\n  }, 30);\n  const handleMouseLeave = debounce(() => {\n    props.store.commit(\"setHoverRow\", null);\n  }, 30);\n\n  const handleCellMouseEnter = (event, row) => {\n    var _a;\n\n    const table = parent;\n    const cell = getCell(event);\n    const namespace = (_a = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a.dataset.prefix;\n\n    if (cell) {\n      const column = getColumnByCell({\n        columns: props.store.states.columns.value\n      }, cell, namespace);\n      const hoverState = table.hoverState = {\n        cell,\n        column,\n        row\n      };\n      table == null ? void 0 : table.emit(\"cell-mouse-enter\", hoverState.row, hoverState.column, hoverState.cell, event);\n    }\n\n    const cellChild = event.target.querySelector(\".cell\");\n\n    if (!(hasClass(cellChild, `${namespace}-tooltip`) && cellChild.childNodes.length)) {\n      return;\n    }\n\n    const range = document.createRange();\n    range.setStart(cellChild, 0);\n    range.setEnd(cellChild, cellChild.childNodes.length);\n    const rangeWidth = range.getBoundingClientRect().width;\n    const padding = (Number.parseInt(getStyle(cellChild, \"paddingLeft\"), 10) || 0) + (Number.parseInt(getStyle(cellChild, \"paddingRight\"), 10) || 0);\n\n    if (rangeWidth + padding > cellChild.offsetWidth || cellChild.scrollWidth > cellChild.offsetWidth) {\n      createTablePopper(parent == null ? void 0 : parent.refs.tableWrapper, cell, cell.innerText || cell.textContent, {\n        placement: \"top\",\n        strategy: \"fixed\"\n      }, row.tooltipEffect);\n    }\n  };\n\n  const handleCellMouseLeave = event => {\n    const cell = getCell(event);\n    if (!cell) return;\n    const oldHoverState = parent == null ? void 0 : parent.hoverState;\n    parent == null ? void 0 : parent.emit(\"cell-mouse-leave\", oldHoverState == null ? void 0 : oldHoverState.row, oldHoverState == null ? void 0 : oldHoverState.column, oldHoverState == null ? void 0 : oldHoverState.cell, event);\n  };\n\n  return {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger\n  };\n}\n\nexport { useEvents as default };","map":null,"metadata":{},"sourceType":"module"}