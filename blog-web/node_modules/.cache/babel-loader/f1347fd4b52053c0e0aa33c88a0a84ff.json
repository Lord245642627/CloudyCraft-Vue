{"ast":null,"code":"/* IMPORT */\nimport _ from '../utils/index.js';\nimport Hex from './hex.js';\nimport HSL from './hsl.js';\nimport Keyword from './keyword.js';\nimport RGB from './rgb.js';\nimport { TYPE } from '../constants.js';\n/* MAIN */\n\nconst Color = {\n  /* VARIABLES */\n  format: {\n    keyword: Keyword,\n    hex: Hex,\n    rgb: RGB,\n    rgba: RGB,\n    hsl: HSL,\n    hsla: HSL\n  },\n\n  /* API */\n  parse: color => {\n    if (typeof color !== 'string') return color;\n    const channels = Hex.parse(color) || RGB.parse(color) || HSL.parse(color) || Keyword.parse(color); // Color providers ordered with performance in mind\n\n    if (channels) return channels;\n    throw new Error(`Unsupported color format: \"${color}\"`);\n  },\n  stringify: channels => {\n    // SASS returns a keyword if possible, but we avoid doing that as it's slower and doesn't really add any value\n    if (!channels.changed && channels.color) return channels.color;\n\n    if (channels.type.is(TYPE.HSL) || channels.data.r === undefined) {\n      return HSL.stringify(channels);\n    } else if (channels.a < 1 || !Number.isInteger(channels.r) || !Number.isInteger(channels.g) || !Number.isInteger(channels.b)) {\n      return RGB.stringify(channels);\n    } else {\n      return Hex.stringify(channels);\n    }\n  }\n};\n/* EXPORT */\n\nexport default Color;","map":{"version":3,"names":["_","Hex","HSL","Keyword","RGB","TYPE","Color","format","keyword","hex","rgb","rgba","hsl","hsla","parse","color","channels","Error","stringify","changed","type","is","data","r","undefined","a","Number","isInteger","g","b"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-web/node_modules/khroma/dist/color/index.js"],"sourcesContent":["/* IMPORT */\nimport _ from '../utils/index.js';\nimport Hex from './hex.js';\nimport HSL from './hsl.js';\nimport Keyword from './keyword.js';\nimport RGB from './rgb.js';\nimport { TYPE } from '../constants.js';\n/* MAIN */\nconst Color = {\n    /* VARIABLES */\n    format: {\n        keyword: Keyword,\n        hex: Hex,\n        rgb: RGB,\n        rgba: RGB,\n        hsl: HSL,\n        hsla: HSL\n    },\n    /* API */\n    parse: (color) => {\n        if (typeof color !== 'string')\n            return color;\n        const channels = Hex.parse(color) || RGB.parse(color) || HSL.parse(color) || Keyword.parse(color); // Color providers ordered with performance in mind\n        if (channels)\n            return channels;\n        throw new Error(`Unsupported color format: \"${color}\"`);\n    },\n    stringify: (channels) => {\n        // SASS returns a keyword if possible, but we avoid doing that as it's slower and doesn't really add any value\n        if (!channels.changed && channels.color)\n            return channels.color;\n        if (channels.type.is(TYPE.HSL) || channels.data.r === undefined) {\n            return HSL.stringify(channels);\n        }\n        else if (channels.a < 1 || !Number.isInteger(channels.r) || !Number.isInteger(channels.g) || !Number.isInteger(channels.b)) {\n            return RGB.stringify(channels);\n        }\n        else {\n            return Hex.stringify(channels);\n        }\n    }\n};\n/* EXPORT */\nexport default Color;\n"],"mappings":"AAAA;AACA,OAAOA,CAAP,MAAc,mBAAd;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA;;AACA,MAAMC,KAAK,GAAG;EACV;EACAC,MAAM,EAAE;IACJC,OAAO,EAAEL,OADL;IAEJM,GAAG,EAAER,GAFD;IAGJS,GAAG,EAAEN,GAHD;IAIJO,IAAI,EAAEP,GAJF;IAKJQ,GAAG,EAAEV,GALD;IAMJW,IAAI,EAAEX;EANF,CAFE;;EAUV;EACAY,KAAK,EAAGC,KAAD,IAAW;IACd,IAAI,OAAOA,KAAP,KAAiB,QAArB,EACI,OAAOA,KAAP;IACJ,MAAMC,QAAQ,GAAGf,GAAG,CAACa,KAAJ,CAAUC,KAAV,KAAoBX,GAAG,CAACU,KAAJ,CAAUC,KAAV,CAApB,IAAwCb,GAAG,CAACY,KAAJ,CAAUC,KAAV,CAAxC,IAA4DZ,OAAO,CAACW,KAAR,CAAcC,KAAd,CAA7E,CAHc,CAGqF;;IACnG,IAAIC,QAAJ,EACI,OAAOA,QAAP;IACJ,MAAM,IAAIC,KAAJ,CAAW,8BAA6BF,KAAM,GAA9C,CAAN;EACH,CAlBS;EAmBVG,SAAS,EAAGF,QAAD,IAAc;IACrB;IACA,IAAI,CAACA,QAAQ,CAACG,OAAV,IAAqBH,QAAQ,CAACD,KAAlC,EACI,OAAOC,QAAQ,CAACD,KAAhB;;IACJ,IAAIC,QAAQ,CAACI,IAAT,CAAcC,EAAd,CAAiBhB,IAAI,CAACH,GAAtB,KAA8Bc,QAAQ,CAACM,IAAT,CAAcC,CAAd,KAAoBC,SAAtD,EAAiE;MAC7D,OAAOtB,GAAG,CAACgB,SAAJ,CAAcF,QAAd,CAAP;IACH,CAFD,MAGK,IAAIA,QAAQ,CAACS,CAAT,GAAa,CAAb,IAAkB,CAACC,MAAM,CAACC,SAAP,CAAiBX,QAAQ,CAACO,CAA1B,CAAnB,IAAmD,CAACG,MAAM,CAACC,SAAP,CAAiBX,QAAQ,CAACY,CAA1B,CAApD,IAAoF,CAACF,MAAM,CAACC,SAAP,CAAiBX,QAAQ,CAACa,CAA1B,CAAzF,EAAuH;MACxH,OAAOzB,GAAG,CAACc,SAAJ,CAAcF,QAAd,CAAP;IACH,CAFI,MAGA;MACD,OAAOf,GAAG,CAACiB,SAAJ,CAAcF,QAAd,CAAP;IACH;EACJ;AAhCS,CAAd;AAkCA;;AACA,eAAeV,KAAf"},"metadata":{},"sourceType":"module"}