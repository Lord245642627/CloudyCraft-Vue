{"ast":null,"code":"const on = (element, event, handler, useCapture = false) => {\n  if (element && event && handler) {\n    element == null ? void 0 : element.addEventListener(event, handler, useCapture);\n  }\n};\n\nconst off = (element, event, handler, useCapture = false) => {\n  if (element && event && handler) {\n    element == null ? void 0 : element.removeEventListener(event, handler, useCapture);\n  }\n};\n\nconst once = (el, event, fn) => {\n  const listener = function (...args) {\n    if (fn) {\n      fn.apply(this, args);\n    }\n\n    off(el, event, listener);\n  };\n\n  on(el, event, listener);\n};\n\nconst composeEventHandlers = (theirsHandler, oursHandler, {\n  checkForDefaultPrevented = true\n} = {}) => {\n  const handleEvent = event => {\n    const shouldPrevent = theirsHandler == null ? void 0 : theirsHandler(event);\n\n    if (checkForDefaultPrevented === false || !shouldPrevent) {\n      return oursHandler == null ? void 0 : oursHandler(event);\n    }\n  };\n\n  return handleEvent;\n};\n\nconst whenMouse = handler => {\n  return e => e.pointerType === \"mouse\" ? handler(e) : void 0;\n};\n\nexport { composeEventHandlers, off, on, once, whenMouse };","map":null,"metadata":{},"sourceType":"module"}