{"ast":null,"code":"import { toRefs, computed, nextTick } from 'vue';\nimport { pick } from 'lodash-unified';\nimport { ElSelect } from '../../select/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst useSelect = (props, {\n  attrs\n}, {\n  tree,\n  key\n}) => {\n  const ns = useNamespace(\"tree-select\");\n  const result = { ...pick(toRefs(props), Object.keys(ElSelect.props)),\n    ...attrs,\n    valueKey: key,\n    popperClass: computed(() => {\n      const classes = [ns.e(\"popper\")];\n      if (props.popperClass) classes.push(props.popperClass);\n      return classes.join(\" \");\n    }),\n    filterMethod: (keyword = \"\") => {\n      if (props.filterMethod) props.filterMethod(keyword);\n      nextTick(() => {\n        var _a;\n\n        (_a = tree.value) == null ? void 0 : _a.filter(keyword);\n      });\n    },\n    onVisibleChange: visible => {\n      var _a;\n\n      (_a = attrs.onVisibleChange) == null ? void 0 : _a.call(attrs, visible);\n\n      if (props.filterable && visible) {\n        result.filterMethod();\n      }\n    }\n  };\n  return result;\n};\n\nexport { useSelect };","map":null,"metadata":{},"sourceType":"module"}