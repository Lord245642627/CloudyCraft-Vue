{"ast":null,"code":"import { defineComponent, inject, ref, computed, watch, openBlock, createElementBlock, unref, normalizeClass, normalizeStyle, Fragment, renderList, createVNode, withCtx, createBlock, resolveDynamicComponent, createCommentVNode, toDisplayString } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { rateProps, rateEmits } from './rate.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isObject, isArray } from '@vue/shared';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItemInputId } from '../../../hooks/use-form-item/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { hasClass } from '../../../utils/dom/style.mjs';\nconst _hoisted_1 = [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-valuenow\", \"aria-valuetext\", \"aria-valuemax\"];\nconst _hoisted_2 = [\"onMousemove\", \"onClick\"];\nconst __default__ = {\n  name: \"ElRate\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: rateProps,\n  emits: rateEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n\n    function getValueFromMap(value, map) {\n      const isExcludedObject = val => isObject(val);\n\n      const matchedKeys = Object.keys(map).map(key => +key).filter(key => {\n        const val = map[key];\n        const excluded = isExcludedObject(val) ? val.excluded : false;\n        return excluded ? value < key : value <= key;\n      }).sort((a, b) => a - b);\n      const matchedValue = map[matchedKeys[0]];\n      return isExcludedObject(matchedValue) && matchedValue.value || matchedValue;\n    }\n\n    const formContext = inject(formContextKey, void 0);\n    const formItemContext = inject(formItemContextKey, void 0);\n    const rateSize = useSize();\n    const ns = useNamespace(\"rate\");\n    const {\n      inputId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext\n    });\n    const currentValue = ref(props.modelValue);\n    const hoverIndex = ref(-1);\n    const pointerAtLeftHalf = ref(true);\n    const rateClasses = computed(() => [ns.b(), ns.m(rateSize.value)]);\n    const rateDisabled = computed(() => props.disabled || (formContext == null ? void 0 : formContext.disabled));\n    const rateStyles = computed(() => {\n      return ns.cssVarBlock({\n        \"void-color\": props.voidColor,\n        \"disabled-void-color\": props.disabledVoidColor,\n        \"fill-color\": activeColor.value\n      });\n    });\n    const text = computed(() => {\n      let result = \"\";\n\n      if (props.showScore) {\n        result = props.scoreTemplate.replace(/\\{\\s*value\\s*\\}/, rateDisabled.value ? `${props.modelValue}` : `${currentValue.value}`);\n      } else if (props.showText) {\n        result = props.texts[Math.ceil(currentValue.value) - 1];\n      }\n\n      return result;\n    });\n    const valueDecimal = computed(() => props.modelValue * 100 - Math.floor(props.modelValue) * 100);\n    const colorMap = computed(() => isArray(props.colors) ? {\n      [props.lowThreshold]: props.colors[0],\n      [props.highThreshold]: {\n        value: props.colors[1],\n        excluded: true\n      },\n      [props.max]: props.colors[2]\n    } : props.colors);\n    const activeColor = computed(() => {\n      const color = getValueFromMap(currentValue.value, colorMap.value);\n      return isObject(color) ? \"\" : color;\n    });\n    const decimalStyle = computed(() => {\n      let width = \"\";\n\n      if (rateDisabled.value) {\n        width = `${valueDecimal.value}%`;\n      } else if (props.allowHalf) {\n        width = \"50%\";\n      }\n\n      return {\n        color: activeColor.value,\n        width\n      };\n    });\n    const componentMap = computed(() => isArray(props.icons) ? {\n      [props.lowThreshold]: props.icons[0],\n      [props.highThreshold]: {\n        value: props.icons[1],\n        excluded: true\n      },\n      [props.max]: props.icons[2]\n    } : props.icons);\n    const decimalIconComponent = computed(() => getValueFromMap(props.modelValue, componentMap.value));\n    const voidComponent = computed(() => rateDisabled.value ? props.disabledVoidIcon : props.voidIcon);\n    const activeComponent = computed(() => getValueFromMap(currentValue.value, componentMap.value));\n    const iconComponents = computed(() => {\n      const result = Array.from({\n        length: props.max\n      });\n      const threshold = currentValue.value;\n      result.fill(activeComponent.value, 0, threshold);\n      result.fill(voidComponent.value, threshold, props.max);\n      return result;\n    });\n\n    function showDecimalIcon(item) {\n      const showWhenDisabled = rateDisabled.value && valueDecimal.value > 0 && item - 1 < props.modelValue && item > props.modelValue;\n      const showWhenAllowHalf = props.allowHalf && pointerAtLeftHalf.value && item - 0.5 <= currentValue.value && item > currentValue.value;\n      return showWhenDisabled || showWhenAllowHalf;\n    }\n\n    function selectValue(value) {\n      if (rateDisabled.value) {\n        return;\n      }\n\n      if (props.allowHalf && pointerAtLeftHalf.value) {\n        emit(UPDATE_MODEL_EVENT, currentValue.value);\n\n        if (props.modelValue !== currentValue.value) {\n          emit(\"change\", currentValue.value);\n        }\n      } else {\n        emit(UPDATE_MODEL_EVENT, value);\n\n        if (props.modelValue !== value) {\n          emit(\"change\", value);\n        }\n      }\n    }\n\n    function handleKey(e) {\n      if (rateDisabled.value) {\n        return;\n      }\n\n      let _currentValue = currentValue.value;\n      const code = e.code;\n\n      if (code === EVENT_CODE.up || code === EVENT_CODE.right) {\n        if (props.allowHalf) {\n          _currentValue += 0.5;\n        } else {\n          _currentValue += 1;\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n      } else if (code === EVENT_CODE.left || code === EVENT_CODE.down) {\n        if (props.allowHalf) {\n          _currentValue -= 0.5;\n        } else {\n          _currentValue -= 1;\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      _currentValue = _currentValue < 0 ? 0 : _currentValue;\n      _currentValue = _currentValue > props.max ? props.max : _currentValue;\n      emit(UPDATE_MODEL_EVENT, _currentValue);\n      emit(\"change\", _currentValue);\n      return _currentValue;\n    }\n\n    function setCurrentValue(value, event) {\n      if (rateDisabled.value) {\n        return;\n      }\n\n      if (props.allowHalf) {\n        let target = event.target;\n\n        if (hasClass(target, ns.e(\"item\"))) {\n          target = target.querySelector(`.${ns.e(\"icon\")}`);\n        }\n\n        if (target.clientWidth === 0 || hasClass(target, ns.e(\"decimal\"))) {\n          target = target.parentNode;\n        }\n\n        pointerAtLeftHalf.value = event.offsetX * 2 <= target.clientWidth;\n        currentValue.value = pointerAtLeftHalf.value ? value - 0.5 : value;\n      } else {\n        currentValue.value = value;\n      }\n\n      hoverIndex.value = value;\n    }\n\n    function resetCurrentValue() {\n      if (rateDisabled.value) {\n        return;\n      }\n\n      if (props.allowHalf) {\n        pointerAtLeftHalf.value = props.modelValue !== Math.floor(props.modelValue);\n      }\n\n      currentValue.value = props.modelValue;\n      hoverIndex.value = -1;\n    }\n\n    watch(() => props.modelValue, val => {\n      currentValue.value = val;\n      pointerAtLeftHalf.value = props.modelValue !== Math.floor(props.modelValue);\n    });\n\n    if (!props.modelValue) {\n      emit(UPDATE_MODEL_EVENT, 0);\n    }\n\n    expose({\n      setCurrentValue,\n      resetCurrentValue\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        id: unref(inputId),\n        class: normalizeClass([unref(rateClasses), unref(ns).is(\"disabled\", unref(rateDisabled))]),\n        role: \"slider\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.label || \"rating\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? unref(formItemContext).labelId : void 0,\n        \"aria-valuenow\": currentValue.value,\n        \"aria-valuetext\": unref(text) || void 0,\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": _ctx.max,\n        tabindex: \"0\",\n        style: normalizeStyle(unref(rateStyles)),\n        onKeydown: handleKey\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.max, (item, key) => {\n        return openBlock(), createElementBlock(\"span\", {\n          key,\n          class: normalizeClass(unref(ns).e(\"item\")),\n          onMousemove: $event => setCurrentValue(item, $event),\n          onMouseleave: resetCurrentValue,\n          onClick: $event => selectValue(item)\n        }, [createVNode(unref(ElIcon), {\n          class: normalizeClass([unref(ns).e(\"icon\"), {\n            hover: hoverIndex.value === item\n          }, unref(ns).is(\"active\", item <= currentValue.value)])\n        }, {\n          default: withCtx(() => [!showDecimalIcon(item) ? (openBlock(), createBlock(resolveDynamicComponent(unref(iconComponents)[item - 1]), {\n            key: 0\n          })) : createCommentVNode(\"v-if\", true), showDecimalIcon(item) ? (openBlock(), createBlock(unref(ElIcon), {\n            key: 1,\n            style: normalizeStyle(unref(decimalStyle)),\n            class: normalizeClass([unref(ns).e(\"icon\"), unref(ns).e(\"decimal\")])\n          }, {\n            default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(decimalIconComponent))))]),\n            _: 1\n          }, 8, [\"style\", \"class\"])) : createCommentVNode(\"v-if\", true)]),\n          _: 2\n        }, 1032, [\"class\"])], 42, _hoisted_2);\n      }), 128)), _ctx.showText || _ctx.showScore ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"text\"))\n      }, toDisplayString(unref(text)), 3)) : createCommentVNode(\"v-if\", true)], 46, _hoisted_1);\n    };\n  }\n\n});\n\nvar Rate = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/rate/src/rate.vue\"]]);\n\nexport { Rate as default };","map":null,"metadata":{},"sourceType":"module"}