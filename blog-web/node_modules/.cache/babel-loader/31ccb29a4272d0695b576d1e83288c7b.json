{"ast":null,"code":"import { defineComponent, reactive, toRefs, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createVNode, isRef, withCtx, createElementVNode, toDisplayString } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../../hooks/index.mjs';\nimport './composables/index.mjs';\nimport { sliderButtonProps, sliderButtonEmits } from './button.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useSliderButton } from './composables/use-slider-button.mjs';\nconst __default__ = {\n  name: \"ElSliderButton\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: sliderButtonProps,\n  emits: sliderButtonEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"slider\");\n    const initData = reactive({\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0,\n      oldValue: props.modelValue\n    });\n    const {\n      button,\n      tooltip,\n      showTooltip,\n      tooltipVisible,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onKeyDown,\n      setPosition\n    } = useSliderButton(props, initData, emit);\n    const {\n      hovering,\n      dragging\n    } = toRefs(initData);\n    expose({\n      onButtonDown,\n      onKeyDown,\n      setPosition,\n      hovering,\n      dragging\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"button\",\n        ref: button,\n        class: normalizeClass([unref(ns).e(\"button-wrapper\"), {\n          hover: unref(hovering),\n          dragging: unref(dragging)\n        }]),\n        style: normalizeStyle(unref(wrapperStyle)),\n        tabindex: \"0\",\n        onMouseenter: _cache[1] || (_cache[1] = (...args) => unref(handleMouseEnter) && unref(handleMouseEnter)(...args)),\n        onMouseleave: _cache[2] || (_cache[2] = (...args) => unref(handleMouseLeave) && unref(handleMouseLeave)(...args)),\n        onMousedown: _cache[3] || (_cache[3] = (...args) => unref(onButtonDown) && unref(onButtonDown)(...args)),\n        onTouchstart: _cache[4] || (_cache[4] = (...args) => unref(onButtonDown) && unref(onButtonDown)(...args)),\n        onFocus: _cache[5] || (_cache[5] = (...args) => unref(handleMouseEnter) && unref(handleMouseEnter)(...args)),\n        onBlur: _cache[6] || (_cache[6] = (...args) => unref(handleMouseLeave) && unref(handleMouseLeave)(...args)),\n        onKeydown: _cache[7] || (_cache[7] = (...args) => unref(onKeyDown) && unref(onKeyDown)(...args))\n      }, [createVNode(unref(ElTooltip), {\n        ref_key: \"tooltip\",\n        ref: tooltip,\n        visible: unref(tooltipVisible),\n        \"onUpdate:visible\": _cache[0] || (_cache[0] = $event => isRef(tooltipVisible) ? tooltipVisible.value = $event : null),\n        placement: _ctx.placement,\n        \"fallback-placements\": [\"top\", \"bottom\", \"right\", \"left\"],\n        \"stop-popper-mouse-event\": false,\n        \"popper-class\": _ctx.tooltipClass,\n        disabled: !unref(showTooltip),\n        persistent: \"\"\n      }, {\n        content: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(unref(formatValue)), 1)]),\n        default: withCtx(() => [createElementVNode(\"div\", {\n          class: normalizeClass([unref(ns).e(\"button\"), {\n            hover: unref(hovering),\n            dragging: unref(dragging)\n          }])\n        }, null, 2)]),\n        _: 1\n      }, 8, [\"visible\", \"placement\", \"popper-class\", \"disabled\"])], 38);\n    };\n  }\n\n});\n\nvar SliderButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/slider/src/button.vue\"]]);\n\nexport { SliderButton as default };","map":null,"metadata":{},"sourceType":"module"}