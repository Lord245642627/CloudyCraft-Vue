{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport { noop, isClient, isString, tryOnScopeDispose, tryOnMounted, promiseTimeout, tryOnBeforeMount, increaseWithUnit, clamp, useTimeoutFn, pausableWatch, createEventHook, isFunction, timestamp, pausableFilter, watchIgnorable, debounceFilter, createFilterWrapper, bypassFilter, createSingletonPromise, toRefs, containsProp, until, isDef, throttleFilter, useDebounceFn, useThrottleFn, isObject, isNumber, useIntervalFn, syncRef, objectPick, tryOnUnmounted, isIOS, watchWithFilter, identity } from '@vueuse/shared';\nexport * from '@vueuse/shared';\nimport { isRef, ref, watchEffect, computed, inject, unref, watch, getCurrentInstance, customRef, onUpdated, reactive, shallowRef, onMounted, markRaw, getCurrentScope, readonly, nextTick, isVue2, set, del, onBeforeUpdate } from 'vue-demi';\n\nfunction computedAsync(evaluationCallback, initialState, optionsOrRef) {\n  let options;\n\n  if (isRef(optionsOrRef)) {\n    options = {\n      evaluating: optionsOrRef\n    };\n  } else {\n    options = optionsOrRef || {};\n  }\n\n  const {\n    lazy = false,\n    evaluating = void 0,\n    onError = noop\n  } = options;\n  const started = ref(!lazy);\n  const current = ref(initialState);\n  let counter = 0;\n  watchEffect(async onInvalidate => {\n    if (!started.value) return;\n    counter++;\n    const counterAtBeginning = counter;\n    let hasFinished = false;\n\n    if (evaluating) {\n      Promise.resolve().then(() => {\n        evaluating.value = true;\n      });\n    }\n\n    try {\n      const result = await evaluationCallback(cancelCallback => {\n        onInvalidate(() => {\n          if (evaluating) evaluating.value = false;\n          if (!hasFinished) cancelCallback();\n        });\n      });\n      if (counterAtBeginning === counter) current.value = result;\n    } catch (e) {\n      onError(e);\n    } finally {\n      if (evaluating && counterAtBeginning === counter) evaluating.value = false;\n      hasFinished = true;\n    }\n  });\n\n  if (lazy) {\n    return computed(() => {\n      started.value = true;\n      return current.value;\n    });\n  } else {\n    return current;\n  }\n}\n\nfunction computedInject(key, options, defaultSource, treatDefaultAsFactory) {\n  let source = inject(key);\n  if (defaultSource) source = inject(key, defaultSource);\n  if (treatDefaultAsFactory) source = inject(key, defaultSource, treatDefaultAsFactory);\n\n  if (typeof options === \"function\") {\n    return computed(ctx => options(source, ctx));\n  } else {\n    return computed({\n      get: ctx => options.get(source, ctx),\n      set: options.set\n    });\n  }\n}\n\nconst createUnrefFn = fn => {\n  return function (...args) {\n    return fn.apply(this, args.map(i => unref(i)));\n  };\n};\n\nfunction unrefElement(elRef) {\n  var _a;\n\n  const plain = unref(elRef);\n  return (_a = plain == null ? void 0 : plain.$el) != null ? _a : plain;\n}\n\nconst defaultWindow = isClient ? window : void 0;\nconst defaultDocument = isClient ? window.document : void 0;\nconst defaultNavigator = isClient ? window.navigator : void 0;\nconst defaultLocation = isClient ? window.location : void 0;\n\nfunction useEventListener(...args) {\n  let target;\n  let event;\n  let listener;\n  let options;\n\n  if (isString(args[0])) {\n    [event, listener, options] = args;\n    target = defaultWindow;\n  } else {\n    [target, event, listener, options] = args;\n  }\n\n  if (!target) return noop;\n  let cleanup = noop;\n  const stopWatch = watch(() => unrefElement(target), el => {\n    cleanup();\n    if (!el) return;\n    el.addEventListener(event, listener, options);\n\n    cleanup = () => {\n      el.removeEventListener(event, listener, options);\n      cleanup = noop;\n    };\n  }, {\n    immediate: true,\n    flush: \"post\"\n  });\n\n  const stop = () => {\n    stopWatch();\n    cleanup();\n  };\n\n  tryOnScopeDispose(stop);\n  return stop;\n}\n\nfunction onClickOutside(target, handler, options = {}) {\n  const {\n    window = defaultWindow,\n    ignore,\n    capture = true,\n    detectIframe = false\n  } = options;\n  if (!window) return;\n  const shouldListen = ref(true);\n  let fallback;\n\n  const listener = event => {\n    window.clearTimeout(fallback);\n    const el = unrefElement(target);\n    const composedPath = event.composedPath();\n    if (!el || el === event.target || composedPath.includes(el) || !shouldListen.value) return;\n\n    if (ignore && ignore.length > 0) {\n      if (ignore.some(target2 => {\n        const el2 = unrefElement(target2);\n        return el2 && (event.target === el2 || composedPath.includes(el2));\n      })) return;\n    }\n\n    handler(event);\n  };\n\n  const cleanup = [useEventListener(window, \"click\", listener, {\n    passive: true,\n    capture\n  }), useEventListener(window, \"pointerdown\", e => {\n    const el = unrefElement(target);\n    shouldListen.value = !!el && !e.composedPath().includes(el);\n  }, {\n    passive: true\n  }), useEventListener(window, \"pointerup\", e => {\n    if (e.button === 0) {\n      const path = e.composedPath();\n\n      e.composedPath = () => path;\n\n      fallback = window.setTimeout(() => listener(e), 50);\n    }\n  }, {\n    passive: true\n  }), detectIframe && useEventListener(window, \"blur\", event => {\n    var _a;\n\n    const el = unrefElement(target);\n    if (((_a = document.activeElement) == null ? void 0 : _a.tagName) === \"IFRAME\" && !(el == null ? void 0 : el.contains(document.activeElement))) handler(event);\n  })].filter(Boolean);\n\n  const stop = () => cleanup.forEach(fn => fn());\n\n  return stop;\n}\n\nvar __defProp$j = Object.defineProperty;\nvar __defProps$8 = Object.defineProperties;\nvar __getOwnPropDescs$8 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$l = Object.getOwnPropertySymbols;\nvar __hasOwnProp$l = Object.prototype.hasOwnProperty;\nvar __propIsEnum$l = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$j = (obj, key, value) => key in obj ? __defProp$j(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$j = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$l.call(b, prop)) __defNormalProp$j(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$l) for (var prop of __getOwnPropSymbols$l(b)) {\n    if (__propIsEnum$l.call(b, prop)) __defNormalProp$j(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$8 = (a, b) => __defProps$8(a, __getOwnPropDescs$8(b));\n\nconst createKeyPredicate = keyFilter => {\n  if (typeof keyFilter === \"function\") return keyFilter;else if (typeof keyFilter === \"string\") return event => event.key === keyFilter;else if (Array.isArray(keyFilter)) return event => keyFilter.includes(event.key);else if (keyFilter) return () => true;else return () => false;\n};\n\nfunction onKeyStroke(key, handler, options = {}) {\n  const {\n    target = defaultWindow,\n    eventName = \"keydown\",\n    passive = false\n  } = options;\n  const predicate = createKeyPredicate(key);\n\n  const listener = e => {\n    if (predicate(e)) handler(e);\n  };\n\n  return useEventListener(target, eventName, listener, passive);\n}\n\nfunction onKeyDown(key, handler, options = {}) {\n  return onKeyStroke(key, handler, __spreadProps$8(__spreadValues$j({}, options), {\n    eventName: \"keydown\"\n  }));\n}\n\nfunction onKeyPressed(key, handler, options = {}) {\n  return onKeyStroke(key, handler, __spreadProps$8(__spreadValues$j({}, options), {\n    eventName: \"keypress\"\n  }));\n}\n\nfunction onKeyUp(key, handler, options = {}) {\n  return onKeyStroke(key, handler, __spreadProps$8(__spreadValues$j({}, options), {\n    eventName: \"keyup\"\n  }));\n}\n\nconst DEFAULT_DELAY = 500;\n\nfunction onLongPress(target, handler, options) {\n  var _a, _b;\n\n  const elementRef = computed(() => unrefElement(target));\n  let timeout = null;\n\n  function clear() {\n    if (timeout != null) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  }\n\n  function onDown(ev) {\n    var _a2, _b2, _c, _d;\n\n    if (((_a2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _a2.self) && ev.target !== elementRef.value) return;\n    clear();\n    if ((_b2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _b2.prevent) ev.preventDefault();\n    if ((_c = options == null ? void 0 : options.modifiers) == null ? void 0 : _c.stop) ev.stopPropagation();\n    timeout = setTimeout(() => handler(ev), (_d = options == null ? void 0 : options.delay) != null ? _d : DEFAULT_DELAY);\n  }\n\n  const listenerOptions = {\n    capture: (_a = options == null ? void 0 : options.modifiers) == null ? void 0 : _a.capture,\n    once: (_b = options == null ? void 0 : options.modifiers) == null ? void 0 : _b.once\n  };\n  useEventListener(elementRef, \"pointerdown\", onDown, listenerOptions);\n  useEventListener(elementRef, \"pointerup\", clear, listenerOptions);\n  useEventListener(elementRef, \"pointerleave\", clear, listenerOptions);\n}\n\nconst isFocusedElementEditable = () => {\n  const {\n    activeElement,\n    body\n  } = document;\n  if (!activeElement) return false;\n  if (activeElement === body) return false;\n\n  switch (activeElement.tagName) {\n    case \"INPUT\":\n    case \"TEXTAREA\":\n      return true;\n  }\n\n  return activeElement.hasAttribute(\"contenteditable\");\n};\n\nconst isTypedCharValid = ({\n  keyCode,\n  metaKey,\n  ctrlKey,\n  altKey\n}) => {\n  if (metaKey || ctrlKey || altKey) return false;\n  if (keyCode >= 48 && keyCode <= 57 || keyCode >= 96 && keyCode <= 105) return true;\n  if (keyCode >= 65 && keyCode <= 90) return true;\n  return false;\n};\n\nfunction onStartTyping(callback, options = {}) {\n  const {\n    document: document2 = defaultDocument\n  } = options;\n\n  const keydown = event => {\n    !isFocusedElementEditable() && isTypedCharValid(event) && callback(event);\n  };\n\n  if (document2) useEventListener(document2, \"keydown\", keydown, {\n    passive: true\n  });\n}\n\nfunction templateRef(key, initialValue = null) {\n  const instance = getCurrentInstance();\n\n  let _trigger = () => {};\n\n  const element = customRef((track, trigger) => {\n    _trigger = trigger;\n    return {\n      get() {\n        var _a, _b;\n\n        track();\n        return (_b = (_a = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a.$refs[key]) != null ? _b : initialValue;\n      },\n\n      set() {}\n\n    };\n  });\n  tryOnMounted(_trigger);\n  onUpdated(_trigger);\n  return element;\n}\n\nfunction useActiveElement(options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  const counter = ref(0);\n\n  if (window) {\n    useEventListener(window, \"blur\", () => counter.value += 1, true);\n    useEventListener(window, \"focus\", () => counter.value += 1, true);\n  }\n\n  return computed(() => {\n    counter.value;\n    return window == null ? void 0 : window.document.activeElement;\n  });\n}\n\nfunction useAsyncQueue(tasks, options = {}) {\n  const {\n    interrupt = true,\n    onError = noop,\n    onFinished = noop\n  } = options;\n  const promiseState = {\n    pending: \"pending\",\n    rejected: \"rejected\",\n    fulfilled: \"fulfilled\"\n  };\n  const initialResult = Array.from(new Array(tasks.length), () => ({\n    state: promiseState.pending,\n    data: null\n  }));\n  const result = reactive(initialResult);\n  const activeIndex = ref(-1);\n\n  if (!tasks || tasks.length === 0) {\n    onFinished();\n    return {\n      activeIndex,\n      result\n    };\n  }\n\n  function updateResult(state, res) {\n    activeIndex.value++;\n    result[activeIndex.value].data = res;\n    result[activeIndex.value].state = state;\n  }\n\n  tasks.reduce((prev, curr) => {\n    return prev.then(prevRes => {\n      var _a;\n\n      if (((_a = result[activeIndex.value]) == null ? void 0 : _a.state) === promiseState.rejected && interrupt) {\n        onFinished();\n        return;\n      }\n\n      return curr(prevRes).then(currentRes => {\n        updateResult(promiseState.fulfilled, currentRes);\n        activeIndex.value === tasks.length - 1 && onFinished();\n        return currentRes;\n      });\n    }).catch(e => {\n      updateResult(promiseState.rejected, e);\n      onError();\n      return e;\n    });\n  }, Promise.resolve());\n  return {\n    activeIndex,\n    result\n  };\n}\n\nfunction useAsyncState(promise, initialState, options) {\n  const {\n    immediate = true,\n    delay = 0,\n    onError = noop,\n    resetOnExecute = true,\n    shallow = true\n  } = options != null ? options : {};\n  const state = shallow ? shallowRef(initialState) : ref(initialState);\n  const isReady = ref(false);\n  const isLoading = ref(false);\n  const error = ref(void 0);\n\n  async function execute(delay2 = 0, ...args) {\n    if (resetOnExecute) state.value = initialState;\n    error.value = void 0;\n    isReady.value = false;\n    isLoading.value = true;\n    if (delay2 > 0) await promiseTimeout(delay2);\n\n    const _promise = typeof promise === \"function\" ? promise(...args) : promise;\n\n    try {\n      const data = await _promise;\n      state.value = data;\n      isReady.value = true;\n    } catch (e) {\n      error.value = e;\n      onError(e);\n    } finally {\n      isLoading.value = false;\n    }\n\n    return state.value;\n  }\n\n  if (immediate) execute(delay);\n  return {\n    state,\n    isReady,\n    isLoading,\n    error,\n    execute\n  };\n}\n\nconst defaults = {\n  array: v => JSON.stringify(v),\n  object: v => JSON.stringify(v),\n  set: v => JSON.stringify(Array.from(v)),\n  map: v => JSON.stringify(Object.fromEntries(v)),\n  null: () => \"\"\n};\n\nfunction getDefaultSerialization(target) {\n  if (!target) return defaults.null;\n  if (target instanceof Map) return defaults.map;else if (target instanceof Set) return defaults.set;else if (Array.isArray(target)) return defaults.array;else return defaults.object;\n}\n\nfunction useBase64(target, options) {\n  const base64 = ref(\"\");\n  const promise = ref();\n\n  function execute() {\n    if (!isClient) return;\n    promise.value = new Promise((resolve, reject) => {\n      try {\n        const _target = unref(target);\n\n        if (_target == null) {\n          resolve(\"\");\n        } else if (typeof _target === \"string\") {\n          resolve(blobToBase64(new Blob([_target], {\n            type: \"text/plain\"\n          })));\n        } else if (_target instanceof Blob) {\n          resolve(blobToBase64(_target));\n        } else if (_target instanceof ArrayBuffer) {\n          resolve(window.btoa(String.fromCharCode(...new Uint8Array(_target))));\n        } else if (_target instanceof HTMLCanvasElement) {\n          resolve(_target.toDataURL(options == null ? void 0 : options.type, options == null ? void 0 : options.quality));\n        } else if (_target instanceof HTMLImageElement) {\n          const img = _target.cloneNode(false);\n\n          img.crossOrigin = \"Anonymous\";\n          imgLoaded(img).then(() => {\n            const canvas = document.createElement(\"canvas\");\n            const ctx = canvas.getContext(\"2d\");\n            canvas.width = img.width;\n            canvas.height = img.height;\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            resolve(canvas.toDataURL(options == null ? void 0 : options.type, options == null ? void 0 : options.quality));\n          }).catch(reject);\n        } else if (typeof _target === \"object\") {\n          const _serializeFn = (options == null ? void 0 : options.serializer) || getDefaultSerialization(_target);\n\n          const serialized = _serializeFn(_target);\n\n          return resolve(blobToBase64(new Blob([serialized], {\n            type: \"application/json\"\n          })));\n        } else {\n          reject(new Error(\"target is unsupported types\"));\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n    promise.value.then(res => base64.value = res);\n    return promise.value;\n  }\n\n  if (isRef(target)) watch(target, execute, {\n    immediate: true\n  });else execute();\n  return {\n    base64,\n    promise,\n    execute\n  };\n}\n\nfunction imgLoaded(img) {\n  return new Promise((resolve, reject) => {\n    if (!img.complete) {\n      img.onload = () => {\n        resolve();\n      };\n\n      img.onerror = reject;\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction blobToBase64(blob) {\n  return new Promise((resolve, reject) => {\n    const fr = new FileReader();\n\n    fr.onload = e => {\n      resolve(e.target.result);\n    };\n\n    fr.onerror = reject;\n    fr.readAsDataURL(blob);\n  });\n}\n\nfunction useBattery({\n  navigator = defaultNavigator\n} = {}) {\n  const events = [\"chargingchange\", \"chargingtimechange\", \"dischargingtimechange\", \"levelchange\"];\n  const isSupported = navigator && \"getBattery\" in navigator;\n  const charging = ref(false);\n  const chargingTime = ref(0);\n  const dischargingTime = ref(0);\n  const level = ref(1);\n  let battery;\n\n  function updateBatteryInfo() {\n    charging.value = this.charging;\n    chargingTime.value = this.chargingTime || 0;\n    dischargingTime.value = this.dischargingTime || 0;\n    level.value = this.level;\n  }\n\n  if (isSupported) {\n    navigator.getBattery().then(_battery => {\n      battery = _battery;\n      updateBatteryInfo.call(battery);\n\n      for (const event of events) useEventListener(battery, event, updateBatteryInfo, {\n        passive: true\n      });\n    });\n  }\n\n  return {\n    isSupported,\n    charging,\n    chargingTime,\n    dischargingTime,\n    level\n  };\n}\n\nfunction useBluetooth(options) {\n  let {\n    acceptAllDevices = false\n  } = options || {};\n  const {\n    filters = void 0,\n    optionalServices = void 0,\n    navigator = defaultNavigator\n  } = options || {};\n  const isSupported = navigator && \"bluetooth\" in navigator;\n  const device = ref(void 0);\n  const error = ref(null);\n  watch(device, () => {\n    connectToBluetoothGATTServer();\n  });\n\n  async function requestDevice() {\n    if (!isSupported) return;\n    error.value = null;\n    if (filters && filters.length > 0) acceptAllDevices = false;\n\n    try {\n      device.value = await (navigator == null ? void 0 : navigator.bluetooth.requestDevice({\n        acceptAllDevices,\n        filters,\n        optionalServices\n      }));\n    } catch (err) {\n      error.value = err;\n    }\n  }\n\n  const server = ref();\n  const isConnected = computed(() => {\n    var _a;\n\n    return ((_a = server.value) == null ? void 0 : _a.connected) || false;\n  });\n\n  async function connectToBluetoothGATTServer() {\n    error.value = null;\n\n    if (device.value && device.value.gatt) {\n      device.value.addEventListener(\"gattserverdisconnected\", () => {});\n\n      try {\n        server.value = await device.value.gatt.connect();\n      } catch (err) {\n        error.value = err;\n      }\n    }\n  }\n\n  tryOnMounted(() => {\n    var _a;\n\n    if (device.value) (_a = device.value.gatt) == null ? void 0 : _a.connect();\n  });\n  tryOnScopeDispose(() => {\n    var _a;\n\n    if (device.value) (_a = device.value.gatt) == null ? void 0 : _a.disconnect();\n  });\n  return {\n    isSupported,\n    isConnected,\n    device,\n    requestDevice,\n    server,\n    error\n  };\n}\n\nfunction useMediaQuery(query, options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  const isSupported = Boolean(window && \"matchMedia\" in window && typeof window.matchMedia === \"function\");\n  let mediaQuery;\n  const matches = ref(false);\n\n  const update = () => {\n    if (!isSupported) return;\n    if (!mediaQuery) mediaQuery = window.matchMedia(query);\n    matches.value = mediaQuery.matches;\n  };\n\n  tryOnBeforeMount(() => {\n    update();\n    if (!mediaQuery) return;\n    if (\"addEventListener\" in mediaQuery) mediaQuery.addEventListener(\"change\", update);else mediaQuery.addListener(update);\n    tryOnScopeDispose(() => {\n      if (\"removeEventListener\" in mediaQuery) mediaQuery.removeEventListener(\"change\", update);else mediaQuery.removeListener(update);\n    });\n  });\n  return matches;\n}\n\nconst breakpointsTailwind = {\n  \"sm\": 640,\n  \"md\": 768,\n  \"lg\": 1024,\n  \"xl\": 1280,\n  \"2xl\": 1536\n};\nconst breakpointsBootstrapV5 = {\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1400\n};\nconst breakpointsVuetify = {\n  xs: 600,\n  sm: 960,\n  md: 1264,\n  lg: 1904\n};\nconst breakpointsAntDesign = {\n  xs: 480,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1600\n};\nconst breakpointsQuasar = {\n  xs: 600,\n  sm: 1024,\n  md: 1440,\n  lg: 1920\n};\nconst breakpointsSematic = {\n  mobileS: 320,\n  mobileM: 375,\n  mobileL: 425,\n  tablet: 768,\n  laptop: 1024,\n  laptopL: 1440,\n  desktop4K: 2560\n};\nvar __defProp$i = Object.defineProperty;\nvar __getOwnPropSymbols$k = Object.getOwnPropertySymbols;\nvar __hasOwnProp$k = Object.prototype.hasOwnProperty;\nvar __propIsEnum$k = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$i = (obj, key, value) => key in obj ? __defProp$i(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$i = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$k.call(b, prop)) __defNormalProp$i(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$k) for (var prop of __getOwnPropSymbols$k(b)) {\n    if (__propIsEnum$k.call(b, prop)) __defNormalProp$i(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction useBreakpoints(breakpoints, options = {}) {\n  function getValue(k, delta) {\n    let v = breakpoints[k];\n    if (delta != null) v = increaseWithUnit(v, delta);\n    if (typeof v === \"number\") v = `${v}px`;\n    return v;\n  }\n\n  const {\n    window = defaultWindow\n  } = options;\n\n  function match(query) {\n    if (!window) return false;\n    return window.matchMedia(query).matches;\n  }\n\n  const greater = k => {\n    return useMediaQuery(`(min-width: ${getValue(k)})`, options);\n  };\n\n  const shortcutMethods = Object.keys(breakpoints).reduce((shortcuts, k) => {\n    Object.defineProperty(shortcuts, k, {\n      get: () => greater(k),\n      enumerable: true,\n      configurable: true\n    });\n    return shortcuts;\n  }, {});\n  return __spreadValues$i({\n    greater,\n\n    smaller(k) {\n      return useMediaQuery(`(max-width: ${getValue(k, -0.1)})`, options);\n    },\n\n    between(a, b) {\n      return useMediaQuery(`(min-width: ${getValue(a)}) and (max-width: ${getValue(b, -0.1)})`, options);\n    },\n\n    isGreater(k) {\n      return match(`(min-width: ${getValue(k)})`);\n    },\n\n    isSmaller(k) {\n      return match(`(max-width: ${getValue(k, -0.1)})`);\n    },\n\n    isInBetween(a, b) {\n      return match(`(min-width: ${getValue(a)}) and (max-width: ${getValue(b, -0.1)})`);\n    }\n\n  }, shortcutMethods);\n}\n\nconst useBroadcastChannel = options => {\n  const {\n    name,\n    window = defaultWindow\n  } = options;\n  const isSupported = window && \"BroadcastChannel\" in window;\n  const isClosed = ref(false);\n  const channel = ref();\n  const data = ref();\n  const error = ref(null);\n\n  const post = data2 => {\n    if (channel.value) channel.value.postMessage(data2);\n  };\n\n  const close = () => {\n    if (channel.value) channel.value.close();\n    isClosed.value = true;\n  };\n\n  if (isSupported) {\n    tryOnMounted(() => {\n      error.value = null;\n      channel.value = new BroadcastChannel(name);\n      channel.value.addEventListener(\"message\", e => {\n        data.value = e.data;\n      }, {\n        passive: true\n      });\n      channel.value.addEventListener(\"messageerror\", e => {\n        error.value = e;\n      }, {\n        passive: true\n      });\n      channel.value.addEventListener(\"close\", () => {\n        isClosed.value = true;\n      });\n    });\n  }\n\n  tryOnScopeDispose(() => {\n    close();\n  });\n  return {\n    isSupported,\n    channel,\n    data,\n    post,\n    close,\n    error,\n    isClosed\n  };\n};\n\nfunction useBrowserLocation({\n  window = defaultWindow\n} = {}) {\n  const buildState = trigger => {\n    const {\n      state: state2,\n      length\n    } = (window == null ? void 0 : window.history) || {};\n    const {\n      hash,\n      host,\n      hostname,\n      href,\n      origin,\n      pathname,\n      port,\n      protocol,\n      search\n    } = (window == null ? void 0 : window.location) || {};\n    return {\n      trigger,\n      state: state2,\n      length,\n      hash,\n      host,\n      hostname,\n      href,\n      origin,\n      pathname,\n      port,\n      protocol,\n      search\n    };\n  };\n\n  const state = ref(buildState(\"load\"));\n\n  if (window) {\n    useEventListener(window, \"popstate\", () => state.value = buildState(\"popstate\"), {\n      passive: true\n    });\n    useEventListener(window, \"hashchange\", () => state.value = buildState(\"hashchange\"), {\n      passive: true\n    });\n  }\n\n  return state;\n}\n\nfunction useCached(refValue, comparator = (a, b) => a === b, watchOptions) {\n  const cachedValue = ref(refValue.value);\n  watch(() => refValue.value, value => {\n    if (!comparator(value, cachedValue.value)) cachedValue.value = value;\n  }, watchOptions);\n  return cachedValue;\n}\n\nfunction useClamp(value, min, max) {\n  const _value = ref(value);\n\n  return computed({\n    get() {\n      return _value.value = clamp(_value.value, unref(min), unref(max));\n    },\n\n    set(value2) {\n      _value.value = clamp(value2, unref(min), unref(max));\n    }\n\n  });\n}\n\nfunction useClipboard(options = {}) {\n  const {\n    navigator = defaultNavigator,\n    read = false,\n    source,\n    copiedDuring = 1500\n  } = options;\n  const events = [\"copy\", \"cut\"];\n  const isSupported = Boolean(navigator && \"clipboard\" in navigator);\n  const text = ref(\"\");\n  const copied = ref(false);\n  const timeout = useTimeoutFn(() => copied.value = false, copiedDuring);\n\n  function updateText() {\n    navigator.clipboard.readText().then(value => {\n      text.value = value;\n    });\n  }\n\n  if (isSupported && read) {\n    for (const event of events) useEventListener(event, updateText);\n  }\n\n  async function copy(value = unref(source)) {\n    if (isSupported && value != null) {\n      await navigator.clipboard.writeText(value);\n      text.value = value;\n      copied.value = true;\n      timeout.start();\n    }\n  }\n\n  return {\n    isSupported,\n    text,\n    copied,\n    copy\n  };\n}\n\nconst _global = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\n\nconst globalKey = \"__vueuse_ssr_handlers__\";\n_global[globalKey] = _global[globalKey] || {};\nconst handlers = _global[globalKey];\n\nfunction getSSRHandler(key, fallback) {\n  return handlers[key] || fallback;\n}\n\nfunction setSSRHandler(key, fn) {\n  handlers[key] = fn;\n}\n\nfunction guessSerializerType(rawInit) {\n  return rawInit == null ? \"any\" : rawInit instanceof Set ? \"set\" : rawInit instanceof Map ? \"map\" : rawInit instanceof Date ? \"date\" : typeof rawInit === \"boolean\" ? \"boolean\" : typeof rawInit === \"string\" ? \"string\" : typeof rawInit === \"object\" ? \"object\" : Array.isArray(rawInit) ? \"object\" : !Number.isNaN(rawInit) ? \"number\" : \"any\";\n}\n\nconst StorageSerializers = {\n  boolean: {\n    read: v => v === \"true\",\n    write: v => String(v)\n  },\n  object: {\n    read: v => JSON.parse(v),\n    write: v => JSON.stringify(v)\n  },\n  number: {\n    read: v => Number.parseFloat(v),\n    write: v => String(v)\n  },\n  any: {\n    read: v => v,\n    write: v => String(v)\n  },\n  string: {\n    read: v => v,\n    write: v => String(v)\n  },\n  map: {\n    read: v => new Map(JSON.parse(v)),\n    write: v => JSON.stringify(Array.from(v.entries()))\n  },\n  set: {\n    read: v => new Set(JSON.parse(v)),\n    write: v => JSON.stringify(Array.from(v))\n  },\n  date: {\n    read: v => new Date(v),\n    write: v => v.toISOString()\n  }\n};\n\nfunction useStorage(key, initialValue, storage, options = {}) {\n  var _a;\n\n  const {\n    flush = \"pre\",\n    deep = true,\n    listenToStorageChanges = true,\n    writeDefaults = true,\n    shallow,\n    window = defaultWindow,\n    eventFilter,\n    onError = e => {\n      console.error(e);\n    }\n  } = options;\n  const data = (shallow ? shallowRef : ref)(initialValue);\n\n  if (!storage) {\n    try {\n      storage = getSSRHandler(\"getDefaultStorage\", () => {\n        var _a2;\n\n        return (_a2 = defaultWindow) == null ? void 0 : _a2.localStorage;\n      })();\n    } catch (e) {\n      onError(e);\n    }\n  }\n\n  if (!storage) return data;\n  const rawInit = unref(initialValue);\n  const type = guessSerializerType(rawInit);\n  const serializer = (_a = options.serializer) != null ? _a : StorageSerializers[type];\n  const {\n    pause: pauseWatch,\n    resume: resumeWatch\n  } = pausableWatch(data, () => write(data.value), {\n    flush,\n    deep,\n    eventFilter\n  });\n  if (window && listenToStorageChanges) useEventListener(window, \"storage\", update);\n  update();\n  return data;\n\n  function write(v) {\n    try {\n      if (v == null) storage.removeItem(key);else storage.setItem(key, serializer.write(v));\n    } catch (e) {\n      onError(e);\n    }\n  }\n\n  function read(event) {\n    if (event && event.key !== key) return;\n    pauseWatch();\n\n    try {\n      const rawValue = event ? event.newValue : storage.getItem(key);\n\n      if (rawValue == null) {\n        if (writeDefaults && rawInit !== null) storage.setItem(key, serializer.write(rawInit));\n        return rawInit;\n      } else if (typeof rawValue !== \"string\") {\n        return rawValue;\n      } else {\n        return serializer.read(rawValue);\n      }\n    } catch (e) {\n      onError(e);\n    } finally {\n      resumeWatch();\n    }\n  }\n\n  function update(event) {\n    if (event && event.key !== key) return;\n    data.value = read(event);\n  }\n}\n\nfunction usePreferredDark(options) {\n  return useMediaQuery(\"(prefers-color-scheme: dark)\", options);\n}\n\nvar __defProp$h = Object.defineProperty;\nvar __getOwnPropSymbols$j = Object.getOwnPropertySymbols;\nvar __hasOwnProp$j = Object.prototype.hasOwnProperty;\nvar __propIsEnum$j = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$h = (obj, key, value) => key in obj ? __defProp$h(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$h = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$j.call(b, prop)) __defNormalProp$h(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$j) for (var prop of __getOwnPropSymbols$j(b)) {\n    if (__propIsEnum$j.call(b, prop)) __defNormalProp$h(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction useColorMode(options = {}) {\n  const {\n    selector = \"html\",\n    attribute = \"class\",\n    window = defaultWindow,\n    storage,\n    storageKey = \"vueuse-color-scheme\",\n    listenToStorageChanges = true,\n    storageRef,\n    emitAuto\n  } = options;\n\n  const modes = __spreadValues$h({\n    auto: \"\",\n    light: \"light\",\n    dark: \"dark\"\n  }, options.modes || {});\n\n  const preferredDark = usePreferredDark({\n    window\n  });\n  const preferredMode = computed(() => preferredDark.value ? \"dark\" : \"light\");\n  const store = storageRef || (storageKey == null ? ref(\"auto\") : useStorage(storageKey, \"auto\", storage, {\n    window,\n    listenToStorageChanges\n  }));\n  const state = computed({\n    get() {\n      return store.value === \"auto\" && !emitAuto ? preferredMode.value : store.value;\n    },\n\n    set(v) {\n      store.value = v;\n    }\n\n  });\n  const updateHTMLAttrs = getSSRHandler(\"updateHTMLAttrs\", (selector2, attribute2, value) => {\n    const el = window == null ? void 0 : window.document.querySelector(selector2);\n    if (!el) return;\n\n    if (attribute2 === \"class\") {\n      const current = value.split(/\\s/g);\n      Object.values(modes).flatMap(i => (i || \"\").split(/\\s/g)).filter(Boolean).forEach(v => {\n        if (current.includes(v)) el.classList.add(v);else el.classList.remove(v);\n      });\n    } else {\n      el.setAttribute(attribute2, value);\n    }\n  });\n\n  function defaultOnChanged(mode) {\n    var _a;\n\n    const resolvedMode = mode === \"auto\" ? preferredMode.value : mode;\n    updateHTMLAttrs(selector, attribute, (_a = modes[resolvedMode]) != null ? _a : resolvedMode);\n  }\n\n  function onChanged(mode) {\n    if (options.onChanged) options.onChanged(mode, defaultOnChanged);else defaultOnChanged(mode);\n  }\n\n  watch(state, onChanged, {\n    flush: \"post\",\n    immediate: true\n  });\n  tryOnMounted(() => onChanged(state.value));\n  return state;\n}\n\nfunction useConfirmDialog(revealed = ref(false)) {\n  const confirmHook = createEventHook();\n  const cancelHook = createEventHook();\n  const revealHook = createEventHook();\n  let _resolve = noop;\n\n  const reveal = data => {\n    revealHook.trigger(data);\n    revealed.value = true;\n    return new Promise(resolve => {\n      _resolve = resolve;\n    });\n  };\n\n  const confirm = data => {\n    revealed.value = false;\n    confirmHook.trigger(data);\n\n    _resolve({\n      data,\n      isCanceled: false\n    });\n  };\n\n  const cancel = data => {\n    revealed.value = false;\n    cancelHook.trigger(data);\n\n    _resolve({\n      data,\n      isCanceled: true\n    });\n  };\n\n  return {\n    isRevealed: computed(() => revealed.value),\n    reveal,\n    confirm,\n    cancel,\n    onReveal: revealHook.on,\n    onConfirm: confirmHook.on,\n    onCancel: cancelHook.on\n  };\n}\n\nfunction useCssVar(prop, target, {\n  window = defaultWindow,\n  initialValue = \"\"\n} = {}) {\n  const variable = ref(initialValue);\n  const elRef = computed(() => {\n    var _a;\n\n    return unrefElement(target) || ((_a = window == null ? void 0 : window.document) == null ? void 0 : _a.documentElement);\n  });\n  watch([elRef, () => unref(prop)], ([el, prop2]) => {\n    var _a;\n\n    if (el && window) {\n      const value = (_a = window.getComputedStyle(el).getPropertyValue(prop2)) == null ? void 0 : _a.trim();\n      variable.value = value || initialValue;\n    }\n  }, {\n    immediate: true\n  });\n  watch(variable, val => {\n    var _a;\n\n    if ((_a = elRef.value) == null ? void 0 : _a.style) elRef.value.style.setProperty(unref(prop), val);\n  });\n  return variable;\n}\n\nfunction useCurrentElement() {\n  const vm = getCurrentInstance();\n  const count = ref(0);\n  onUpdated(() => {\n    count.value += 1;\n  });\n  onMounted(() => {\n    count.value += 1;\n  });\n  return computed(() => {\n    count.value;\n    return vm.proxy.$el;\n  });\n}\n\nfunction useCycleList(list, options) {\n  var _a;\n\n  const state = shallowRef((_a = options == null ? void 0 : options.initialValue) != null ? _a : list[0]);\n  const index = computed({\n    get() {\n      var _a2;\n\n      let index2 = (options == null ? void 0 : options.getIndexOf) ? options.getIndexOf(state.value, list) : list.indexOf(state.value);\n      if (index2 < 0) index2 = (_a2 = options == null ? void 0 : options.fallbackIndex) != null ? _a2 : 0;\n      return index2;\n    },\n\n    set(v) {\n      set(v);\n    }\n\n  });\n\n  function set(i) {\n    const length = list.length;\n    const index2 = (i % length + length) % length;\n    const value = list[index2];\n    state.value = value;\n    return value;\n  }\n\n  function shift(delta = 1) {\n    return set(index.value + delta);\n  }\n\n  function next(n = 1) {\n    return shift(n);\n  }\n\n  function prev(n = 1) {\n    return shift(-n);\n  }\n\n  return {\n    state,\n    index,\n    next,\n    prev\n  };\n}\n\nvar __defProp$g = Object.defineProperty;\nvar __defProps$7 = Object.defineProperties;\nvar __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$i = Object.getOwnPropertySymbols;\nvar __hasOwnProp$i = Object.prototype.hasOwnProperty;\nvar __propIsEnum$i = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$g = (obj, key, value) => key in obj ? __defProp$g(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$g = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$i.call(b, prop)) __defNormalProp$g(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$i) for (var prop of __getOwnPropSymbols$i(b)) {\n    if (__propIsEnum$i.call(b, prop)) __defNormalProp$g(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$7 = (a, b) => __defProps$7(a, __getOwnPropDescs$7(b));\n\nfunction useDark(options = {}) {\n  const {\n    valueDark = \"dark\",\n    valueLight = \"\",\n    window = defaultWindow\n  } = options;\n  const mode = useColorMode(__spreadProps$7(__spreadValues$g({}, options), {\n    onChanged: (mode2, defaultHandler) => {\n      var _a;\n\n      if (options.onChanged) (_a = options.onChanged) == null ? void 0 : _a.call(options, mode2 === \"dark\");else defaultHandler(mode2);\n    },\n    modes: {\n      dark: valueDark,\n      light: valueLight\n    }\n  }));\n  const preferredDark = usePreferredDark({\n    window\n  });\n  const isDark = computed({\n    get() {\n      return mode.value === \"dark\";\n    },\n\n    set(v) {\n      if (v === preferredDark.value) mode.value = \"auto\";else mode.value = v ? \"dark\" : \"light\";\n    }\n\n  });\n  return isDark;\n}\n\nconst fnClone = v => JSON.parse(JSON.stringify(v));\n\nconst fnBypass = v => v;\n\nconst fnSetSource = (source, value) => source.value = value;\n\nfunction defaultDump(clone) {\n  return clone ? isFunction(clone) ? clone : fnClone : fnBypass;\n}\n\nfunction defaultParse(clone) {\n  return clone ? isFunction(clone) ? clone : fnClone : fnBypass;\n}\n\nfunction useManualRefHistory(source, options = {}) {\n  const {\n    clone = false,\n    dump = defaultDump(clone),\n    parse = defaultParse(clone),\n    setSource = fnSetSource\n  } = options;\n\n  function _createHistoryRecord() {\n    return markRaw({\n      snapshot: dump(source.value),\n      timestamp: timestamp()\n    });\n  }\n\n  const last = ref(_createHistoryRecord());\n  const undoStack = ref([]);\n  const redoStack = ref([]);\n\n  const _setSource = record => {\n    setSource(source, parse(record.snapshot));\n    last.value = record;\n  };\n\n  const commit = () => {\n    undoStack.value.unshift(last.value);\n    last.value = _createHistoryRecord();\n    if (options.capacity && undoStack.value.length > options.capacity) undoStack.value.splice(options.capacity, Infinity);\n    if (redoStack.value.length) redoStack.value.splice(0, redoStack.value.length);\n  };\n\n  const clear = () => {\n    undoStack.value.splice(0, undoStack.value.length);\n    redoStack.value.splice(0, redoStack.value.length);\n  };\n\n  const undo = () => {\n    const state = undoStack.value.shift();\n\n    if (state) {\n      redoStack.value.unshift(last.value);\n\n      _setSource(state);\n    }\n  };\n\n  const redo = () => {\n    const state = redoStack.value.shift();\n\n    if (state) {\n      undoStack.value.unshift(last.value);\n\n      _setSource(state);\n    }\n  };\n\n  const reset = () => {\n    _setSource(last.value);\n  };\n\n  const history = computed(() => [last.value, ...undoStack.value]);\n  const canUndo = computed(() => undoStack.value.length > 0);\n  const canRedo = computed(() => redoStack.value.length > 0);\n  return {\n    source,\n    undoStack,\n    redoStack,\n    last,\n    history,\n    canUndo,\n    canRedo,\n    clear,\n    commit,\n    reset,\n    undo,\n    redo\n  };\n}\n\nvar __defProp$f = Object.defineProperty;\nvar __defProps$6 = Object.defineProperties;\nvar __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$h = Object.getOwnPropertySymbols;\nvar __hasOwnProp$h = Object.prototype.hasOwnProperty;\nvar __propIsEnum$h = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$f = (obj, key, value) => key in obj ? __defProp$f(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$f = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$h.call(b, prop)) __defNormalProp$f(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$h) for (var prop of __getOwnPropSymbols$h(b)) {\n    if (__propIsEnum$h.call(b, prop)) __defNormalProp$f(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$6 = (a, b) => __defProps$6(a, __getOwnPropDescs$6(b));\n\nfunction useRefHistory(source, options = {}) {\n  const {\n    deep = false,\n    flush = \"pre\",\n    eventFilter\n  } = options;\n  const {\n    eventFilter: composedFilter,\n    pause,\n    resume: resumeTracking,\n    isActive: isTracking\n  } = pausableFilter(eventFilter);\n  const {\n    ignoreUpdates,\n    ignorePrevAsyncUpdates,\n    stop\n  } = watchIgnorable(source, commit, {\n    deep,\n    flush,\n    eventFilter: composedFilter\n  });\n\n  function setSource(source2, value) {\n    ignorePrevAsyncUpdates();\n    ignoreUpdates(() => {\n      source2.value = value;\n    });\n  }\n\n  const manualHistory = useManualRefHistory(source, __spreadProps$6(__spreadValues$f({}, options), {\n    clone: options.clone || deep,\n    setSource\n  }));\n  const {\n    clear,\n    commit: manualCommit\n  } = manualHistory;\n\n  function commit() {\n    ignorePrevAsyncUpdates();\n    manualCommit();\n  }\n\n  function resume(commitNow) {\n    resumeTracking();\n    if (commitNow) commit();\n  }\n\n  function batch(fn) {\n    let canceled = false;\n\n    const cancel = () => canceled = true;\n\n    ignoreUpdates(() => {\n      fn(cancel);\n    });\n    if (!canceled) commit();\n  }\n\n  function dispose() {\n    stop();\n    clear();\n  }\n\n  return __spreadProps$6(__spreadValues$f({}, manualHistory), {\n    isTracking,\n    pause,\n    resume,\n    commit,\n    batch,\n    dispose\n  });\n}\n\nvar __defProp$e = Object.defineProperty;\nvar __defProps$5 = Object.defineProperties;\nvar __getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$g = Object.getOwnPropertySymbols;\nvar __hasOwnProp$g = Object.prototype.hasOwnProperty;\nvar __propIsEnum$g = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$e = (obj, key, value) => key in obj ? __defProp$e(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$e = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$g.call(b, prop)) __defNormalProp$e(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$g) for (var prop of __getOwnPropSymbols$g(b)) {\n    if (__propIsEnum$g.call(b, prop)) __defNormalProp$e(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$5 = (a, b) => __defProps$5(a, __getOwnPropDescs$5(b));\n\nfunction useDebouncedRefHistory(source, options = {}) {\n  const filter = options.debounce ? debounceFilter(options.debounce) : void 0;\n  const history = useRefHistory(source, __spreadProps$5(__spreadValues$e({}, options), {\n    eventFilter: filter\n  }));\n  return __spreadValues$e({}, history);\n}\n\nfunction useDeviceMotion(options = {}) {\n  const {\n    window = defaultWindow,\n    eventFilter = bypassFilter\n  } = options;\n  const acceleration = ref({\n    x: null,\n    y: null,\n    z: null\n  });\n  const rotationRate = ref({\n    alpha: null,\n    beta: null,\n    gamma: null\n  });\n  const interval = ref(0);\n  const accelerationIncludingGravity = ref({\n    x: null,\n    y: null,\n    z: null\n  });\n\n  if (window) {\n    const onDeviceMotion = createFilterWrapper(eventFilter, event => {\n      acceleration.value = event.acceleration;\n      accelerationIncludingGravity.value = event.accelerationIncludingGravity;\n      rotationRate.value = event.rotationRate;\n      interval.value = event.interval;\n    });\n    useEventListener(window, \"devicemotion\", onDeviceMotion);\n  }\n\n  return {\n    acceleration,\n    accelerationIncludingGravity,\n    rotationRate,\n    interval\n  };\n}\n\nfunction useDeviceOrientation(options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  const isSupported = Boolean(window && \"DeviceOrientationEvent\" in window);\n  const isAbsolute = ref(false);\n  const alpha = ref(null);\n  const beta = ref(null);\n  const gamma = ref(null);\n\n  if (window && isSupported) {\n    useEventListener(window, \"deviceorientation\", event => {\n      isAbsolute.value = event.absolute;\n      alpha.value = event.alpha;\n      beta.value = event.beta;\n      gamma.value = event.gamma;\n    });\n  }\n\n  return {\n    isSupported,\n    isAbsolute,\n    alpha,\n    beta,\n    gamma\n  };\n}\n\nconst DEVICE_PIXEL_RATIO_SCALES = [1, 1.325, 1.4, 1.5, 1.8, 2, 2.4, 2.5, 2.75, 3, 3.5, 4];\n\nfunction useDevicePixelRatio({\n  window = defaultWindow\n} = {}) {\n  if (!window) {\n    return {\n      pixelRatio: ref(1)\n    };\n  }\n\n  const pixelRatio = ref(window.devicePixelRatio);\n\n  const handleDevicePixelRatio = () => {\n    pixelRatio.value = window.devicePixelRatio;\n  };\n\n  useEventListener(window, \"resize\", handleDevicePixelRatio, {\n    passive: true\n  });\n  DEVICE_PIXEL_RATIO_SCALES.forEach(dppx => {\n    const mqlMin = useMediaQuery(`screen and (min-resolution: ${dppx}dppx)`);\n    const mqlMax = useMediaQuery(`screen and (max-resolution: ${dppx}dppx)`);\n    watch([mqlMin, mqlMax], handleDevicePixelRatio);\n  });\n  return {\n    pixelRatio\n  };\n}\n\nfunction usePermission(permissionDesc, options = {}) {\n  const {\n    controls = false,\n    navigator = defaultNavigator\n  } = options;\n  const isSupported = Boolean(navigator && \"permissions\" in navigator);\n  let permissionStatus;\n  const desc = typeof permissionDesc === \"string\" ? {\n    name: permissionDesc\n  } : permissionDesc;\n  const state = ref();\n\n  const onChange = () => {\n    if (permissionStatus) state.value = permissionStatus.state;\n  };\n\n  const query = createSingletonPromise(async () => {\n    if (!isSupported) return;\n\n    if (!permissionStatus) {\n      try {\n        permissionStatus = await navigator.permissions.query(desc);\n        useEventListener(permissionStatus, \"change\", onChange);\n        onChange();\n      } catch (e) {\n        state.value = \"prompt\";\n      }\n    }\n\n    return permissionStatus;\n  });\n  query();\n\n  if (controls) {\n    return {\n      state,\n      isSupported,\n      query\n    };\n  } else {\n    return state;\n  }\n}\n\nfunction useDevicesList(options = {}) {\n  const {\n    navigator = defaultNavigator,\n    requestPermissions = false,\n    constraints = {\n      audio: true,\n      video: true\n    },\n    onUpdated\n  } = options;\n  const devices = ref([]);\n  const videoInputs = computed(() => devices.value.filter(i => i.kind === \"videoinput\"));\n  const audioInputs = computed(() => devices.value.filter(i => i.kind === \"audioinput\"));\n  const audioOutputs = computed(() => devices.value.filter(i => i.kind === \"audiooutput\"));\n  let isSupported = false;\n  const permissionGranted = ref(false);\n\n  async function update() {\n    if (!isSupported) return;\n    devices.value = await navigator.mediaDevices.enumerateDevices();\n    onUpdated == null ? void 0 : onUpdated(devices.value);\n  }\n\n  async function ensurePermissions() {\n    if (!isSupported) return false;\n    if (permissionGranted.value) return true;\n    const {\n      state,\n      query\n    } = usePermission(\"camera\", {\n      controls: true\n    });\n    await query();\n\n    if (state.value !== \"granted\") {\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      stream.getTracks().forEach(t => t.stop());\n      update();\n      permissionGranted.value = true;\n    } else {\n      permissionGranted.value = true;\n    }\n\n    return permissionGranted.value;\n  }\n\n  if (navigator) {\n    isSupported = Boolean(navigator.mediaDevices && navigator.mediaDevices.enumerateDevices);\n\n    if (isSupported) {\n      if (requestPermissions) ensurePermissions();\n      useEventListener(navigator.mediaDevices, \"devicechange\", update);\n      update();\n    }\n  }\n\n  return {\n    devices,\n    ensurePermissions,\n    permissionGranted,\n    videoInputs,\n    audioInputs,\n    audioOutputs,\n    isSupported\n  };\n}\n\nfunction useDisplayMedia(options = {}) {\n  var _a, _b;\n\n  const enabled = ref((_a = options.enabled) != null ? _a : false);\n  const video = options.video;\n  const audio = options.audio;\n  const {\n    navigator = defaultNavigator\n  } = options;\n  const isSupported = Boolean((_b = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _b.getDisplayMedia);\n  const constraint = {\n    audio,\n    video\n  };\n  const stream = shallowRef();\n\n  async function _start() {\n    if (!isSupported || stream.value) return;\n    stream.value = await navigator.mediaDevices.getDisplayMedia(constraint);\n    return stream.value;\n  }\n\n  async function _stop() {\n    var _a2;\n\n    (_a2 = stream.value) == null ? void 0 : _a2.getTracks().forEach(t => t.stop());\n    stream.value = void 0;\n  }\n\n  function stop() {\n    _stop();\n\n    enabled.value = false;\n  }\n\n  async function start() {\n    await _start();\n    if (stream.value) enabled.value = true;\n    return stream.value;\n  }\n\n  watch(enabled, v => {\n    if (v) _start();else _stop();\n  }, {\n    immediate: true\n  });\n  return {\n    isSupported,\n    stream,\n    start,\n    stop,\n    enabled\n  };\n}\n\nfunction useDocumentVisibility({\n  document = defaultDocument\n} = {}) {\n  if (!document) return ref(\"visible\");\n  const visibility = ref(document.visibilityState);\n  useEventListener(document, \"visibilitychange\", () => {\n    visibility.value = document.visibilityState;\n  });\n  return visibility;\n}\n\nvar __defProp$d = Object.defineProperty;\nvar __defProps$4 = Object.defineProperties;\nvar __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$f = Object.getOwnPropertySymbols;\nvar __hasOwnProp$f = Object.prototype.hasOwnProperty;\nvar __propIsEnum$f = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$d = (obj, key, value) => key in obj ? __defProp$d(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$d = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$f.call(b, prop)) __defNormalProp$d(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$f) for (var prop of __getOwnPropSymbols$f(b)) {\n    if (__propIsEnum$f.call(b, prop)) __defNormalProp$d(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$4 = (a, b) => __defProps$4(a, __getOwnPropDescs$4(b));\n\nfunction useDraggable(target, options = {}) {\n  var _a, _b;\n\n  const draggingElement = (_a = options.draggingElement) != null ? _a : defaultWindow;\n  const position = ref((_b = options.initialValue) != null ? _b : {\n    x: 0,\n    y: 0\n  });\n  const pressedDelta = ref();\n\n  const filterEvent = e => {\n    if (options.pointerTypes) return options.pointerTypes.includes(e.pointerType);\n    return true;\n  };\n\n  const handleEvent = e => {\n    if (unref(options.preventDefault)) e.preventDefault();\n    if (unref(options.stopPropagation)) e.stopPropagation();\n  };\n\n  const start = e => {\n    var _a2;\n\n    if (!filterEvent(e)) return;\n    if (unref(options.exact) && e.target !== unref(target)) return;\n    const rect = unref(target).getBoundingClientRect();\n    const pos = {\n      x: e.pageX - rect.left,\n      y: e.pageY - rect.top\n    };\n    if (((_a2 = options.onStart) == null ? void 0 : _a2.call(options, pos, e)) === false) return;\n    pressedDelta.value = pos;\n    handleEvent(e);\n  };\n\n  const move = e => {\n    var _a2;\n\n    if (!filterEvent(e)) return;\n    if (!pressedDelta.value) return;\n    position.value = {\n      x: e.pageX - pressedDelta.value.x,\n      y: e.pageY - pressedDelta.value.y\n    };\n    (_a2 = options.onMove) == null ? void 0 : _a2.call(options, position.value, e);\n    handleEvent(e);\n  };\n\n  const end = e => {\n    var _a2;\n\n    if (!filterEvent(e)) return;\n    if (!pressedDelta.value) return;\n    pressedDelta.value = void 0;\n    (_a2 = options.onEnd) == null ? void 0 : _a2.call(options, position.value, e);\n    handleEvent(e);\n  };\n\n  if (isClient) {\n    useEventListener(target, \"pointerdown\", start, true);\n    useEventListener(draggingElement, \"pointermove\", move, true);\n    useEventListener(draggingElement, \"pointerup\", end, true);\n  }\n\n  return __spreadProps$4(__spreadValues$d({}, toRefs(position)), {\n    position,\n    isDragging: computed(() => !!pressedDelta.value),\n    style: computed(() => `left:${position.value.x}px;top:${position.value.y}px;`)\n  });\n}\n\nfunction useDropZone(target, onDrop) {\n  const isOverDropZone = ref(false);\n  let counter = 0;\n\n  if (isClient) {\n    useEventListener(target, \"dragenter\", event => {\n      event.preventDefault();\n      counter += 1;\n      isOverDropZone.value = true;\n    });\n    useEventListener(target, \"dragover\", event => {\n      event.preventDefault();\n    });\n    useEventListener(target, \"dragleave\", event => {\n      event.preventDefault();\n      counter -= 1;\n      if (counter === 0) isOverDropZone.value = false;\n    });\n    useEventListener(target, \"drop\", event => {\n      var _a, _b;\n\n      event.preventDefault();\n      counter = 0;\n      isOverDropZone.value = false;\n      const files = Array.from((_b = (_a = event.dataTransfer) == null ? void 0 : _a.files) != null ? _b : []);\n\n      if (files.length === 0) {\n        onDrop(null);\n        return;\n      }\n\n      onDrop(files);\n    });\n  }\n\n  return {\n    isOverDropZone\n  };\n}\n\nvar __getOwnPropSymbols$e = Object.getOwnPropertySymbols;\nvar __hasOwnProp$e = Object.prototype.hasOwnProperty;\nvar __propIsEnum$e = Object.prototype.propertyIsEnumerable;\n\nvar __objRest$2 = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp$e.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols$e) for (var prop of __getOwnPropSymbols$e(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum$e.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nfunction useResizeObserver(target, callback, options = {}) {\n  const _a = options,\n        {\n    window = defaultWindow\n  } = _a,\n        observerOptions = __objRest$2(_a, [\"window\"]);\n\n  let observer;\n  const isSupported = window && \"ResizeObserver\" in window;\n\n  const cleanup = () => {\n    if (observer) {\n      observer.disconnect();\n      observer = void 0;\n    }\n  };\n\n  const stopWatch = watch(() => unrefElement(target), el => {\n    cleanup();\n\n    if (isSupported && window && el) {\n      observer = new ResizeObserver(callback);\n      observer.observe(el, observerOptions);\n    }\n  }, {\n    immediate: true,\n    flush: \"post\"\n  });\n\n  const stop = () => {\n    cleanup();\n    stopWatch();\n  };\n\n  tryOnScopeDispose(stop);\n  return {\n    isSupported,\n    stop\n  };\n}\n\nfunction useElementBounding(target, options = {}) {\n  const {\n    reset = true,\n    windowResize = true,\n    windowScroll = true,\n    immediate = true\n  } = options;\n  const height = ref(0);\n  const bottom = ref(0);\n  const left = ref(0);\n  const right = ref(0);\n  const top = ref(0);\n  const width = ref(0);\n  const x = ref(0);\n  const y = ref(0);\n\n  function update() {\n    const el = unrefElement(target);\n\n    if (!el) {\n      if (reset) {\n        height.value = 0;\n        bottom.value = 0;\n        left.value = 0;\n        right.value = 0;\n        top.value = 0;\n        width.value = 0;\n        x.value = 0;\n        y.value = 0;\n      }\n\n      return;\n    }\n\n    const rect = el.getBoundingClientRect();\n    height.value = rect.height;\n    bottom.value = rect.bottom;\n    left.value = rect.left;\n    right.value = rect.right;\n    top.value = rect.top;\n    width.value = rect.width;\n    x.value = rect.x;\n    y.value = rect.y;\n  }\n\n  useResizeObserver(target, update);\n  watch(() => unrefElement(target), ele => !ele && update());\n  if (windowScroll) useEventListener(\"scroll\", update, {\n    passive: true\n  });\n  if (windowResize) useEventListener(\"resize\", update, {\n    passive: true\n  });\n  tryOnMounted(() => {\n    if (immediate) update();\n  });\n  return {\n    height,\n    bottom,\n    left,\n    right,\n    top,\n    width,\n    x,\n    y,\n    update\n  };\n}\n\nfunction useRafFn(fn, options = {}) {\n  const {\n    immediate = true,\n    window = defaultWindow\n  } = options;\n  const isActive = ref(false);\n  let rafId = null;\n\n  function loop() {\n    if (!isActive.value || !window) return;\n    fn();\n    rafId = window.requestAnimationFrame(loop);\n  }\n\n  function resume() {\n    if (!isActive.value && window) {\n      isActive.value = true;\n      loop();\n    }\n  }\n\n  function pause() {\n    isActive.value = false;\n\n    if (rafId != null && window) {\n      window.cancelAnimationFrame(rafId);\n      rafId = null;\n    }\n  }\n\n  if (immediate) resume();\n  tryOnScopeDispose(pause);\n  return {\n    isActive,\n    pause,\n    resume\n  };\n}\n\nvar __defProp$c = Object.defineProperty;\nvar __getOwnPropSymbols$d = Object.getOwnPropertySymbols;\nvar __hasOwnProp$d = Object.prototype.hasOwnProperty;\nvar __propIsEnum$d = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$c = (obj, key, value) => key in obj ? __defProp$c(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$c = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$d.call(b, prop)) __defNormalProp$c(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$d) for (var prop of __getOwnPropSymbols$d(b)) {\n    if (__propIsEnum$d.call(b, prop)) __defNormalProp$c(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction useElementByPoint(options) {\n  const element = ref(null);\n  const {\n    x,\n    y\n  } = options;\n  const controls = useRafFn(() => {\n    element.value = document.elementFromPoint(unref(x), unref(y));\n  });\n  return __spreadValues$c({\n    element\n  }, controls);\n}\n\nfunction useElementHover(el) {\n  const isHovered = ref(false);\n  useEventListener(el, \"mouseenter\", () => isHovered.value = true);\n  useEventListener(el, \"mouseleave\", () => isHovered.value = false);\n  return isHovered;\n}\n\nfunction useElementSize(target, initialSize = {\n  width: 0,\n  height: 0\n}, options = {}) {\n  const width = ref(initialSize.width);\n  const height = ref(initialSize.height);\n  useResizeObserver(target, ([entry]) => {\n    width.value = entry.contentRect.width;\n    height.value = entry.contentRect.height;\n  }, options);\n  watch(() => unrefElement(target), ele => {\n    width.value = ele ? initialSize.width : 0;\n    height.value = ele ? initialSize.height : 0;\n  });\n  return {\n    width,\n    height\n  };\n}\n\nfunction useElementVisibility(element, {\n  window = defaultWindow,\n  scrollTarget\n} = {}) {\n  const elementIsVisible = ref(false);\n\n  const testBounding = () => {\n    if (!window) return;\n    const document = window.document;\n\n    if (!unref(element)) {\n      elementIsVisible.value = false;\n    } else {\n      const rect = unref(element).getBoundingClientRect();\n      elementIsVisible.value = rect.top <= (window.innerHeight || document.documentElement.clientHeight) && rect.left <= (window.innerWidth || document.documentElement.clientWidth) && rect.bottom >= 0 && rect.right >= 0;\n    }\n  };\n\n  tryOnMounted(testBounding);\n  if (window) tryOnMounted(() => useEventListener(unref(scrollTarget) || window, \"scroll\", testBounding, {\n    capture: false,\n    passive: true\n  }));\n  return elementIsVisible;\n}\n\nconst events = new Map();\n\nfunction useEventBus(key) {\n  const scope = getCurrentScope();\n\n  function on(listener) {\n    var _a;\n\n    const listeners = events.get(key) || [];\n    listeners.push(listener);\n    events.set(key, listeners);\n\n    const _off = () => off(listener);\n\n    (_a = scope == null ? void 0 : scope.cleanups) == null ? void 0 : _a.push(_off);\n    return _off;\n  }\n\n  function once(listener) {\n    function _listener(...args) {\n      off(_listener);\n      listener(...args);\n    }\n\n    return on(_listener);\n  }\n\n  function off(listener) {\n    const listeners = events.get(key);\n    if (!listeners) return;\n    const index = listeners.indexOf(listener);\n    if (index > -1) listeners.splice(index, 1);\n    if (!listeners.length) events.delete(key);\n  }\n\n  function reset() {\n    events.delete(key);\n  }\n\n  function emit(event, payload) {\n    var _a;\n\n    (_a = events.get(key)) == null ? void 0 : _a.forEach(v => v(event, payload));\n  }\n\n  return {\n    on,\n    once,\n    off,\n    emit,\n    reset\n  };\n}\n\nfunction useEventSource(url, events = [], options = {}) {\n  const event = ref(null);\n  const data = ref(null);\n  const status = ref(\"CONNECTING\");\n  const eventSource = ref(null);\n  const error = ref(null);\n  const {\n    withCredentials = false\n  } = options;\n\n  const close = () => {\n    if (eventSource.value) {\n      eventSource.value.close();\n      eventSource.value = null;\n      status.value = \"CLOSED\";\n    }\n  };\n\n  const es = new EventSource(url, {\n    withCredentials\n  });\n  eventSource.value = es;\n\n  es.onopen = () => {\n    status.value = \"OPEN\";\n    error.value = null;\n  };\n\n  es.onerror = e => {\n    status.value = \"CLOSED\";\n    error.value = e;\n  };\n\n  es.onmessage = e => {\n    event.value = null;\n    data.value = e.data;\n  };\n\n  for (const event_name of events) {\n    useEventListener(es, event_name, e => {\n      event.value = event_name;\n      data.value = e.data || null;\n    });\n  }\n\n  tryOnScopeDispose(() => {\n    close();\n  });\n  return {\n    eventSource,\n    event,\n    data,\n    status,\n    error,\n    close\n  };\n}\n\nfunction useEyeDropper(options = {}) {\n  const {\n    initialValue = \"\"\n  } = options;\n  const isSupported = Boolean(typeof window !== \"undefined\" && \"EyeDropper\" in window);\n  const sRGBHex = ref(initialValue);\n\n  async function open(openOptions) {\n    if (!isSupported) return;\n    const eyeDropper = new window.EyeDropper();\n    const result = await eyeDropper.open(openOptions);\n    sRGBHex.value = result.sRGBHex;\n    return result;\n  }\n\n  return {\n    isSupported,\n    sRGBHex,\n    open\n  };\n}\n\nfunction useFavicon(newIcon = null, options = {}) {\n  const {\n    baseUrl = \"\",\n    rel = \"icon\",\n    document = defaultDocument\n  } = options;\n  const favicon = isRef(newIcon) ? newIcon : ref(newIcon);\n\n  const applyIcon = icon => {\n    document == null ? void 0 : document.head.querySelectorAll(`link[rel*=\"${rel}\"]`).forEach(el => el.href = `${baseUrl}${icon}`);\n  };\n\n  watch(favicon, (i, o) => {\n    if (isString(i) && i !== o) applyIcon(i);\n  }, {\n    immediate: true\n  });\n  return favicon;\n}\n\nvar __defProp$b = Object.defineProperty;\nvar __defProps$3 = Object.defineProperties;\nvar __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$c = Object.getOwnPropertySymbols;\nvar __hasOwnProp$c = Object.prototype.hasOwnProperty;\nvar __propIsEnum$c = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$b = (obj, key, value) => key in obj ? __defProp$b(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$b = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$c.call(b, prop)) __defNormalProp$b(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$c) for (var prop of __getOwnPropSymbols$c(b)) {\n    if (__propIsEnum$c.call(b, prop)) __defNormalProp$b(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));\n\nconst payloadMapping = {\n  json: \"application/json\",\n  text: \"text/plain\",\n  formData: \"multipart/form-data\"\n};\n\nfunction isFetchOptions(obj) {\n  return containsProp(obj, \"immediate\", \"refetch\", \"initialData\", \"timeout\", \"beforeFetch\", \"afterFetch\", \"onFetchError\", \"fetch\");\n}\n\nfunction headersToObject(headers) {\n  if (typeof Headers !== \"undefined\" && headers instanceof Headers) return Object.fromEntries([...headers.entries()]);\n  return headers;\n}\n\nfunction createFetch(config = {}) {\n  const _options = config.options || {};\n\n  const _fetchOptions = config.fetchOptions || {};\n\n  function useFactoryFetch(url, ...args) {\n    const computedUrl = computed(() => config.baseUrl ? joinPaths(unref(config.baseUrl), unref(url)) : unref(url));\n    let options = _options;\n    let fetchOptions = _fetchOptions;\n\n    if (args.length > 0) {\n      if (isFetchOptions(args[0])) {\n        options = __spreadValues$b(__spreadValues$b({}, options), args[0]);\n      } else {\n        fetchOptions = __spreadProps$3(__spreadValues$b(__spreadValues$b({}, fetchOptions), args[0]), {\n          headers: __spreadValues$b(__spreadValues$b({}, headersToObject(fetchOptions.headers) || {}), headersToObject(args[0].headers) || {})\n        });\n      }\n    }\n\n    if (args.length > 1 && isFetchOptions(args[1])) options = __spreadValues$b(__spreadValues$b({}, options), args[1]);\n    return useFetch(computedUrl, fetchOptions, options);\n  }\n\n  return useFactoryFetch;\n}\n\nfunction useFetch(url, ...args) {\n  var _a;\n\n  const supportsAbort = typeof AbortController === \"function\";\n  let fetchOptions = {};\n  let options = {\n    immediate: true,\n    refetch: false,\n    timeout: 0\n  };\n  const config = {\n    method: \"GET\",\n    type: \"text\",\n    payload: void 0\n  };\n\n  if (args.length > 0) {\n    if (isFetchOptions(args[0])) options = __spreadValues$b(__spreadValues$b({}, options), args[0]);else fetchOptions = args[0];\n  }\n\n  if (args.length > 1) {\n    if (isFetchOptions(args[1])) options = __spreadValues$b(__spreadValues$b({}, options), args[1]);\n  }\n\n  const {\n    fetch = (_a = defaultWindow) == null ? void 0 : _a.fetch,\n    initialData,\n    timeout\n  } = options;\n  const responseEvent = createEventHook();\n  const errorEvent = createEventHook();\n  const finallyEvent = createEventHook();\n  const isFinished = ref(false);\n  const isFetching = ref(false);\n  const aborted = ref(false);\n  const statusCode = ref(null);\n  const response = shallowRef(null);\n  const error = shallowRef(null);\n  const data = shallowRef(initialData);\n  const canAbort = computed(() => supportsAbort && isFetching.value);\n  let controller;\n  let timer;\n\n  const abort = () => {\n    if (supportsAbort && controller) controller.abort();\n  };\n\n  const loading = isLoading => {\n    isFetching.value = isLoading;\n    isFinished.value = !isLoading;\n  };\n\n  if (timeout) timer = useTimeoutFn(abort, timeout, {\n    immediate: false\n  });\n\n  const execute = async (throwOnFailed = false) => {\n    var _a2;\n\n    loading(true);\n    error.value = null;\n    statusCode.value = null;\n    aborted.value = false;\n    controller = void 0;\n\n    if (supportsAbort) {\n      controller = new AbortController();\n\n      controller.signal.onabort = () => aborted.value = true;\n\n      fetchOptions = __spreadProps$3(__spreadValues$b({}, fetchOptions), {\n        signal: controller.signal\n      });\n    }\n\n    const defaultFetchOptions = {\n      method: config.method,\n      headers: {}\n    };\n\n    if (config.payload) {\n      const headers = headersToObject(defaultFetchOptions.headers);\n      if (config.payloadType) headers[\"Content-Type\"] = (_a2 = payloadMapping[config.payloadType]) != null ? _a2 : config.payloadType;\n      defaultFetchOptions.body = config.payloadType === \"json\" ? JSON.stringify(unref(config.payload)) : unref(config.payload);\n    }\n\n    let isCanceled = false;\n    const context = {\n      url: unref(url),\n      options: __spreadValues$b(__spreadValues$b({}, defaultFetchOptions), fetchOptions),\n      cancel: () => {\n        isCanceled = true;\n      }\n    };\n    if (options.beforeFetch) Object.assign(context, await options.beforeFetch(context));\n\n    if (isCanceled || !fetch) {\n      loading(false);\n      return Promise.resolve(null);\n    }\n\n    let responseData = null;\n    if (timer) timer.start();\n    return new Promise((resolve, reject) => {\n      var _a3;\n\n      fetch(context.url, __spreadProps$3(__spreadValues$b(__spreadValues$b({}, defaultFetchOptions), context.options), {\n        headers: __spreadValues$b(__spreadValues$b({}, headersToObject(defaultFetchOptions.headers)), headersToObject((_a3 = context.options) == null ? void 0 : _a3.headers))\n      })).then(async fetchResponse => {\n        response.value = fetchResponse;\n        statusCode.value = fetchResponse.status;\n        responseData = await fetchResponse[config.type]();\n        if (options.afterFetch && statusCode.value >= 200 && statusCode.value < 300) ({\n          data: responseData\n        } = await options.afterFetch({\n          data: responseData,\n          response: fetchResponse\n        }));\n        data.value = responseData;\n        if (!fetchResponse.ok) throw new Error(fetchResponse.statusText);\n        responseEvent.trigger(fetchResponse);\n        return resolve(fetchResponse);\n      }).catch(async fetchError => {\n        let errorData = fetchError.message || fetchError.name;\n        if (options.onFetchError) ({\n          data: responseData,\n          error: errorData\n        } = await options.onFetchError({\n          data: responseData,\n          error: fetchError,\n          response: response.value\n        }));\n        data.value = responseData;\n        error.value = errorData;\n        errorEvent.trigger(fetchError);\n        if (throwOnFailed) return reject(fetchError);\n        return resolve(null);\n      }).finally(() => {\n        loading(false);\n        if (timer) timer.stop();\n        finallyEvent.trigger(null);\n      });\n    });\n  };\n\n  watch(() => [unref(url), unref(options.refetch)], () => unref(options.refetch) && execute(), {\n    deep: true\n  });\n  const shell = {\n    isFinished,\n    statusCode,\n    response,\n    error,\n    data,\n    isFetching,\n    canAbort,\n    aborted,\n    abort,\n    execute,\n    onFetchResponse: responseEvent.on,\n    onFetchError: errorEvent.on,\n    onFetchFinally: finallyEvent.on,\n    get: setMethod(\"GET\"),\n    put: setMethod(\"PUT\"),\n    post: setMethod(\"POST\"),\n    delete: setMethod(\"DELETE\"),\n    patch: setMethod(\"PATCH\"),\n    head: setMethod(\"HEAD\"),\n    options: setMethod(\"OPTIONS\"),\n    json: setType(\"json\"),\n    text: setType(\"text\"),\n    blob: setType(\"blob\"),\n    arrayBuffer: setType(\"arrayBuffer\"),\n    formData: setType(\"formData\")\n  };\n\n  function setMethod(method) {\n    return (payload, payloadType) => {\n      if (!isFetching.value) {\n        config.method = method;\n        config.payload = payload;\n        config.payloadType = payloadType;\n\n        if (isRef(config.payload)) {\n          watch(() => [unref(config.payload), unref(options.refetch)], () => unref(options.refetch) && execute(), {\n            deep: true\n          });\n        }\n\n        if (!payloadType && unref(payload) && Object.getPrototypeOf(unref(payload)) === Object.prototype) config.payloadType = \"json\";\n        return __spreadProps$3(__spreadValues$b({}, shell), {\n          then(onFulfilled, onRejected) {\n            return waitUntilFinished().then(onFulfilled, onRejected);\n          }\n\n        });\n      }\n\n      return void 0;\n    };\n  }\n\n  function waitUntilFinished() {\n    return new Promise((resolve, reject) => {\n      until(isFinished).toBe(true).then(() => resolve(shell)).catch(error2 => reject(error2));\n    });\n  }\n\n  function setType(type) {\n    return () => {\n      if (!isFetching.value) {\n        config.type = type;\n        return __spreadProps$3(__spreadValues$b({}, shell), {\n          then(onFulfilled, onRejected) {\n            return waitUntilFinished().then(onFulfilled, onRejected);\n          }\n\n        });\n      }\n\n      return void 0;\n    };\n  }\n\n  if (options.immediate) setTimeout(execute, 0);\n  return __spreadProps$3(__spreadValues$b({}, shell), {\n    then(onFulfilled, onRejected) {\n      return waitUntilFinished().then(onFulfilled, onRejected);\n    }\n\n  });\n}\n\nfunction joinPaths(start, end) {\n  if (!start.endsWith(\"/\") && !end.startsWith(\"/\")) return `${start}/${end}`;\n  return `${start}${end}`;\n}\n\nvar __defProp$a = Object.defineProperty;\nvar __getOwnPropSymbols$b = Object.getOwnPropertySymbols;\nvar __hasOwnProp$b = Object.prototype.hasOwnProperty;\nvar __propIsEnum$b = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$a = (obj, key, value) => key in obj ? __defProp$a(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$a = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$b.call(b, prop)) __defNormalProp$a(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$b) for (var prop of __getOwnPropSymbols$b(b)) {\n    if (__propIsEnum$b.call(b, prop)) __defNormalProp$a(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst DEFAULT_OPTIONS = {\n  multiple: true,\n  accept: \"*\"\n};\n\nfunction useFileDialog(options = {}) {\n  const {\n    document = defaultDocument\n  } = options;\n  const files = ref(null);\n  let input;\n\n  if (document) {\n    input = document.createElement(\"input\");\n    input.type = \"file\";\n\n    input.onchange = event => {\n      const result = event.target;\n      files.value = result.files;\n    };\n  }\n\n  const open = localOptions => {\n    if (!input) return;\n\n    const _options = __spreadValues$a(__spreadValues$a(__spreadValues$a({}, DEFAULT_OPTIONS), options), localOptions);\n\n    input.multiple = _options.multiple;\n    input.accept = _options.accept;\n    input.capture = _options.capture;\n    input.click();\n  };\n\n  const reset = () => {\n    files.value = null;\n    if (input) input.value = \"\";\n  };\n\n  return {\n    files: readonly(files),\n    open,\n    reset\n  };\n}\n\nvar __defProp$9 = Object.defineProperty;\nvar __getOwnPropSymbols$a = Object.getOwnPropertySymbols;\nvar __hasOwnProp$a = Object.prototype.hasOwnProperty;\nvar __propIsEnum$a = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$9 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$a.call(b, prop)) __defNormalProp$9(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$a) for (var prop of __getOwnPropSymbols$a(b)) {\n    if (__propIsEnum$a.call(b, prop)) __defNormalProp$9(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction useFileSystemAccess(options = {}) {\n  const {\n    window: _window = defaultWindow,\n    dataType = \"Text\"\n  } = unref(options);\n  const window = _window;\n  const isSupported = Boolean(window && \"showSaveFilePicker\" in window && \"showOpenFilePicker\" in window);\n  const fileHandle = ref();\n  const data = ref();\n  const file = ref();\n  const fileName = computed(() => {\n    var _a, _b;\n\n    return (_b = (_a = file.value) == null ? void 0 : _a.name) != null ? _b : \"\";\n  });\n  const fileMIME = computed(() => {\n    var _a, _b;\n\n    return (_b = (_a = file.value) == null ? void 0 : _a.type) != null ? _b : \"\";\n  });\n  const fileSize = computed(() => {\n    var _a, _b;\n\n    return (_b = (_a = file.value) == null ? void 0 : _a.size) != null ? _b : 0;\n  });\n  const fileLastModified = computed(() => {\n    var _a, _b;\n\n    return (_b = (_a = file.value) == null ? void 0 : _a.lastModified) != null ? _b : 0;\n  });\n\n  async function open(_options = {}) {\n    if (!isSupported) return;\n    const [handle] = await window.showOpenFilePicker(__spreadValues$9(__spreadValues$9({}, unref(options)), _options));\n    fileHandle.value = handle;\n    await updateFile();\n    await updateData();\n  }\n\n  async function create(_options = {}) {\n    if (!isSupported) return;\n    fileHandle.value = await window.showSaveFilePicker(__spreadValues$9(__spreadValues$9({}, unref(options)), _options));\n    data.value = void 0;\n    await updateFile();\n    await updateData();\n  }\n\n  async function save(_options = {}) {\n    if (!isSupported) return;\n    if (!fileHandle.value) return saveAs(_options);\n\n    if (data.value) {\n      const writableStream = await fileHandle.value.createWritable();\n      await writableStream.write(data.value);\n      await writableStream.close();\n    }\n\n    await updateFile();\n  }\n\n  async function saveAs(_options = {}) {\n    if (!isSupported) return;\n    fileHandle.value = await window.showSaveFilePicker(__spreadValues$9(__spreadValues$9({}, unref(options)), _options));\n\n    if (data.value) {\n      const writableStream = await fileHandle.value.createWritable();\n      await writableStream.write(data.value);\n      await writableStream.close();\n    }\n\n    await updateFile();\n  }\n\n  async function updateFile() {\n    var _a;\n\n    file.value = await ((_a = fileHandle.value) == null ? void 0 : _a.getFile());\n  }\n\n  async function updateData() {\n    var _a, _b;\n\n    if (unref(dataType) === \"Text\") data.value = await ((_a = file.value) == null ? void 0 : _a.text());\n    if (unref(dataType) === \"ArrayBuffer\") data.value = await ((_b = file.value) == null ? void 0 : _b.arrayBuffer());\n    if (unref(dataType) === \"Blob\") data.value = file.value;\n  }\n\n  watch(() => unref(dataType), updateData);\n  return {\n    isSupported,\n    data,\n    file,\n    fileName,\n    fileMIME,\n    fileSize,\n    fileLastModified,\n    open,\n    create,\n    save,\n    saveAs,\n    updateData\n  };\n}\n\nfunction useFocus(target, options = {}) {\n  const {\n    initialValue = false\n  } = options;\n  const activeElement = useActiveElement(options);\n  const targetElement = computed(() => unrefElement(target));\n  const focused = computed({\n    get() {\n      return isDef(activeElement.value) && isDef(targetElement.value) && activeElement.value === targetElement.value;\n    },\n\n    set(value) {\n      var _a, _b;\n\n      if (!value && focused.value) (_a = targetElement.value) == null ? void 0 : _a.blur();\n      if (value && !focused.value) (_b = targetElement.value) == null ? void 0 : _b.focus();\n    }\n\n  });\n  watch(targetElement, () => {\n    focused.value = initialValue;\n  }, {\n    immediate: true,\n    flush: \"post\"\n  });\n  return {\n    focused\n  };\n}\n\nfunction useFocusWithin(target, options = {}) {\n  const activeElement = useActiveElement(options);\n  const targetElement = computed(() => unrefElement(target));\n  const focused = computed(() => targetElement.value && activeElement.value ? targetElement.value.contains(activeElement.value) : false);\n  return {\n    focused\n  };\n}\n\nfunction useFps(options) {\n  var _a;\n\n  const fps = ref(0);\n  if (typeof performance === \"undefined\") return fps;\n  const every = (_a = options == null ? void 0 : options.every) != null ? _a : 10;\n  let last = performance.now();\n  let ticks = 0;\n  useRafFn(() => {\n    ticks += 1;\n\n    if (ticks >= every) {\n      const now = performance.now();\n      const diff = now - last;\n      fps.value = Math.round(1e3 / (diff / ticks));\n      last = now;\n      ticks = 0;\n    }\n  });\n  return fps;\n}\n\nconst functionsMap = [[\"requestFullscreen\", \"exitFullscreen\", \"fullscreenElement\", \"fullscreenEnabled\", \"fullscreenchange\", \"fullscreenerror\"], [\"webkitRequestFullscreen\", \"webkitExitFullscreen\", \"webkitFullscreenElement\", \"webkitFullscreenEnabled\", \"webkitfullscreenchange\", \"webkitfullscreenerror\"], [\"webkitRequestFullScreen\", \"webkitCancelFullScreen\", \"webkitCurrentFullScreenElement\", \"webkitCancelFullScreen\", \"webkitfullscreenchange\", \"webkitfullscreenerror\"], [\"mozRequestFullScreen\", \"mozCancelFullScreen\", \"mozFullScreenElement\", \"mozFullScreenEnabled\", \"mozfullscreenchange\", \"mozfullscreenerror\"], [\"msRequestFullscreen\", \"msExitFullscreen\", \"msFullscreenElement\", \"msFullscreenEnabled\", \"MSFullscreenChange\", \"MSFullscreenError\"]];\n\nfunction useFullscreen(target, options = {}) {\n  const {\n    document = defaultDocument,\n    autoExit = false\n  } = options;\n  const targetRef = target || (document == null ? void 0 : document.querySelector(\"html\"));\n  const isFullscreen = ref(false);\n  let isSupported = false;\n  let map = functionsMap[0];\n\n  if (!document) {\n    isSupported = false;\n  } else {\n    for (const m of functionsMap) {\n      if (m[1] in document) {\n        map = m;\n        isSupported = true;\n        break;\n      }\n    }\n  }\n\n  const [REQUEST, EXIT, ELEMENT,, EVENT] = map;\n\n  async function exit() {\n    if (!isSupported) return;\n    if (document == null ? void 0 : document[ELEMENT]) await document[EXIT]();\n    isFullscreen.value = false;\n  }\n\n  async function enter() {\n    if (!isSupported) return;\n    await exit();\n    const target2 = unrefElement(targetRef);\n\n    if (target2) {\n      await target2[REQUEST]();\n      isFullscreen.value = true;\n    }\n  }\n\n  async function toggle() {\n    if (isFullscreen.value) await exit();else await enter();\n  }\n\n  if (document) {\n    useEventListener(document, EVENT, () => {\n      isFullscreen.value = !!(document == null ? void 0 : document[ELEMENT]);\n    }, false);\n  }\n\n  if (autoExit) tryOnScopeDispose(exit);\n  return {\n    isSupported,\n    isFullscreen,\n    enter,\n    exit,\n    toggle\n  };\n}\n\nfunction mapGamepadToXbox360Controller(gamepad) {\n  return computed(() => {\n    if (gamepad.value) {\n      return {\n        buttons: {\n          a: gamepad.value.buttons[0],\n          b: gamepad.value.buttons[1],\n          x: gamepad.value.buttons[2],\n          y: gamepad.value.buttons[3]\n        },\n        bumper: {\n          left: gamepad.value.buttons[4],\n          right: gamepad.value.buttons[5]\n        },\n        triggers: {\n          left: gamepad.value.buttons[6],\n          right: gamepad.value.buttons[7]\n        },\n        stick: {\n          left: {\n            horizontal: gamepad.value.axes[0],\n            vertical: gamepad.value.axes[1],\n            button: gamepad.value.buttons[10]\n          },\n          right: {\n            horizontal: gamepad.value.axes[2],\n            vertical: gamepad.value.axes[3],\n            button: gamepad.value.buttons[11]\n          }\n        },\n        dpad: {\n          up: gamepad.value.buttons[12],\n          down: gamepad.value.buttons[13],\n          left: gamepad.value.buttons[14],\n          right: gamepad.value.buttons[15]\n        },\n        back: gamepad.value.buttons[8],\n        start: gamepad.value.buttons[9]\n      };\n    }\n\n    return null;\n  });\n}\n\nfunction useGamepad(options = {}) {\n  const {\n    navigator = defaultNavigator\n  } = options;\n  const isSupported = navigator && \"getGamepads\" in navigator;\n  const gamepads = ref([]);\n  const onConnectedHook = createEventHook();\n  const onDisconnectedHook = createEventHook();\n\n  const stateFromGamepad = gamepad => {\n    const hapticActuators = [];\n    const vibrationActuator = \"vibrationActuator\" in gamepad ? gamepad.vibrationActuator : null;\n    if (vibrationActuator) hapticActuators.push(vibrationActuator);\n    if (gamepad.hapticActuators) hapticActuators.push(...gamepad.hapticActuators);\n    return {\n      id: gamepad.id,\n      hapticActuators,\n      index: gamepad.index,\n      mapping: gamepad.mapping,\n      connected: gamepad.connected,\n      timestamp: gamepad.timestamp,\n      axes: gamepad.axes.map(axes => axes),\n      buttons: gamepad.buttons.map(button => ({\n        pressed: button.pressed,\n        touched: button.touched,\n        value: button.value\n      }))\n    };\n  };\n\n  const updateGamepadState = () => {\n    const _gamepads = (navigator == null ? void 0 : navigator.getGamepads()) || [];\n\n    for (let i = 0; i < _gamepads.length; ++i) {\n      const gamepad = _gamepads[i];\n\n      if (gamepad) {\n        const index = gamepads.value.findIndex(({\n          index: index2\n        }) => index2 === gamepad.index);\n        if (index > -1) gamepads.value[index] = stateFromGamepad(gamepad);\n      }\n    }\n  };\n\n  const {\n    isActive,\n    pause,\n    resume\n  } = useRafFn(updateGamepadState);\n\n  const onGamepadConnected = gamepad => {\n    if (!gamepads.value.some(({\n      index\n    }) => index === gamepad.index)) {\n      gamepads.value.push(stateFromGamepad(gamepad));\n      onConnectedHook.trigger(gamepad.index);\n    }\n\n    resume();\n  };\n\n  const onGamepadDisconnected = gamepad => {\n    gamepads.value = gamepads.value.filter(x => x.index !== gamepad.index);\n    onDisconnectedHook.trigger(gamepad.index);\n  };\n\n  useEventListener(\"gamepadconnected\", e => onGamepadConnected(e.gamepad));\n  useEventListener(\"gamepaddisconnected\", e => onGamepadDisconnected(e.gamepad));\n  tryOnMounted(() => {\n    const _gamepads = (navigator == null ? void 0 : navigator.getGamepads()) || [];\n\n    if (_gamepads) {\n      for (let i = 0; i < _gamepads.length; ++i) {\n        const gamepad = _gamepads[i];\n        if (gamepad) onGamepadConnected(gamepad);\n      }\n    }\n  });\n  pause();\n  return {\n    isSupported,\n    onConnected: onConnectedHook.on,\n    onDisconnected: onDisconnectedHook.on,\n    gamepads,\n    pause,\n    resume,\n    isActive\n  };\n}\n\nfunction useGeolocation(options = {}) {\n  const {\n    enableHighAccuracy = true,\n    maximumAge = 3e4,\n    timeout = 27e3,\n    navigator = defaultNavigator\n  } = options;\n  const isSupported = navigator && \"geolocation\" in navigator;\n  const locatedAt = ref(null);\n  const error = ref(null);\n  const coords = ref({\n    accuracy: 0,\n    latitude: Infinity,\n    longitude: Infinity,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    speed: null\n  });\n\n  function updatePosition(position) {\n    locatedAt.value = position.timestamp;\n    coords.value = position.coords;\n    error.value = null;\n  }\n\n  let watcher;\n\n  if (isSupported) {\n    watcher = navigator.geolocation.watchPosition(updatePosition, err => error.value = err, {\n      enableHighAccuracy,\n      maximumAge,\n      timeout\n    });\n  }\n\n  tryOnScopeDispose(() => {\n    if (watcher && navigator) navigator.geolocation.clearWatch(watcher);\n  });\n  return {\n    isSupported,\n    coords,\n    locatedAt,\n    error\n  };\n}\n\nconst defaultEvents$1 = [\"mousemove\", \"mousedown\", \"resize\", \"keydown\", \"touchstart\", \"wheel\"];\nconst oneMinute = 6e4;\n\nfunction useIdle(timeout = oneMinute, options = {}) {\n  const {\n    initialState = false,\n    listenForVisibilityChange = true,\n    events = defaultEvents$1,\n    window = defaultWindow,\n    eventFilter = throttleFilter(50)\n  } = options;\n  const idle = ref(initialState);\n  const lastActive = ref(timestamp());\n  let timer;\n  const onEvent = createFilterWrapper(eventFilter, () => {\n    idle.value = false;\n    lastActive.value = timestamp();\n    clearTimeout(timer);\n    timer = setTimeout(() => idle.value = true, timeout);\n  });\n\n  if (window) {\n    const document = window.document;\n\n    for (const event of events) useEventListener(window, event, onEvent, {\n      passive: true\n    });\n\n    if (listenForVisibilityChange) {\n      useEventListener(document, \"visibilitychange\", () => {\n        if (!document.hidden) onEvent();\n      });\n    }\n  }\n\n  timer = setTimeout(() => idle.value = true, timeout);\n  return {\n    idle,\n    lastActive\n  };\n}\n\nvar __defProp$8 = Object.defineProperty;\nvar __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$9 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$9 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$8 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$9.call(b, prop)) __defNormalProp$8(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$9) for (var prop of __getOwnPropSymbols$9(b)) {\n    if (__propIsEnum$9.call(b, prop)) __defNormalProp$8(a, prop, b[prop]);\n  }\n  return a;\n};\n\nasync function loadImage(options) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    const {\n      src,\n      srcset,\n      sizes\n    } = options;\n    img.src = src;\n    if (srcset) img.srcset = srcset;\n    if (sizes) img.sizes = sizes;\n\n    img.onload = () => resolve(img);\n\n    img.onerror = reject;\n  });\n}\n\nconst useImage = (options, asyncStateOptions = {}) => {\n  const state = useAsyncState(() => loadImage(unref(options)), void 0, __spreadValues$8({\n    resetOnExecute: true\n  }, asyncStateOptions));\n  watch(() => unref(options), () => state.execute(asyncStateOptions.delay), {\n    deep: true\n  });\n  return state;\n};\n\nfunction useScroll(element, options = {}) {\n  const {\n    throttle = 0,\n    idle = 200,\n    onStop = noop,\n    onScroll = noop,\n    offset = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    },\n    eventListenerOptions = {\n      capture: false,\n      passive: true\n    }\n  } = options;\n  const x = ref(0);\n  const y = ref(0);\n  const isScrolling = ref(false);\n  const arrivedState = reactive({\n    left: true,\n    right: false,\n    top: true,\n    bottom: false\n  });\n  const directions = reactive({\n    left: false,\n    right: false,\n    top: false,\n    bottom: false\n  });\n\n  if (element) {\n    const onScrollEnd = useDebounceFn(e => {\n      isScrolling.value = false;\n      directions.left = false;\n      directions.right = false;\n      directions.top = false;\n      directions.bottom = false;\n      onStop(e);\n    }, throttle + idle);\n\n    const onScrollHandler = e => {\n      const eventTarget = e.target === document ? e.target.documentElement : e.target;\n      const scrollLeft = eventTarget.scrollLeft;\n      directions.left = scrollLeft < x.value;\n      directions.right = scrollLeft > x.value;\n      arrivedState.left = scrollLeft <= 0 + (offset.left || 0);\n      arrivedState.right = scrollLeft + eventTarget.clientWidth >= eventTarget.scrollWidth - (offset.right || 0);\n      x.value = scrollLeft;\n      let scrollTop = eventTarget.scrollTop;\n      if (e.target === document && !scrollTop) scrollTop = document.body.scrollTop;\n      directions.top = scrollTop < y.value;\n      directions.bottom = scrollTop > y.value;\n      arrivedState.top = scrollTop <= 0 + (offset.top || 0);\n      arrivedState.bottom = scrollTop + eventTarget.clientHeight >= eventTarget.scrollHeight - (offset.bottom || 0);\n      y.value = scrollTop;\n      isScrolling.value = true;\n      onScrollEnd(e);\n      onScroll(e);\n    };\n\n    useEventListener(element, \"scroll\", throttle ? useThrottleFn(onScrollHandler, throttle) : onScrollHandler, eventListenerOptions);\n  }\n\n  return {\n    x,\n    y,\n    isScrolling,\n    arrivedState,\n    directions\n  };\n}\n\nvar __defProp$7 = Object.defineProperty;\nvar __defProps$2 = Object.defineProperties;\nvar __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$8 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$8 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$7 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$8.call(b, prop)) __defNormalProp$7(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$8) for (var prop of __getOwnPropSymbols$8(b)) {\n    if (__propIsEnum$8.call(b, prop)) __defNormalProp$7(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));\n\nfunction useInfiniteScroll(element, onLoadMore, options = {}) {\n  var _a, _b;\n\n  const direction = (_a = options.direction) != null ? _a : \"bottom\";\n  const state = reactive(useScroll(element, __spreadProps$2(__spreadValues$7({}, options), {\n    offset: __spreadValues$7({\n      [direction]: (_b = options.distance) != null ? _b : 0\n    }, options.offset)\n  })));\n  watch(() => state.arrivedState[direction], async v => {\n    var _a2, _b2;\n\n    if (v) {\n      const elem = unref(element);\n      const previous = {\n        height: (_a2 = elem == null ? void 0 : elem.scrollHeight) != null ? _a2 : 0,\n        width: (_b2 = elem == null ? void 0 : elem.scrollWidth) != null ? _b2 : 0\n      };\n      await onLoadMore(state);\n\n      if (options.preserveScrollPosition && elem) {\n        nextTick(() => {\n          elem.scrollTo({\n            top: elem.scrollHeight - previous.height,\n            left: elem.scrollWidth - previous.width\n          });\n        });\n      }\n    }\n  });\n}\n\nfunction useIntersectionObserver(target, callback, options = {}) {\n  const {\n    root,\n    rootMargin = \"0px\",\n    threshold = 0.1,\n    window = defaultWindow\n  } = options;\n  const isSupported = window && \"IntersectionObserver\" in window;\n  let cleanup = noop;\n  const stopWatch = isSupported ? watch(() => ({\n    el: unrefElement(target),\n    root: unrefElement(root)\n  }), ({\n    el,\n    root: root2\n  }) => {\n    cleanup();\n    if (!el) return;\n    const observer = new IntersectionObserver(callback, {\n      root: root2,\n      rootMargin,\n      threshold\n    });\n    observer.observe(el);\n\n    cleanup = () => {\n      observer.disconnect();\n      cleanup = noop;\n    };\n  }, {\n    immediate: true,\n    flush: \"post\"\n  }) : noop;\n\n  const stop = () => {\n    cleanup();\n    stopWatch();\n  };\n\n  tryOnScopeDispose(stop);\n  return {\n    isSupported,\n    stop\n  };\n}\n\nconst defaultEvents = [\"mousedown\", \"mouseup\", \"keydown\", \"keyup\"];\n\nfunction useKeyModifier(modifier, options = {}) {\n  const {\n    events = defaultEvents,\n    document = defaultDocument,\n    initial = null\n  } = options;\n  const state = ref(initial);\n\n  if (document) {\n    events.forEach(listenerEvent => {\n      useEventListener(document, listenerEvent, evt => {\n        if (typeof evt.getModifierState === \"function\") state.value = evt.getModifierState(modifier);\n      });\n    });\n  }\n\n  return state;\n}\n\nfunction useLocalStorage(key, initialValue, options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  return useStorage(key, initialValue, window == null ? void 0 : window.localStorage, options);\n}\n\nconst DefaultMagicKeysAliasMap = {\n  ctrl: \"control\",\n  command: \"meta\",\n  cmd: \"meta\",\n  option: \"alt\",\n  up: \"arrowup\",\n  down: \"arrowdown\",\n  left: \"arrowleft\",\n  right: \"arrowright\"\n};\n\nfunction useMagicKeys(options = {}) {\n  const {\n    reactive: useReactive = false,\n    target = defaultWindow,\n    aliasMap = DefaultMagicKeysAliasMap,\n    passive = true,\n    onEventFired = noop\n  } = options;\n  const current = reactive(new Set());\n  const obj = {\n    toJSON() {\n      return {};\n    },\n\n    current\n  };\n  const refs = useReactive ? reactive(obj) : obj;\n  const metaDeps = new Set();\n  const usedKeys = new Set();\n\n  function setRefs(key, value) {\n    if (key in refs) {\n      if (useReactive) refs[key] = value;else refs[key].value = value;\n    }\n  }\n\n  function reset() {\n    for (const key of usedKeys) setRefs(key, false);\n  }\n\n  function updateRefs(e, value) {\n    var _a, _b;\n\n    const key = (_a = e.key) == null ? void 0 : _a.toLowerCase();\n    const code = (_b = e.code) == null ? void 0 : _b.toLowerCase();\n    const values = [code, key].filter(Boolean);\n\n    if (code) {\n      if (value) current.add(e.code);else current.delete(e.code);\n    }\n\n    for (const key2 of values) {\n      usedKeys.add(key2);\n      setRefs(key2, value);\n    }\n\n    if (key === \"meta\" && !value) {\n      metaDeps.forEach(key2 => {\n        current.delete(key2);\n        setRefs(key2, false);\n      });\n      metaDeps.clear();\n    } else if (typeof e.getModifierState === \"function\" && e.getModifierState(\"Meta\") && value) {\n      [...current, ...values].forEach(key2 => metaDeps.add(key2));\n    }\n  }\n\n  if (target) {\n    useEventListener(target, \"keydown\", e => {\n      updateRefs(e, true);\n      return onEventFired(e);\n    }, {\n      passive\n    });\n    useEventListener(target, \"keyup\", e => {\n      updateRefs(e, false);\n      return onEventFired(e);\n    }, {\n      passive\n    });\n    useEventListener(\"blur\", reset, {\n      passive: true\n    });\n    useEventListener(\"focus\", reset, {\n      passive: true\n    });\n  }\n\n  const proxy = new Proxy(refs, {\n    get(target2, prop, rec) {\n      if (typeof prop !== \"string\") return Reflect.get(target2, prop, rec);\n      prop = prop.toLowerCase();\n      if (prop in aliasMap) prop = aliasMap[prop];\n\n      if (!(prop in refs)) {\n        if (/[+_-]/.test(prop)) {\n          const keys = prop.split(/[+_-]/g).map(i => i.trim());\n          refs[prop] = computed(() => keys.every(key => unref(proxy[key])));\n        } else {\n          refs[prop] = ref(false);\n        }\n      }\n\n      const r = Reflect.get(target2, prop, rec);\n      return useReactive ? unref(r) : r;\n    }\n\n  });\n  return proxy;\n}\n\nvar __defProp$6 = Object.defineProperty;\nvar __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$7 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$7 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$6 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$7.call(b, prop)) __defNormalProp$6(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$7) for (var prop of __getOwnPropSymbols$7(b)) {\n    if (__propIsEnum$7.call(b, prop)) __defNormalProp$6(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction usingElRef(source, cb) {\n  if (unref(source)) cb(unref(source));\n}\n\nfunction timeRangeToArray(timeRanges) {\n  let ranges = [];\n\n  for (let i = 0; i < timeRanges.length; ++i) ranges = [...ranges, [timeRanges.start(i), timeRanges.end(i)]];\n\n  return ranges;\n}\n\nfunction tracksToArray(tracks) {\n  return Array.from(tracks).map(({\n    label,\n    kind,\n    language,\n    mode,\n    activeCues,\n    cues,\n    inBandMetadataTrackDispatchType\n  }, id) => ({\n    id,\n    label,\n    kind,\n    language,\n    mode,\n    activeCues,\n    cues,\n    inBandMetadataTrackDispatchType\n  }));\n}\n\nconst defaultOptions = {\n  src: \"\",\n  tracks: []\n};\n\nfunction useMediaControls(target, options = {}) {\n  options = __spreadValues$6(__spreadValues$6({}, defaultOptions), options);\n  const {\n    document = defaultDocument\n  } = options;\n  const currentTime = ref(0);\n  const duration = ref(0);\n  const seeking = ref(false);\n  const volume = ref(1);\n  const waiting = ref(false);\n  const ended = ref(false);\n  const playing = ref(false);\n  const rate = ref(1);\n  const stalled = ref(false);\n  const buffered = ref([]);\n  const tracks = ref([]);\n  const selectedTrack = ref(-1);\n  const isPictureInPicture = ref(false);\n  const muted = ref(false);\n  const supportsPictureInPicture = document && \"pictureInPictureEnabled\" in document;\n  const sourceErrorEvent = createEventHook();\n\n  const disableTrack = track => {\n    usingElRef(target, el => {\n      if (track) {\n        const id = isNumber(track) ? track : track.id;\n        el.textTracks[id].mode = \"disabled\";\n      } else {\n        for (let i = 0; i < el.textTracks.length; ++i) el.textTracks[i].mode = \"disabled\";\n      }\n\n      selectedTrack.value = -1;\n    });\n  };\n\n  const enableTrack = (track, disableTracks = true) => {\n    usingElRef(target, el => {\n      const id = isNumber(track) ? track : track.id;\n      if (disableTracks) disableTrack();\n      el.textTracks[id].mode = \"showing\";\n      selectedTrack.value = id;\n    });\n  };\n\n  const togglePictureInPicture = () => {\n    return new Promise((resolve, reject) => {\n      usingElRef(target, async el => {\n        if (supportsPictureInPicture) {\n          if (!isPictureInPicture.value) {\n            el.requestPictureInPicture().then(resolve).catch(reject);\n          } else {\n            document.exitPictureInPicture().then(resolve).catch(reject);\n          }\n        }\n      });\n    });\n  };\n\n  watchEffect(() => {\n    if (!document) return;\n    const el = unref(target);\n    if (!el) return;\n    const src = unref(options.src);\n    let sources = [];\n    if (!src) return;\n    if (isString(src)) sources = [{\n      src\n    }];else if (Array.isArray(src)) sources = src;else if (isObject(src)) sources = [src];\n    el.querySelectorAll(\"source\").forEach(e => {\n      e.removeEventListener(\"error\", sourceErrorEvent.trigger);\n      e.remove();\n    });\n    sources.forEach(({\n      src: src2,\n      type\n    }) => {\n      const source = document.createElement(\"source\");\n      source.setAttribute(\"src\", src2);\n      source.setAttribute(\"type\", type || \"\");\n      source.addEventListener(\"error\", sourceErrorEvent.trigger);\n      el.appendChild(source);\n    });\n    el.load();\n  });\n  tryOnScopeDispose(() => {\n    const el = unref(target);\n    if (!el) return;\n    el.querySelectorAll(\"source\").forEach(e => e.removeEventListener(\"error\", sourceErrorEvent.trigger));\n  });\n  watch(volume, vol => {\n    const el = unref(target);\n    if (!el) return;\n    el.volume = vol;\n  });\n  watch(muted, mute => {\n    const el = unref(target);\n    if (!el) return;\n    el.muted = mute;\n  });\n  watch(rate, rate2 => {\n    const el = unref(target);\n    if (!el) return;\n    el.playbackRate = rate2;\n  });\n  watchEffect(() => {\n    if (!document) return;\n    const textTracks = unref(options.tracks);\n    const el = unref(target);\n    if (!textTracks || !textTracks.length || !el) return;\n    el.querySelectorAll(\"track\").forEach(e => e.remove());\n    textTracks.forEach(({\n      default: isDefault,\n      kind,\n      label,\n      src,\n      srcLang\n    }, i) => {\n      const track = document.createElement(\"track\");\n      track.default = isDefault || false;\n      track.kind = kind;\n      track.label = label;\n      track.src = src;\n      track.srclang = srcLang;\n      if (track.default) selectedTrack.value = i;\n      el.appendChild(track);\n    });\n  });\n  const {\n    ignoreUpdates: ignoreCurrentTimeUpdates\n  } = watchIgnorable(currentTime, time => {\n    const el = unref(target);\n    if (!el) return;\n    el.currentTime = time;\n  });\n  const {\n    ignoreUpdates: ignorePlayingUpdates\n  } = watchIgnorable(playing, isPlaying => {\n    const el = unref(target);\n    if (!el) return;\n    isPlaying ? el.play() : el.pause();\n  });\n  useEventListener(target, \"timeupdate\", () => ignoreCurrentTimeUpdates(() => currentTime.value = unref(target).currentTime));\n  useEventListener(target, \"durationchange\", () => duration.value = unref(target).duration);\n  useEventListener(target, \"progress\", () => buffered.value = timeRangeToArray(unref(target).buffered));\n  useEventListener(target, \"seeking\", () => seeking.value = true);\n  useEventListener(target, \"seeked\", () => seeking.value = false);\n  useEventListener(target, \"waiting\", () => waiting.value = true);\n  useEventListener(target, \"playing\", () => waiting.value = false);\n  useEventListener(target, \"ratechange\", () => rate.value = unref(target).playbackRate);\n  useEventListener(target, \"stalled\", () => stalled.value = true);\n  useEventListener(target, \"ended\", () => ended.value = true);\n  useEventListener(target, \"pause\", () => ignorePlayingUpdates(() => playing.value = false));\n  useEventListener(target, \"play\", () => ignorePlayingUpdates(() => playing.value = true));\n  useEventListener(target, \"enterpictureinpicture\", () => isPictureInPicture.value = true);\n  useEventListener(target, \"leavepictureinpicture\", () => isPictureInPicture.value = false);\n  useEventListener(target, \"volumechange\", () => {\n    const el = unref(target);\n    if (!el) return;\n    volume.value = el.volume;\n    muted.value = el.muted;\n  });\n  const listeners = [];\n  const stop = watch([target], () => {\n    const el = unref(target);\n    if (!el) return;\n    stop();\n    listeners[0] = useEventListener(el.textTracks, \"addtrack\", () => tracks.value = tracksToArray(el.textTracks));\n    listeners[1] = useEventListener(el.textTracks, \"removetrack\", () => tracks.value = tracksToArray(el.textTracks));\n    listeners[2] = useEventListener(el.textTracks, \"change\", () => tracks.value = tracksToArray(el.textTracks));\n  });\n  tryOnScopeDispose(() => listeners.forEach(listener => listener()));\n  return {\n    currentTime,\n    duration,\n    waiting,\n    seeking,\n    ended,\n    stalled,\n    buffered,\n    playing,\n    rate,\n    volume,\n    muted,\n    tracks,\n    selectedTrack,\n    enableTrack,\n    disableTrack,\n    supportsPictureInPicture,\n    togglePictureInPicture,\n    isPictureInPicture,\n    onSourceError: sourceErrorEvent.on\n  };\n}\n\nconst getMapVue2Compat = () => {\n  const data = reactive({});\n  return {\n    get: key => data[key],\n    set: (key, value) => set(data, key, value),\n    has: key => Object.prototype.hasOwnProperty.call(data, key),\n    delete: key => del(data, key),\n    clear: () => {\n      Object.keys(data).forEach(key => {\n        del(data, key);\n      });\n    }\n  };\n};\n\nfunction useMemoize(resolver, options) {\n  const initCache = () => {\n    if (options == null ? void 0 : options.cache) return reactive(options.cache);\n    if (isVue2) return getMapVue2Compat();\n    return reactive(new Map());\n  };\n\n  const cache = initCache();\n\n  const generateKey = (...args) => (options == null ? void 0 : options.getKey) ? options.getKey(...args) : JSON.stringify(args);\n\n  const _loadData = (key, ...args) => {\n    cache.set(key, resolver(...args));\n    return cache.get(key);\n  };\n\n  const loadData = (...args) => _loadData(generateKey(...args), ...args);\n\n  const deleteData = (...args) => {\n    cache.delete(generateKey(...args));\n  };\n\n  const clearData = () => {\n    cache.clear();\n  };\n\n  const memoized = (...args) => {\n    const key = generateKey(...args);\n    if (cache.has(key)) return cache.get(key);\n    return _loadData(key, ...args);\n  };\n\n  memoized.load = loadData;\n  memoized.delete = deleteData;\n  memoized.clear = clearData;\n  memoized.generateKey = generateKey;\n  memoized.cache = cache;\n  return memoized;\n}\n\nfunction useMemory(options = {}) {\n  const memory = ref();\n  const isSupported = typeof performance !== \"undefined\" && \"memory\" in performance;\n\n  if (isSupported) {\n    const {\n      interval = 1e3\n    } = options;\n    useIntervalFn(() => {\n      memory.value = performance.memory;\n    }, interval, {\n      immediate: options.immediate,\n      immediateCallback: options.immediateCallback\n    });\n  }\n\n  return {\n    isSupported,\n    memory\n  };\n}\n\nfunction useMounted() {\n  const isMounted = ref(false);\n  onMounted(() => {\n    isMounted.value = true;\n  });\n  return isMounted;\n}\n\nfunction useMouse(options = {}) {\n  const {\n    type = \"page\",\n    touch = true,\n    resetOnTouchEnds = false,\n    initialValue = {\n      x: 0,\n      y: 0\n    },\n    window = defaultWindow,\n    eventFilter\n  } = options;\n  const x = ref(initialValue.x);\n  const y = ref(initialValue.y);\n  const sourceType = ref(null);\n\n  const mouseHandler = event => {\n    if (type === \"page\") {\n      x.value = event.pageX;\n      y.value = event.pageY;\n    } else if (type === \"client\") {\n      x.value = event.clientX;\n      y.value = event.clientY;\n    }\n\n    sourceType.value = \"mouse\";\n  };\n\n  const reset = () => {\n    x.value = initialValue.x;\n    y.value = initialValue.y;\n  };\n\n  const touchHandler = event => {\n    if (event.touches.length > 0) {\n      const touch2 = event.touches[0];\n\n      if (type === \"page\") {\n        x.value = touch2.pageX;\n        y.value = touch2.pageY;\n      } else if (type === \"client\") {\n        x.value = touch2.clientX;\n        y.value = touch2.clientY;\n      }\n\n      sourceType.value = \"touch\";\n    }\n  };\n\n  const mouseHandlerWrapper = event => {\n    return eventFilter === void 0 ? mouseHandler(event) : eventFilter(() => mouseHandler(event), {});\n  };\n\n  const touchHandlerWrapper = event => {\n    return eventFilter === void 0 ? touchHandler(event) : eventFilter(() => touchHandler(event), {});\n  };\n\n  if (window) {\n    useEventListener(window, \"mousemove\", mouseHandlerWrapper, {\n      passive: true\n    });\n    useEventListener(window, \"dragover\", mouseHandlerWrapper, {\n      passive: true\n    });\n\n    if (touch) {\n      useEventListener(window, \"touchstart\", touchHandlerWrapper, {\n        passive: true\n      });\n      useEventListener(window, \"touchmove\", touchHandlerWrapper, {\n        passive: true\n      });\n      if (resetOnTouchEnds) useEventListener(window, \"touchend\", reset, {\n        passive: true\n      });\n    }\n  }\n\n  return {\n    x,\n    y,\n    sourceType\n  };\n}\n\nfunction useMouseInElement(target, options = {}) {\n  const {\n    handleOutside = true,\n    window = defaultWindow\n  } = options;\n  const {\n    x,\n    y,\n    sourceType\n  } = useMouse(options);\n  const targetRef = ref(target != null ? target : window == null ? void 0 : window.document.body);\n  const elementX = ref(0);\n  const elementY = ref(0);\n  const elementPositionX = ref(0);\n  const elementPositionY = ref(0);\n  const elementHeight = ref(0);\n  const elementWidth = ref(0);\n  const isOutside = ref(true);\n\n  let stop = () => {};\n\n  if (window) {\n    stop = watch([targetRef, x, y], () => {\n      const el = unrefElement(targetRef);\n      if (!el) return;\n      const {\n        left,\n        top,\n        width,\n        height\n      } = el.getBoundingClientRect();\n      elementPositionX.value = left + window.pageXOffset;\n      elementPositionY.value = top + window.pageYOffset;\n      elementHeight.value = height;\n      elementWidth.value = width;\n      const elX = x.value - elementPositionX.value;\n      const elY = y.value - elementPositionY.value;\n      isOutside.value = width === 0 || height === 0 || elX < 0 || elY < 0 || elX > width || elY > height;\n\n      if (handleOutside || !isOutside.value) {\n        elementX.value = elX;\n        elementY.value = elY;\n      }\n    }, {\n      immediate: true\n    });\n  }\n\n  return {\n    x,\n    y,\n    sourceType,\n    elementX,\n    elementY,\n    elementPositionX,\n    elementPositionY,\n    elementHeight,\n    elementWidth,\n    isOutside,\n    stop\n  };\n}\n\nfunction useMousePressed(options = {}) {\n  const {\n    touch = true,\n    drag = true,\n    initialValue = false,\n    window = defaultWindow\n  } = options;\n  const pressed = ref(initialValue);\n  const sourceType = ref(null);\n\n  if (!window) {\n    return {\n      pressed,\n      sourceType\n    };\n  }\n\n  const onPressed = srcType => () => {\n    pressed.value = true;\n    sourceType.value = srcType;\n  };\n\n  const onReleased = () => {\n    pressed.value = false;\n    sourceType.value = null;\n  };\n\n  const target = computed(() => unrefElement(options.target) || window);\n  useEventListener(target, \"mousedown\", onPressed(\"mouse\"), {\n    passive: true\n  });\n  useEventListener(window, \"mouseleave\", onReleased, {\n    passive: true\n  });\n  useEventListener(window, \"mouseup\", onReleased, {\n    passive: true\n  });\n\n  if (drag) {\n    useEventListener(target, \"dragstart\", onPressed(\"mouse\"), {\n      passive: true\n    });\n    useEventListener(window, \"drop\", onReleased, {\n      passive: true\n    });\n    useEventListener(window, \"dragend\", onReleased, {\n      passive: true\n    });\n  }\n\n  if (touch) {\n    useEventListener(target, \"touchstart\", onPressed(\"touch\"), {\n      passive: true\n    });\n    useEventListener(window, \"touchend\", onReleased, {\n      passive: true\n    });\n    useEventListener(window, \"touchcancel\", onReleased, {\n      passive: true\n    });\n  }\n\n  return {\n    pressed,\n    sourceType\n  };\n}\n\nvar __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$6 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$6 = Object.prototype.propertyIsEnumerable;\n\nvar __objRest$1 = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp$6.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols$6) for (var prop of __getOwnPropSymbols$6(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum$6.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nfunction useMutationObserver(target, callback, options = {}) {\n  const _a = options,\n        {\n    window = defaultWindow\n  } = _a,\n        mutationOptions = __objRest$1(_a, [\"window\"]);\n\n  let observer;\n  const isSupported = window && \"MutationObserver\" in window;\n\n  const cleanup = () => {\n    if (observer) {\n      observer.disconnect();\n      observer = void 0;\n    }\n  };\n\n  const stopWatch = watch(() => unrefElement(target), el => {\n    cleanup();\n\n    if (isSupported && window && el) {\n      observer = new MutationObserver(callback);\n      observer.observe(el, mutationOptions);\n    }\n  }, {\n    immediate: true\n  });\n\n  const stop = () => {\n    cleanup();\n    stopWatch();\n  };\n\n  tryOnScopeDispose(stop);\n  return {\n    isSupported,\n    stop\n  };\n}\n\nconst useNavigatorLanguage = (options = {}) => {\n  const {\n    window = defaultWindow\n  } = options;\n  const navigator = window == null ? void 0 : window.navigator;\n  const isSupported = Boolean(navigator && \"language\" in navigator);\n  const language = ref(navigator == null ? void 0 : navigator.language);\n  useEventListener(window, \"languagechange\", () => {\n    if (navigator) language.value = navigator.language;\n  });\n  return {\n    isSupported,\n    language\n  };\n};\n\nfunction useNetwork(options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  const navigator = window == null ? void 0 : window.navigator;\n  const isSupported = Boolean(navigator && \"connection\" in navigator);\n  const isOnline = ref(true);\n  const saveData = ref(false);\n  const offlineAt = ref(void 0);\n  const onlineAt = ref(void 0);\n  const downlink = ref(void 0);\n  const downlinkMax = ref(void 0);\n  const rtt = ref(void 0);\n  const effectiveType = ref(void 0);\n  const type = ref(\"unknown\");\n  const connection = isSupported && navigator.connection;\n\n  function updateNetworkInformation() {\n    if (!navigator) return;\n    isOnline.value = navigator.onLine;\n    offlineAt.value = isOnline.value ? void 0 : Date.now();\n    onlineAt.value = isOnline.value ? Date.now() : void 0;\n\n    if (connection) {\n      downlink.value = connection.downlink;\n      downlinkMax.value = connection.downlinkMax;\n      effectiveType.value = connection.effectiveType;\n      rtt.value = connection.rtt;\n      saveData.value = connection.saveData;\n      type.value = connection.type;\n    }\n  }\n\n  if (window) {\n    useEventListener(window, \"offline\", () => {\n      isOnline.value = false;\n      offlineAt.value = Date.now();\n    });\n    useEventListener(window, \"online\", () => {\n      isOnline.value = true;\n      onlineAt.value = Date.now();\n    });\n  }\n\n  if (connection) useEventListener(connection, \"change\", updateNetworkInformation, false);\n  updateNetworkInformation();\n  return {\n    isSupported,\n    isOnline,\n    saveData,\n    offlineAt,\n    onlineAt,\n    downlink,\n    downlinkMax,\n    effectiveType,\n    rtt,\n    type\n  };\n}\n\nvar __defProp$5 = Object.defineProperty;\nvar __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$5 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$5 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$5 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$5.call(b, prop)) __defNormalProp$5(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$5) for (var prop of __getOwnPropSymbols$5(b)) {\n    if (__propIsEnum$5.call(b, prop)) __defNormalProp$5(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction useNow(options = {}) {\n  const {\n    controls: exposeControls = false,\n    interval = \"requestAnimationFrame\"\n  } = options;\n  const now = ref(new Date());\n\n  const update = () => now.value = new Date();\n\n  const controls = interval === \"requestAnimationFrame\" ? useRafFn(update, {\n    immediate: true\n  }) : useIntervalFn(update, interval, {\n    immediate: true\n  });\n\n  if (exposeControls) {\n    return __spreadValues$5({\n      now\n    }, controls);\n  } else {\n    return now;\n  }\n}\n\nfunction useObjectUrl(object) {\n  const url = ref();\n\n  const release = () => {\n    if (url.value) URL.revokeObjectURL(url.value);\n    url.value = void 0;\n  };\n\n  watch(() => unref(object), newObject => {\n    release();\n    if (newObject) url.value = URL.createObjectURL(newObject);\n  }, {\n    immediate: true\n  });\n  tryOnScopeDispose(release);\n  return readonly(url);\n}\n\nfunction useOffsetPagination(options) {\n  const {\n    total = Infinity,\n    pageSize = 10,\n    page = 1,\n    onPageChange = noop,\n    onPageSizeChange = noop,\n    onPageCountChange = noop\n  } = options;\n  const currentPageSize = useClamp(pageSize, 1, Infinity);\n  const pageCount = computed(() => Math.ceil(unref(total) / unref(currentPageSize)));\n  const currentPage = useClamp(page, 1, pageCount);\n  const isFirstPage = computed(() => currentPage.value === 1);\n  const isLastPage = computed(() => currentPage.value === pageCount.value);\n  if (isRef(page)) syncRef(page, currentPage);\n  if (isRef(pageSize)) syncRef(pageSize, currentPageSize);\n\n  function prev() {\n    currentPage.value--;\n  }\n\n  function next() {\n    currentPage.value++;\n  }\n\n  const returnValue = {\n    currentPage,\n    currentPageSize,\n    pageCount,\n    isFirstPage,\n    isLastPage,\n    prev,\n    next\n  };\n  watch(currentPage, () => {\n    onPageChange(reactive(returnValue));\n  });\n  watch(currentPageSize, () => {\n    onPageSizeChange(reactive(returnValue));\n  });\n  watch(pageCount, () => {\n    onPageCountChange(reactive(returnValue));\n  });\n  return returnValue;\n}\n\nfunction useOnline(options = {}) {\n  const {\n    isOnline\n  } = useNetwork(options);\n  return isOnline;\n}\n\nfunction usePageLeave(options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  const isLeft = ref(false);\n\n  const handler = event => {\n    if (!window) return;\n    event = event || window.event;\n    const from = event.relatedTarget || event.toElement;\n    isLeft.value = !from;\n  };\n\n  if (window) {\n    useEventListener(window, \"mouseout\", handler, {\n      passive: true\n    });\n    useEventListener(window.document, \"mouseleave\", handler, {\n      passive: true\n    });\n    useEventListener(window.document, \"mouseenter\", handler, {\n      passive: true\n    });\n  }\n\n  return isLeft;\n}\n\nfunction useParallax(target, options = {}) {\n  const {\n    deviceOrientationTiltAdjust = i => i,\n    deviceOrientationRollAdjust = i => i,\n    mouseTiltAdjust = i => i,\n    mouseRollAdjust = i => i,\n    window = defaultWindow\n  } = options;\n  const orientation = reactive(useDeviceOrientation({\n    window\n  }));\n  const {\n    elementX: x,\n    elementY: y,\n    elementWidth: width,\n    elementHeight: height\n  } = useMouseInElement(target, {\n    handleOutside: false,\n    window\n  });\n  const source = computed(() => {\n    if (orientation.isSupported && (orientation.alpha != null && orientation.alpha !== 0 || orientation.gamma != null && orientation.gamma !== 0)) return \"deviceOrientation\";\n    return \"mouse\";\n  });\n  const roll = computed(() => {\n    if (source.value === \"deviceOrientation\") {\n      const value = -orientation.beta / 90;\n      return deviceOrientationRollAdjust(value);\n    } else {\n      const value = -(y.value - height.value / 2) / height.value;\n      return mouseRollAdjust(value);\n    }\n  });\n  const tilt = computed(() => {\n    if (source.value === \"deviceOrientation\") {\n      const value = orientation.gamma / 90;\n      return deviceOrientationTiltAdjust(value);\n    } else {\n      const value = (x.value - width.value / 2) / width.value;\n      return mouseTiltAdjust(value);\n    }\n  });\n  return {\n    roll,\n    tilt,\n    source\n  };\n}\n\nvar __defProp$4 = Object.defineProperty;\nvar __defProps$1 = Object.defineProperties;\nvar __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$4 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$4 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$4 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$4.call(b, prop)) __defNormalProp$4(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$4) for (var prop of __getOwnPropSymbols$4(b)) {\n    if (__propIsEnum$4.call(b, prop)) __defNormalProp$4(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));\n\nconst defaultState = {\n  x: 0,\n  y: 0,\n  pointerId: 0,\n  pressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  width: 0,\n  height: 0,\n  twist: 0,\n  pointerType: null\n};\nconst keys = /* @__PURE__ */Object.keys(defaultState);\n\nfunction usePointer(options = {}) {\n  const {\n    target = defaultWindow\n  } = options;\n  const isInside = ref(false);\n  const state = ref(options.initialValue || {});\n  Object.assign(state.value, defaultState, state.value);\n\n  const handler = event => {\n    isInside.value = true;\n    if (options.pointerTypes && !options.pointerTypes.includes(event.pointerType)) return;\n    state.value = objectPick(event, keys, false);\n  };\n\n  if (target) {\n    useEventListener(target, \"pointerdown\", handler, {\n      passive: true\n    });\n    useEventListener(target, \"pointermove\", handler, {\n      passive: true\n    });\n    useEventListener(target, \"pointerleave\", () => isInside.value = false, {\n      passive: true\n    });\n  }\n\n  return __spreadProps$1(__spreadValues$4({}, toRefs(state)), {\n    isInside\n  });\n}\n\nvar SwipeDirection;\n\n(function (SwipeDirection2) {\n  SwipeDirection2[\"UP\"] = \"UP\";\n  SwipeDirection2[\"RIGHT\"] = \"RIGHT\";\n  SwipeDirection2[\"DOWN\"] = \"DOWN\";\n  SwipeDirection2[\"LEFT\"] = \"LEFT\";\n  SwipeDirection2[\"NONE\"] = \"NONE\";\n})(SwipeDirection || (SwipeDirection = {}));\n\nfunction useSwipe(target, options = {}) {\n  const {\n    threshold = 50,\n    onSwipe,\n    onSwipeEnd,\n    onSwipeStart,\n    passive = true,\n    window = defaultWindow\n  } = options;\n  const coordsStart = reactive({\n    x: 0,\n    y: 0\n  });\n  const coordsEnd = reactive({\n    x: 0,\n    y: 0\n  });\n  const diffX = computed(() => coordsStart.x - coordsEnd.x);\n  const diffY = computed(() => coordsStart.y - coordsEnd.y);\n  const {\n    max,\n    abs\n  } = Math;\n  const isThresholdExceeded = computed(() => max(abs(diffX.value), abs(diffY.value)) >= threshold);\n  const isSwiping = ref(false);\n  const direction = computed(() => {\n    if (!isThresholdExceeded.value) return SwipeDirection.NONE;\n\n    if (abs(diffX.value) > abs(diffY.value)) {\n      return diffX.value > 0 ? SwipeDirection.LEFT : SwipeDirection.RIGHT;\n    } else {\n      return diffY.value > 0 ? SwipeDirection.UP : SwipeDirection.DOWN;\n    }\n  });\n\n  const getTouchEventCoords = e => [e.touches[0].clientX, e.touches[0].clientY];\n\n  const updateCoordsStart = (x, y) => {\n    coordsStart.x = x;\n    coordsStart.y = y;\n  };\n\n  const updateCoordsEnd = (x, y) => {\n    coordsEnd.x = x;\n    coordsEnd.y = y;\n  };\n\n  let listenerOptions;\n  const isPassiveEventSupported = checkPassiveEventSupport(window == null ? void 0 : window.document);\n  if (!passive) listenerOptions = isPassiveEventSupported ? {\n    passive: false,\n    capture: true\n  } : {\n    capture: true\n  };else listenerOptions = isPassiveEventSupported ? {\n    passive: true\n  } : {\n    capture: false\n  };\n\n  const onTouchEnd = e => {\n    if (isSwiping.value) onSwipeEnd == null ? void 0 : onSwipeEnd(e, direction.value);\n    isSwiping.value = false;\n  };\n\n  const stops = [useEventListener(target, \"touchstart\", e => {\n    if (listenerOptions.capture && !listenerOptions.passive) e.preventDefault();\n    const [x, y] = getTouchEventCoords(e);\n    updateCoordsStart(x, y);\n    updateCoordsEnd(x, y);\n    onSwipeStart == null ? void 0 : onSwipeStart(e);\n  }, listenerOptions), useEventListener(target, \"touchmove\", e => {\n    const [x, y] = getTouchEventCoords(e);\n    updateCoordsEnd(x, y);\n    if (!isSwiping.value && isThresholdExceeded.value) isSwiping.value = true;\n    if (isSwiping.value) onSwipe == null ? void 0 : onSwipe(e);\n  }, listenerOptions), useEventListener(target, \"touchend\", onTouchEnd, listenerOptions), useEventListener(target, \"touchcancel\", onTouchEnd, listenerOptions)];\n\n  const stop = () => stops.forEach(s => s());\n\n  return {\n    isPassiveEventSupported,\n    isSwiping,\n    direction,\n    coordsStart,\n    coordsEnd,\n    lengthX: diffX,\n    lengthY: diffY,\n    stop\n  };\n}\n\nfunction checkPassiveEventSupport(document) {\n  if (!document) return false;\n  let supportsPassive = false;\n  const optionsBlock = {\n    get passive() {\n      supportsPassive = true;\n      return false;\n    }\n\n  };\n  document.addEventListener(\"x\", noop, optionsBlock);\n  document.removeEventListener(\"x\", noop);\n  return supportsPassive;\n}\n\nfunction usePointerSwipe(target, options = {}) {\n  const targetRef = ref(target);\n  const {\n    threshold = 50,\n    onSwipe,\n    onSwipeEnd,\n    onSwipeStart\n  } = options;\n  const posStart = reactive({\n    x: 0,\n    y: 0\n  });\n\n  const updatePosStart = (x, y) => {\n    posStart.x = x;\n    posStart.y = y;\n  };\n\n  const posEnd = reactive({\n    x: 0,\n    y: 0\n  });\n\n  const updatePosEnd = (x, y) => {\n    posEnd.x = x;\n    posEnd.y = y;\n  };\n\n  const distanceX = computed(() => posStart.x - posEnd.x);\n  const distanceY = computed(() => posStart.y - posEnd.y);\n  const {\n    max,\n    abs\n  } = Math;\n  const isThresholdExceeded = computed(() => max(abs(distanceX.value), abs(distanceY.value)) >= threshold);\n  const isSwiping = ref(false);\n  const isPointerDown = ref(false);\n  const direction = computed(() => {\n    if (!isThresholdExceeded.value) return SwipeDirection.NONE;\n\n    if (abs(distanceX.value) > abs(distanceY.value)) {\n      return distanceX.value > 0 ? SwipeDirection.LEFT : SwipeDirection.RIGHT;\n    } else {\n      return distanceY.value > 0 ? SwipeDirection.UP : SwipeDirection.DOWN;\n    }\n  });\n\n  const filterEvent = e => {\n    if (options.pointerTypes) return options.pointerTypes.includes(e.pointerType);\n    return true;\n  };\n\n  const stops = [useEventListener(target, \"pointerdown\", e => {\n    var _a, _b;\n\n    if (!filterEvent(e)) return;\n    isPointerDown.value = true;\n    (_b = (_a = targetRef.value) == null ? void 0 : _a.style) == null ? void 0 : _b.setProperty(\"touch-action\", \"none\");\n    const eventTarget = e.target;\n    eventTarget == null ? void 0 : eventTarget.setPointerCapture(e.pointerId);\n    const {\n      clientX: x,\n      clientY: y\n    } = e;\n    updatePosStart(x, y);\n    updatePosEnd(x, y);\n    onSwipeStart == null ? void 0 : onSwipeStart(e);\n  }), useEventListener(target, \"pointermove\", e => {\n    if (!filterEvent(e)) return;\n    if (!isPointerDown.value) return;\n    const {\n      clientX: x,\n      clientY: y\n    } = e;\n    updatePosEnd(x, y);\n    if (!isSwiping.value && isThresholdExceeded.value) isSwiping.value = true;\n    if (isSwiping.value) onSwipe == null ? void 0 : onSwipe(e);\n  }), useEventListener(target, \"pointerup\", e => {\n    var _a, _b;\n\n    if (!filterEvent(e)) return;\n    if (isSwiping.value) onSwipeEnd == null ? void 0 : onSwipeEnd(e, direction.value);\n    isPointerDown.value = false;\n    isSwiping.value = false;\n    (_b = (_a = targetRef.value) == null ? void 0 : _a.style) == null ? void 0 : _b.setProperty(\"touch-action\", \"initial\");\n  })];\n\n  const stop = () => stops.forEach(s => s());\n\n  return {\n    isSwiping: readonly(isSwiping),\n    direction: readonly(direction),\n    posStart: readonly(posStart),\n    posEnd: readonly(posEnd),\n    distanceX,\n    distanceY,\n    stop\n  };\n}\n\nfunction usePreferredColorScheme(options) {\n  const isLight = useMediaQuery(\"(prefers-color-scheme: light)\", options);\n  const isDark = useMediaQuery(\"(prefers-color-scheme: dark)\", options);\n  return computed(() => {\n    if (isDark.value) return \"dark\";\n    if (isLight.value) return \"light\";\n    return \"no-preference\";\n  });\n}\n\nfunction usePreferredLanguages(options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  if (!window) return ref([\"en\"]);\n  const navigator = window.navigator;\n  const value = ref(navigator.languages);\n  useEventListener(window, \"languagechange\", () => {\n    value.value = navigator.languages;\n  });\n  return value;\n}\n\nconst useScreenOrientation = (options = {}) => {\n  const {\n    window = defaultWindow\n  } = options;\n  const isSupported = !!(window && \"screen\" in window && \"orientation\" in window.screen);\n  const screenOrientation = isSupported ? window.screen.orientation : {};\n  const orientation = ref(screenOrientation.type);\n  const angle = ref(screenOrientation.angle || 0);\n\n  if (isSupported) {\n    useEventListener(window, \"orientationchange\", () => {\n      orientation.value = screenOrientation.type;\n      angle.value = screenOrientation.angle;\n    });\n  }\n\n  const lockOrientation = type => {\n    if (!isSupported) return Promise.reject(new Error(\"Not supported\"));\n    return screenOrientation.lock(type);\n  };\n\n  const unlockOrientation = () => {\n    if (isSupported) screenOrientation.unlock();\n  };\n\n  return {\n    isSupported,\n    orientation,\n    angle,\n    lockOrientation,\n    unlockOrientation\n  };\n};\n\nconst topVarName = \"--vueuse-safe-area-top\";\nconst rightVarName = \"--vueuse-safe-area-right\";\nconst bottomVarName = \"--vueuse-safe-area-bottom\";\nconst leftVarName = \"--vueuse-safe-area-left\";\n\nfunction useScreenSafeArea() {\n  const top = ref(\"\");\n  const right = ref(\"\");\n  const bottom = ref(\"\");\n  const left = ref(\"\");\n\n  if (isClient) {\n    const topCssVar = useCssVar(topVarName);\n    const rightCssVar = useCssVar(rightVarName);\n    const bottomCssVar = useCssVar(bottomVarName);\n    const leftCssVar = useCssVar(leftVarName);\n    topCssVar.value = \"env(safe-area-inset-top, 0px)\";\n    rightCssVar.value = \"env(safe-area-inset-right, 0px)\";\n    bottomCssVar.value = \"env(safe-area-inset-bottom, 0px)\";\n    leftCssVar.value = \"env(safe-area-inset-left, 0px)\";\n    update();\n    useEventListener(\"resize\", useDebounceFn(update));\n  }\n\n  function update() {\n    top.value = getValue(topVarName);\n    right.value = getValue(rightVarName);\n    bottom.value = getValue(bottomVarName);\n    left.value = getValue(leftVarName);\n  }\n\n  return {\n    top,\n    right,\n    bottom,\n    left,\n    update\n  };\n}\n\nfunction getValue(position) {\n  return getComputedStyle(document.documentElement).getPropertyValue(position);\n}\n\nfunction useScriptTag(src, onLoaded = noop, options = {}) {\n  const {\n    immediate = true,\n    manual = false,\n    type = \"text/javascript\",\n    async = true,\n    crossOrigin,\n    referrerPolicy,\n    noModule,\n    defer,\n    document = defaultDocument,\n    attrs = {}\n  } = options;\n  const scriptTag = ref(null);\n  let _promise = null;\n\n  const loadScript = waitForScriptLoad => new Promise((resolve, reject) => {\n    const resolveWithElement = el2 => {\n      scriptTag.value = el2;\n      resolve(el2);\n      return el2;\n    };\n\n    if (!document) {\n      resolve(false);\n      return;\n    }\n\n    let shouldAppend = false;\n    let el = document.querySelector(`script[src=\"${src}\"]`);\n\n    if (!el) {\n      el = document.createElement(\"script\");\n      el.type = type;\n      el.async = async;\n      el.src = unref(src);\n      if (defer) el.defer = defer;\n      if (crossOrigin) el.crossOrigin = crossOrigin;\n      if (noModule) el.noModule = noModule;\n      if (referrerPolicy) el.referrerPolicy = referrerPolicy;\n      Object.entries(attrs).forEach(([name, value]) => el == null ? void 0 : el.setAttribute(name, value));\n      shouldAppend = true;\n    } else if (el.hasAttribute(\"data-loaded\")) {\n      resolveWithElement(el);\n    }\n\n    el.addEventListener(\"error\", event => reject(event));\n    el.addEventListener(\"abort\", event => reject(event));\n    el.addEventListener(\"load\", () => {\n      el.setAttribute(\"data-loaded\", \"true\");\n      onLoaded(el);\n      resolveWithElement(el);\n    });\n    if (shouldAppend) el = document.head.appendChild(el);\n    if (!waitForScriptLoad) resolveWithElement(el);\n  });\n\n  const load = (waitForScriptLoad = true) => {\n    if (!_promise) _promise = loadScript(waitForScriptLoad);\n    return _promise;\n  };\n\n  const unload = () => {\n    if (!document) return;\n    _promise = null;\n    if (scriptTag.value) scriptTag.value = null;\n    const el = document.querySelector(`script[src=\"${src}\"]`);\n    if (el) document.head.removeChild(el);\n  };\n\n  if (immediate && !manual) tryOnMounted(load);\n  if (!manual) tryOnUnmounted(unload);\n  return {\n    scriptTag,\n    load,\n    unload\n  };\n}\n\nfunction preventDefault(rawEvent) {\n  const e = rawEvent || window.event;\n  if (e.touches.length > 1) return true;\n  if (e.preventDefault) e.preventDefault();\n  return false;\n}\n\nfunction useScrollLock(element, initialState = false) {\n  const isLocked = ref(initialState);\n  let stopTouchMoveListener = null;\n  let initialOverflow;\n  watch(() => unref(element), el => {\n    if (el) {\n      const ele = el;\n      initialOverflow = ele.style.overflow;\n      if (isLocked.value) ele.style.overflow = \"hidden\";\n    }\n  }, {\n    immediate: true\n  });\n\n  const lock = () => {\n    const ele = unref(element);\n    if (!ele || isLocked.value) return;\n\n    if (isIOS) {\n      stopTouchMoveListener = useEventListener(ele, \"touchmove\", preventDefault, {\n        passive: false\n      });\n    }\n\n    ele.style.overflow = \"hidden\";\n    isLocked.value = true;\n  };\n\n  const unlock = () => {\n    const ele = unref(element);\n    if (!ele || !isLocked.value) return;\n    isIOS && (stopTouchMoveListener == null ? void 0 : stopTouchMoveListener());\n    ele.style.overflow = initialOverflow;\n    isLocked.value = false;\n  };\n\n  tryOnScopeDispose(unlock);\n  return computed({\n    get() {\n      return isLocked.value;\n    },\n\n    set(v) {\n      if (v) lock();else unlock();\n    }\n\n  });\n}\n\nfunction useSessionStorage(key, initialValue, options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  return useStorage(key, initialValue, window == null ? void 0 : window.sessionStorage, options);\n}\n\nvar __defProp$3 = Object.defineProperty;\nvar __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$3 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$3 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$3 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$3.call(b, prop)) __defNormalProp$3(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$3) for (var prop of __getOwnPropSymbols$3(b)) {\n    if (__propIsEnum$3.call(b, prop)) __defNormalProp$3(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction useShare(shareOptions = {}, options = {}) {\n  const {\n    navigator = defaultNavigator\n  } = options;\n  const _navigator = navigator;\n  const isSupported = _navigator && \"canShare\" in _navigator;\n\n  const share = async (overrideOptions = {}) => {\n    if (isSupported) {\n      const data = __spreadValues$3(__spreadValues$3({}, unref(shareOptions)), unref(overrideOptions));\n\n      let granted = true;\n      if (data.files && _navigator.canShare) granted = _navigator.canShare({\n        files: data.files\n      });\n      if (granted) return _navigator.share(data);\n    }\n  };\n\n  return {\n    isSupported,\n    share\n  };\n}\n\nfunction useSpeechRecognition(options = {}) {\n  const {\n    interimResults = true,\n    continuous = true,\n    window = defaultWindow\n  } = options;\n  const lang = ref(options.lang || \"en-US\");\n  const isListening = ref(false);\n  const isFinal = ref(false);\n  const result = ref(\"\");\n  const error = shallowRef(void 0);\n\n  const toggle = (value = !isListening.value) => {\n    isListening.value = value;\n  };\n\n  const start = () => {\n    isListening.value = true;\n  };\n\n  const stop = () => {\n    isListening.value = false;\n  };\n\n  const SpeechRecognition = window && (window.SpeechRecognition || window.webkitSpeechRecognition);\n  const isSupported = Boolean(SpeechRecognition);\n  let recognition;\n\n  if (isSupported) {\n    recognition = new SpeechRecognition();\n    recognition.continuous = continuous;\n    recognition.interimResults = interimResults;\n    recognition.lang = unref(lang);\n\n    recognition.onstart = () => {\n      isFinal.value = false;\n    };\n\n    watch(lang, lang2 => {\n      if (recognition && !isListening.value) recognition.lang = lang2;\n    });\n\n    recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result2 => {\n        isFinal.value = result2.isFinal;\n        return result2[0];\n      }).map(result2 => result2.transcript).join(\"\");\n      result.value = transcript;\n      error.value = void 0;\n    };\n\n    recognition.onerror = event => {\n      error.value = event;\n    };\n\n    recognition.onend = () => {\n      isListening.value = false;\n      recognition.lang = unref(lang);\n    };\n\n    watch(isListening, () => {\n      if (isListening.value) recognition.start();else recognition.stop();\n    });\n  }\n\n  tryOnScopeDispose(() => {\n    isListening.value = false;\n  });\n  return {\n    isSupported,\n    isListening,\n    isFinal,\n    recognition,\n    result,\n    error,\n    toggle,\n    start,\n    stop\n  };\n}\n\nfunction useSpeechSynthesis(text, options = {}) {\n  var _a, _b;\n\n  const {\n    pitch = 1,\n    rate = 1,\n    volume = 1,\n    window = defaultWindow\n  } = options;\n  const synth = window && window.speechSynthesis;\n  const isSupported = Boolean(synth);\n  const isPlaying = ref(false);\n  const status = ref(\"init\");\n  const voiceInfo = {\n    lang: ((_a = options.voice) == null ? void 0 : _a.lang) || \"default\",\n    name: ((_b = options.voice) == null ? void 0 : _b.name) || \"\"\n  };\n  const spokenText = ref(text || \"\");\n  const lang = ref(options.lang || \"en-US\");\n  const error = shallowRef(void 0);\n\n  const toggle = (value = !isPlaying.value) => {\n    isPlaying.value = value;\n  };\n\n  const bindEventsForUtterance = utterance2 => {\n    utterance2.lang = unref(lang);\n    options.voice && (utterance2.voice = options.voice);\n    utterance2.pitch = pitch;\n    utterance2.rate = rate;\n    utterance2.volume = volume;\n\n    utterance2.onstart = () => {\n      isPlaying.value = true;\n      status.value = \"play\";\n    };\n\n    utterance2.onpause = () => {\n      isPlaying.value = false;\n      status.value = \"pause\";\n    };\n\n    utterance2.onresume = () => {\n      isPlaying.value = true;\n      status.value = \"play\";\n    };\n\n    utterance2.onend = () => {\n      isPlaying.value = false;\n      status.value = \"end\";\n    };\n\n    utterance2.onerror = event => {\n      error.value = event;\n    };\n\n    utterance2.onend = () => {\n      isPlaying.value = false;\n      utterance2.lang = unref(lang);\n    };\n  };\n\n  const utterance = computed(() => {\n    isPlaying.value = false;\n    status.value = \"init\";\n    const newUtterance = new SpeechSynthesisUtterance(spokenText.value);\n    bindEventsForUtterance(newUtterance);\n    return newUtterance;\n  });\n\n  const speak = () => {\n    synth.cancel();\n    utterance && synth.speak(utterance.value);\n  };\n\n  if (isSupported) {\n    bindEventsForUtterance(utterance.value);\n    watch(lang, lang2 => {\n      if (utterance.value && !isPlaying.value) utterance.value.lang = lang2;\n    });\n    watch(isPlaying, () => {\n      if (isPlaying.value) synth.resume();else synth.pause();\n    });\n  }\n\n  tryOnScopeDispose(() => {\n    isPlaying.value = false;\n  });\n  return {\n    isSupported,\n    isPlaying,\n    status,\n    voiceInfo,\n    utterance,\n    error,\n    toggle,\n    speak\n  };\n}\n\nfunction useStepper(steps, initialStep) {\n  const stepsRef = ref(steps);\n  const stepNames = computed(() => Array.isArray(stepsRef.value) ? stepsRef.value : Object.keys(stepsRef.value));\n  const index = ref(stepNames.value.indexOf(initialStep != null ? initialStep : stepNames.value[0]));\n  const current = computed(() => at(index.value));\n  const isFirst = computed(() => index.value === 0);\n  const isLast = computed(() => index.value === stepNames.value.length - 1);\n  const next = computed(() => stepNames.value[index.value + 1]);\n  const previous = computed(() => stepNames.value[index.value - 1]);\n\n  function at(index2) {\n    if (Array.isArray(stepsRef.value)) return stepsRef.value[index2];\n    return stepsRef.value[stepNames.value[index2]];\n  }\n\n  function get(step) {\n    if (!stepNames.value.includes(step)) return;\n    return at(stepNames.value.indexOf(step));\n  }\n\n  function goTo(step) {\n    if (stepNames.value.includes(step)) index.value = stepNames.value.indexOf(step);\n  }\n\n  function goToNext() {\n    if (isLast.value) return;\n    index.value++;\n  }\n\n  function goToPrevious() {\n    if (isFirst.value) return;\n    index.value--;\n  }\n\n  function goBackTo(step) {\n    if (isAfter(step)) goTo(step);\n  }\n\n  function isNext(step) {\n    return stepNames.value.indexOf(step) === index.value + 1;\n  }\n\n  function isPrevious(step) {\n    return stepNames.value.indexOf(step) === index.value - 1;\n  }\n\n  function isCurrent(step) {\n    return stepNames.value.indexOf(step) === index.value;\n  }\n\n  function isBefore(step) {\n    return index.value < stepNames.value.indexOf(step);\n  }\n\n  function isAfter(step) {\n    return index.value > stepNames.value.indexOf(step);\n  }\n\n  return {\n    steps: stepsRef,\n    stepNames,\n    index,\n    current,\n    next,\n    previous,\n    isFirst,\n    isLast,\n    at,\n    get,\n    goTo,\n    goToNext,\n    goToPrevious,\n    goBackTo,\n    isNext,\n    isPrevious,\n    isCurrent,\n    isBefore,\n    isAfter\n  };\n}\n\nfunction useStorageAsync(key, initialValue, storage, options = {}) {\n  var _a;\n\n  const {\n    flush = \"pre\",\n    deep = true,\n    listenToStorageChanges = true,\n    writeDefaults = true,\n    shallow,\n    window = defaultWindow,\n    eventFilter,\n    onError = e => {\n      console.error(e);\n    }\n  } = options;\n  const rawInit = unref(initialValue);\n  const type = guessSerializerType(rawInit);\n  const data = (shallow ? shallowRef : ref)(initialValue);\n  const serializer = (_a = options.serializer) != null ? _a : StorageSerializers[type];\n\n  if (!storage) {\n    try {\n      storage = getSSRHandler(\"getDefaultStorage\", () => {\n        var _a2;\n\n        return (_a2 = defaultWindow) == null ? void 0 : _a2.localStorage;\n      })();\n    } catch (e) {\n      onError(e);\n    }\n  }\n\n  async function read(event) {\n    if (!storage || event && event.key !== key) return;\n\n    try {\n      const rawValue = event ? event.newValue : await storage.getItem(key);\n\n      if (rawValue == null) {\n        data.value = rawInit;\n        if (writeDefaults && rawInit !== null) await storage.setItem(key, await serializer.write(rawInit));\n      } else {\n        data.value = await serializer.read(rawValue);\n      }\n    } catch (e) {\n      onError(e);\n    }\n  }\n\n  read();\n  if (window && listenToStorageChanges) useEventListener(window, \"storage\", e => setTimeout(() => read(e), 0));\n\n  if (storage) {\n    watchWithFilter(data, async () => {\n      try {\n        if (data.value == null) await storage.removeItem(key);else await storage.setItem(key, await serializer.write(data.value));\n      } catch (e) {\n        onError(e);\n      }\n    }, {\n      flush,\n      deep,\n      eventFilter\n    });\n  }\n\n  return data;\n}\n\nlet _id = 0;\n\nfunction useStyleTag(css, options = {}) {\n  const isLoaded = ref(false);\n  const {\n    document = defaultDocument,\n    immediate = true,\n    manual = false,\n    id = `vueuse_styletag_${++_id}`\n  } = options;\n  const cssRef = ref(css);\n\n  let stop = () => {};\n\n  const load = () => {\n    if (!document) return;\n    const el = document.getElementById(id) || document.createElement(\"style\");\n    el.type = \"text/css\";\n    el.id = id;\n    if (options.media) el.media = options.media;\n    document.head.appendChild(el);\n    if (isLoaded.value) return;\n    stop = watch(cssRef, value => {\n      el.innerText = value;\n    }, {\n      immediate: true\n    });\n    isLoaded.value = true;\n  };\n\n  const unload = () => {\n    if (!document || !isLoaded.value) return;\n    stop();\n    document.head.removeChild(document.getElementById(id));\n    isLoaded.value = false;\n  };\n\n  if (immediate && !manual) tryOnMounted(load);\n  if (!manual) tryOnScopeDispose(unload);\n  return {\n    id,\n    css: cssRef,\n    unload,\n    load,\n    isLoaded: readonly(isLoaded)\n  };\n}\n\nfunction useTemplateRefsList() {\n  const refs = ref([]);\n\n  refs.value.set = el => {\n    if (el) refs.value.push(el);\n  };\n\n  onBeforeUpdate(() => {\n    refs.value.length = 0;\n  });\n  return refs;\n}\n\nfunction getRangesFromSelection(selection) {\n  var _a;\n\n  const rangeCount = (_a = selection.rangeCount) != null ? _a : 0;\n  const ranges = new Array(rangeCount);\n\n  for (let i = 0; i < rangeCount; i++) {\n    const range = selection.getRangeAt(i);\n    ranges[i] = range;\n  }\n\n  return ranges;\n}\n\nfunction useTextSelection(options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  const selection = ref(null);\n  const text = computed(() => {\n    var _a, _b;\n\n    return (_b = (_a = selection.value) == null ? void 0 : _a.toString()) != null ? _b : \"\";\n  });\n  const ranges = computed(() => selection.value ? getRangesFromSelection(selection.value) : []);\n  const rects = computed(() => ranges.value.map(range => range.getBoundingClientRect()));\n\n  function onSelectionChange() {\n    selection.value = null;\n    if (window) selection.value = window.getSelection();\n  }\n\n  if (window) useEventListener(window.document, \"selectionchange\", onSelectionChange);\n  return {\n    text,\n    rects,\n    ranges,\n    selection\n  };\n}\n\nfunction useTextareaAutosize(options) {\n  const textarea = ref(options == null ? void 0 : options.element);\n  const input = ref(options == null ? void 0 : options.input);\n\n  function triggerResize() {\n    var _a, _b;\n\n    if (!textarea.value) return;\n    textarea.value.style.height = \"1px\";\n    textarea.value.style.height = `${(_a = textarea.value) == null ? void 0 : _a.scrollHeight}px`;\n    (_b = options == null ? void 0 : options.onResize) == null ? void 0 : _b.call(options);\n  }\n\n  watch([input, textarea], triggerResize, {\n    immediate: true\n  });\n  if (options == null ? void 0 : options.watch) watch(options.watch, triggerResize, {\n    immediate: true,\n    deep: true\n  });\n  return {\n    textarea,\n    input,\n    triggerResize\n  };\n}\n\nvar __defProp$2 = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$2.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)) {\n    if (__propIsEnum$2.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction useThrottledRefHistory(source, options = {}) {\n  const {\n    throttle = 200,\n    trailing = true\n  } = options;\n  const filter = throttleFilter(throttle, trailing);\n  const history = useRefHistory(source, __spreadProps(__spreadValues$2({}, options), {\n    eventFilter: filter\n  }));\n  return __spreadValues$2({}, history);\n}\n\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) {\n    if (__propIsEnum$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp$1.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum$1.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nconst UNITS = [{\n  max: 6e4,\n  value: 1e3,\n  name: \"second\"\n}, {\n  max: 276e4,\n  value: 6e4,\n  name: \"minute\"\n}, {\n  max: 72e6,\n  value: 36e5,\n  name: \"hour\"\n}, {\n  max: 5184e5,\n  value: 864e5,\n  name: \"day\"\n}, {\n  max: 24192e5,\n  value: 6048e5,\n  name: \"week\"\n}, {\n  max: 28512e6,\n  value: 2592e6,\n  name: \"month\"\n}, {\n  max: Infinity,\n  value: 31536e6,\n  name: \"year\"\n}];\nconst DEFAULT_MESSAGES = {\n  justNow: \"just now\",\n  past: n => n.match(/\\d/) ? `${n} ago` : n,\n  future: n => n.match(/\\d/) ? `in ${n}` : n,\n  month: (n, past) => n === 1 ? past ? \"last month\" : \"next month\" : `${n} month${n > 1 ? \"s\" : \"\"}`,\n  year: (n, past) => n === 1 ? past ? \"last year\" : \"next year\" : `${n} year${n > 1 ? \"s\" : \"\"}`,\n  day: (n, past) => n === 1 ? past ? \"yesterday\" : \"tomorrow\" : `${n} day${n > 1 ? \"s\" : \"\"}`,\n  week: (n, past) => n === 1 ? past ? \"last week\" : \"next week\" : `${n} week${n > 1 ? \"s\" : \"\"}`,\n  hour: n => `${n} hour${n > 1 ? \"s\" : \"\"}`,\n  minute: n => `${n} minute${n > 1 ? \"s\" : \"\"}`,\n  second: n => `${n} second${n > 1 ? \"s\" : \"\"}`\n};\n\nconst DEFAULT_FORMATTER = date => date.toISOString().slice(0, 10);\n\nfunction useTimeAgo(time, options = {}) {\n  const {\n    controls: exposeControls = false,\n    max,\n    updateInterval = 3e4,\n    messages = DEFAULT_MESSAGES,\n    fullDateFormatter = DEFAULT_FORMATTER\n  } = options;\n  const {\n    abs,\n    round\n  } = Math;\n\n  const _a = useNow({\n    interval: updateInterval,\n    controls: true\n  }),\n        {\n    now\n  } = _a,\n        controls = __objRest(_a, [\"now\"]);\n\n  function getTimeago(from, now2) {\n    var _a2;\n\n    const diff = +now2 - +from;\n    const absDiff = abs(diff);\n    if (absDiff < 6e4) return messages.justNow;\n    if (typeof max === \"number\" && absDiff > max) return fullDateFormatter(new Date(from));\n\n    if (typeof max === \"string\") {\n      const unitMax = (_a2 = UNITS.find(i => i.name === max)) == null ? void 0 : _a2.max;\n      if (unitMax && absDiff > unitMax) return fullDateFormatter(new Date(from));\n    }\n\n    for (const unit of UNITS) {\n      if (absDiff < unit.max) return format(diff, unit);\n    }\n  }\n\n  function applyFormat(name, val, isPast) {\n    const formatter = messages[name];\n    if (typeof formatter === \"function\") return formatter(val, isPast);\n    return formatter.replace(\"{0}\", val.toString());\n  }\n\n  function format(diff, unit) {\n    const val = round(abs(diff) / unit.value);\n    const past = diff > 0;\n    const str = applyFormat(unit.name, val, past);\n    return applyFormat(past ? \"past\" : \"future\", str, past);\n  }\n\n  const timeAgo = computed(() => getTimeago(new Date(unref(time)), unref(now.value)));\n\n  if (exposeControls) {\n    return __spreadValues$1({\n      timeAgo\n    }, controls);\n  } else {\n    return timeAgo;\n  }\n}\n\nfunction useTimeoutPoll(fn, interval, timeoutPollOptions) {\n  const {\n    start\n  } = useTimeoutFn(loop, interval);\n  const isActive = ref(false);\n\n  async function loop() {\n    if (!isActive.value) return;\n    await fn();\n    start();\n  }\n\n  function resume() {\n    if (!isActive.value) {\n      isActive.value = true;\n      loop();\n    }\n  }\n\n  function pause() {\n    isActive.value = false;\n  }\n\n  if (timeoutPollOptions == null ? void 0 : timeoutPollOptions.immediate) resume();\n  tryOnScopeDispose(pause);\n  return {\n    isActive,\n    pause,\n    resume\n  };\n}\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction useTimestamp(options = {}) {\n  const {\n    controls: exposeControls = false,\n    offset = 0,\n    immediate = true,\n    interval = \"requestAnimationFrame\"\n  } = options;\n  const ts = ref(timestamp() + offset);\n\n  const update = () => ts.value = timestamp() + offset;\n\n  const controls = interval === \"requestAnimationFrame\" ? useRafFn(update, {\n    immediate\n  }) : useIntervalFn(update, interval, {\n    immediate\n  });\n\n  if (exposeControls) {\n    return __spreadValues({\n      timestamp: ts\n    }, controls);\n  } else {\n    return ts;\n  }\n}\n\nfunction useTitle(newTitle = null, options = {}) {\n  var _a, _b;\n\n  const {\n    document = defaultDocument,\n    observe = false,\n    titleTemplate = \"%s\"\n  } = options;\n  const title = ref((_a = newTitle != null ? newTitle : document == null ? void 0 : document.title) != null ? _a : null);\n  watch(title, (t, o) => {\n    if (isString(t) && t !== o && document) document.title = titleTemplate.replace(\"%s\", t);\n  }, {\n    immediate: true\n  });\n\n  if (observe && document) {\n    useMutationObserver((_b = document.head) == null ? void 0 : _b.querySelector(\"title\"), () => {\n      if (document && document.title !== title.value) title.value = titleTemplate.replace(\"%s\", document.title);\n    }, {\n      childList: true\n    });\n  }\n\n  return title;\n}\n\nconst TransitionPresets = {\n  linear: identity,\n  easeInSine: [0.12, 0, 0.39, 0],\n  easeOutSine: [0.61, 1, 0.88, 1],\n  easeInOutSine: [0.37, 0, 0.63, 1],\n  easeInQuad: [0.11, 0, 0.5, 0],\n  easeOutQuad: [0.5, 1, 0.89, 1],\n  easeInOutQuad: [0.45, 0, 0.55, 1],\n  easeInCubic: [0.32, 0, 0.67, 0],\n  easeOutCubic: [0.33, 1, 0.68, 1],\n  easeInOutCubic: [0.65, 0, 0.35, 1],\n  easeInQuart: [0.5, 0, 0.75, 0],\n  easeOutQuart: [0.25, 1, 0.5, 1],\n  easeInOutQuart: [0.76, 0, 0.24, 1],\n  easeInQuint: [0.64, 0, 0.78, 0],\n  easeOutQuint: [0.22, 1, 0.36, 1],\n  easeInOutQuint: [0.83, 0, 0.17, 1],\n  easeInExpo: [0.7, 0, 0.84, 0],\n  easeOutExpo: [0.16, 1, 0.3, 1],\n  easeInOutExpo: [0.87, 0, 0.13, 1],\n  easeInCirc: [0.55, 0, 1, 0.45],\n  easeOutCirc: [0, 0.55, 0.45, 1],\n  easeInOutCirc: [0.85, 0, 0.15, 1],\n  easeInBack: [0.36, 0, 0.66, -0.56],\n  easeOutBack: [0.34, 1.56, 0.64, 1],\n  easeInOutBack: [0.68, -0.6, 0.32, 1.6]\n};\n\nfunction createEasingFunction([p0, p1, p2, p3]) {\n  const a = (a1, a2) => 1 - 3 * a2 + 3 * a1;\n\n  const b = (a1, a2) => 3 * a2 - 6 * a1;\n\n  const c = a1 => 3 * a1;\n\n  const calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n\n  const getSlope = (t, a1, a2) => 3 * a(a1, a2) * t * t + 2 * b(a1, a2) * t + c(a1);\n\n  const getTforX = x => {\n    let aGuessT = x;\n\n    for (let i = 0; i < 4; ++i) {\n      const currentSlope = getSlope(aGuessT, p0, p2);\n      if (currentSlope === 0) return aGuessT;\n      const currentX = calcBezier(aGuessT, p0, p2) - x;\n      aGuessT -= currentX / currentSlope;\n    }\n\n    return aGuessT;\n  };\n\n  return x => p0 === p1 && p2 === p3 ? x : calcBezier(getTforX(x), p1, p3);\n}\n\nfunction useTransition(source, options = {}) {\n  const {\n    delay = 0,\n    disabled = false,\n    duration = 1e3,\n    onFinished = noop,\n    onStarted = noop,\n    transition = identity\n  } = options;\n  const currentTransition = computed(() => {\n    const t = unref(transition);\n    return isFunction(t) ? t : createEasingFunction(t);\n  });\n  const sourceValue = computed(() => {\n    const s = unref(source);\n    return isNumber(s) ? s : s.map(unref);\n  });\n  const sourceVector = computed(() => isNumber(sourceValue.value) ? [sourceValue.value] : sourceValue.value);\n  const outputVector = ref(sourceVector.value.slice(0));\n  let currentDuration;\n  let diffVector;\n  let endAt;\n  let startAt;\n  let startVector;\n  const {\n    resume,\n    pause\n  } = useRafFn(() => {\n    const now = Date.now();\n    const progress = clamp(1 - (endAt - now) / currentDuration, 0, 1);\n    outputVector.value = startVector.map((val, i) => {\n      var _a;\n\n      return val + ((_a = diffVector[i]) != null ? _a : 0) * currentTransition.value(progress);\n    });\n\n    if (progress >= 1) {\n      pause();\n      onFinished();\n    }\n  }, {\n    immediate: false\n  });\n\n  const start = () => {\n    pause();\n    currentDuration = unref(duration);\n    diffVector = outputVector.value.map((n, i) => {\n      var _a, _b;\n\n      return ((_a = sourceVector.value[i]) != null ? _a : 0) - ((_b = outputVector.value[i]) != null ? _b : 0);\n    });\n    startVector = outputVector.value.slice(0);\n    startAt = Date.now();\n    endAt = startAt + currentDuration;\n    resume();\n    onStarted();\n  };\n\n  const timeout = useTimeoutFn(start, delay, {\n    immediate: false\n  });\n  watch(sourceVector, () => {\n    if (unref(disabled)) {\n      outputVector.value = sourceVector.value.slice(0);\n    } else {\n      if (unref(delay) <= 0) start();else timeout.start();\n    }\n  }, {\n    deep: true\n  });\n  return computed(() => {\n    const targetVector = unref(disabled) ? sourceVector : outputVector;\n    return isNumber(sourceValue.value) ? targetVector.value[0] : targetVector.value;\n  });\n}\n\nfunction useUrlSearchParams(mode = \"history\", options = {}) {\n  const {\n    initialValue = {},\n    removeNullishValues = true,\n    removeFalsyValues = false,\n    window = defaultWindow\n  } = options;\n  if (!window) return reactive(initialValue);\n  const state = reactive({});\n\n  function getRawParams() {\n    if (mode === \"history\") {\n      return window.location.search || \"\";\n    } else if (mode === \"hash\") {\n      const hash = window.location.hash || \"\";\n      const index = hash.indexOf(\"?\");\n      return index > 0 ? hash.slice(index) : \"\";\n    } else {\n      return (window.location.hash || \"\").replace(/^#/, \"\");\n    }\n  }\n\n  function constructQuery(params) {\n    const stringified = params.toString();\n    if (mode === \"history\") return `${stringified ? `?${stringified}` : \"\"}${location.hash || \"\"}`;\n    if (mode === \"hash-params\") return `${location.search || \"\"}${stringified ? `#${stringified}` : \"\"}`;\n    const hash = window.location.hash || \"#\";\n    const index = hash.indexOf(\"?\");\n    if (index > 0) return `${hash.slice(0, index)}${stringified ? `?${stringified}` : \"\"}`;\n    return `${hash}${stringified ? `?${stringified}` : \"\"}`;\n  }\n\n  function read() {\n    return new URLSearchParams(getRawParams());\n  }\n\n  function updateState(params) {\n    const unusedKeys = new Set(Object.keys(state));\n\n    for (const key of params.keys()) {\n      const paramsForKey = params.getAll(key);\n      state[key] = paramsForKey.length > 1 ? paramsForKey : params.get(key) || \"\";\n      unusedKeys.delete(key);\n    }\n\n    Array.from(unusedKeys).forEach(key => delete state[key]);\n  }\n\n  const {\n    pause,\n    resume\n  } = pausableWatch(state, () => {\n    const params = new URLSearchParams(\"\");\n    Object.keys(state).forEach(key => {\n      const mapEntry = state[key];\n      if (Array.isArray(mapEntry)) mapEntry.forEach(value => params.append(key, value));else if (removeNullishValues && mapEntry == null) params.delete(key);else if (removeFalsyValues && !mapEntry) params.delete(key);else params.set(key, mapEntry);\n    });\n    write(params);\n  }, {\n    deep: true\n  });\n\n  function write(params, shouldUpdate) {\n    pause();\n    if (shouldUpdate) updateState(params);\n    window.history.replaceState(window.history.state, window.document.title, window.location.pathname + constructQuery(params));\n    resume();\n  }\n\n  function onChanged() {\n    write(read(), true);\n  }\n\n  useEventListener(window, \"popstate\", onChanged, false);\n  if (mode !== \"history\") useEventListener(window, \"hashchange\", onChanged, false);\n  const initial = read();\n  if (initial.keys().next().value) updateState(initial);else Object.assign(state, initialValue);\n  return state;\n}\n\nfunction useUserMedia(options = {}) {\n  var _a, _b, _c;\n\n  const enabled = ref((_a = options.enabled) != null ? _a : false);\n  const autoSwitch = ref((_b = options.autoSwitch) != null ? _b : true);\n  const videoDeviceId = ref(options.videoDeviceId);\n  const audioDeviceId = ref(options.audioDeviceId);\n  const {\n    navigator = defaultNavigator\n  } = options;\n  const isSupported = Boolean((_c = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _c.getUserMedia);\n  const stream = shallowRef();\n\n  function getDeviceOptions(device) {\n    if (device.value === \"none\" || device.value === false) return false;\n    if (device.value == null) return true;\n    return {\n      deviceId: device.value\n    };\n  }\n\n  async function _start() {\n    if (!isSupported || stream.value) return;\n    stream.value = await navigator.mediaDevices.getUserMedia({\n      video: getDeviceOptions(videoDeviceId),\n      audio: getDeviceOptions(audioDeviceId)\n    });\n    return stream.value;\n  }\n\n  async function _stop() {\n    var _a2;\n\n    (_a2 = stream.value) == null ? void 0 : _a2.getTracks().forEach(t => t.stop());\n    stream.value = void 0;\n  }\n\n  function stop() {\n    _stop();\n\n    enabled.value = false;\n  }\n\n  async function start() {\n    await _start();\n    if (stream.value) enabled.value = true;\n    return stream.value;\n  }\n\n  async function restart() {\n    _stop();\n\n    return await start();\n  }\n\n  watch(enabled, v => {\n    if (v) _start();else _stop();\n  }, {\n    immediate: true\n  });\n  watch([videoDeviceId, audioDeviceId], () => {\n    if (autoSwitch.value && stream.value) restart();\n  }, {\n    immediate: true\n  });\n  return {\n    isSupported,\n    stream,\n    start,\n    stop,\n    restart,\n    videoDeviceId,\n    audioDeviceId,\n    enabled,\n    autoSwitch\n  };\n}\n\nfunction useVModel(props, key, emit, options = {}) {\n  var _a, _b, _c, _d, _e;\n\n  const {\n    passive = false,\n    eventName,\n    deep = false,\n    defaultValue\n  } = options;\n  const vm = getCurrentInstance();\n\n  const _emit = emit || (vm == null ? void 0 : vm.emit) || ((_a = vm == null ? void 0 : vm.$emit) == null ? void 0 : _a.bind(vm)) || ((_c = (_b = vm == null ? void 0 : vm.proxy) == null ? void 0 : _b.$emit) == null ? void 0 : _c.bind(vm == null ? void 0 : vm.proxy));\n\n  let event = eventName;\n\n  if (!key) {\n    if (isVue2) {\n      const modelOptions = (_e = (_d = vm == null ? void 0 : vm.proxy) == null ? void 0 : _d.$options) == null ? void 0 : _e.model;\n      key = (modelOptions == null ? void 0 : modelOptions.value) || \"value\";\n      if (!eventName) event = (modelOptions == null ? void 0 : modelOptions.event) || \"input\";\n    } else {\n      key = \"modelValue\";\n    }\n  }\n\n  event = eventName || event || `update:${key.toString()}`;\n\n  const getValue = () => isDef(props[key]) ? props[key] : defaultValue;\n\n  if (passive) {\n    const proxy = ref(getValue());\n    watch(() => props[key], v => proxy.value = v);\n    watch(proxy, v => {\n      if (v !== props[key] || deep) _emit(event, v);\n    }, {\n      deep\n    });\n    return proxy;\n  } else {\n    return computed({\n      get() {\n        return getValue();\n      },\n\n      set(value) {\n        _emit(event, value);\n      }\n\n    });\n  }\n}\n\nfunction useVModels(props, emit, options = {}) {\n  const ret = {};\n\n  for (const key in props) ret[key] = useVModel(props, key, emit, options);\n\n  return ret;\n}\n\nfunction useVibrate(options) {\n  const {\n    pattern = [],\n    interval = 0,\n    navigator = defaultNavigator\n  } = options || {};\n  const isSupported = typeof navigator !== \"undefined\" && \"vibrate\" in navigator;\n  const patternRef = ref(pattern);\n  let intervalControls;\n\n  const vibrate = (pattern2 = patternRef.value) => {\n    if (isSupported) navigator.vibrate(pattern2);\n  };\n\n  const stop = () => {\n    if (isSupported) navigator.vibrate(0);\n    intervalControls == null ? void 0 : intervalControls.pause();\n  };\n\n  if (interval > 0) {\n    intervalControls = useIntervalFn(vibrate, interval, {\n      immediate: false,\n      immediateCallback: false\n    });\n  }\n\n  return {\n    isSupported,\n    pattern,\n    intervalControls,\n    vibrate,\n    stop\n  };\n}\n\nfunction useVirtualList(list, options) {\n  const containerRef = ref();\n  const size = useElementSize(containerRef);\n  const currentList = ref([]);\n  const source = shallowRef(list);\n  const state = ref({\n    start: 0,\n    end: 10\n  });\n  const {\n    itemHeight,\n    overscan = 5\n  } = options;\n\n  const getViewCapacity = containerHeight => {\n    if (typeof itemHeight === \"number\") return Math.ceil(containerHeight / itemHeight);\n    const {\n      start = 0\n    } = state.value;\n    let sum = 0;\n    let capacity = 0;\n\n    for (let i = start; i < source.value.length; i++) {\n      const height = itemHeight(i);\n      sum += height;\n\n      if (sum >= containerHeight) {\n        capacity = i;\n        break;\n      }\n    }\n\n    return capacity - start;\n  };\n\n  const getOffset = scrollTop => {\n    if (typeof itemHeight === \"number\") return Math.floor(scrollTop / itemHeight) + 1;\n    let sum = 0;\n    let offset = 0;\n\n    for (let i = 0; i < source.value.length; i++) {\n      const height = itemHeight(i);\n      sum += height;\n\n      if (sum >= scrollTop) {\n        offset = i;\n        break;\n      }\n    }\n\n    return offset + 1;\n  };\n\n  const calculateRange = () => {\n    const element = containerRef.value;\n\n    if (element) {\n      const offset = getOffset(element.scrollTop);\n      const viewCapacity = getViewCapacity(element.clientHeight);\n      const from = offset - overscan;\n      const to = offset + viewCapacity + overscan;\n      state.value = {\n        start: from < 0 ? 0 : from,\n        end: to > source.value.length ? source.value.length : to\n      };\n      currentList.value = source.value.slice(state.value.start, state.value.end).map((ele, index) => ({\n        data: ele,\n        index: index + state.value.start\n      }));\n    }\n  };\n\n  watch([size.width, size.height, list], () => {\n    calculateRange();\n  });\n  const totalHeight = computed(() => {\n    if (typeof itemHeight === \"number\") return source.value.length * itemHeight;\n    return source.value.reduce((sum, _, index) => sum + itemHeight(index), 0);\n  });\n\n  const getDistanceTop = index => {\n    if (typeof itemHeight === \"number\") {\n      const height2 = index * itemHeight;\n      return height2;\n    }\n\n    const height = source.value.slice(0, index).reduce((sum, _, i) => sum + itemHeight(i), 0);\n    return height;\n  };\n\n  const scrollTo = index => {\n    if (containerRef.value) {\n      containerRef.value.scrollTop = getDistanceTop(index);\n      calculateRange();\n    }\n  };\n\n  const offsetTop = computed(() => getDistanceTop(state.value.start));\n  const wrapperProps = computed(() => {\n    return {\n      style: {\n        width: \"100%\",\n        height: `${totalHeight.value - offsetTop.value}px`,\n        marginTop: `${offsetTop.value}px`\n      }\n    };\n  });\n  const containerStyle = {\n    overflowY: \"auto\"\n  };\n  return {\n    list: currentList,\n    scrollTo,\n    containerProps: {\n      ref: containerRef,\n      onScroll: () => {\n        calculateRange();\n      },\n      style: containerStyle\n    },\n    wrapperProps\n  };\n}\n\nconst useWakeLock = (options = {}) => {\n  const {\n    navigator = defaultNavigator,\n    document = defaultDocument\n  } = options;\n  let wakeLock;\n  const isSupported = navigator && \"wakeLock\" in navigator;\n  const isActive = ref(false);\n\n  async function onVisibilityChange() {\n    if (!isSupported || !wakeLock) return;\n    if (document && document.visibilityState === \"visible\") wakeLock = await navigator.wakeLock.request(\"screen\");\n    isActive.value = !wakeLock.released;\n  }\n\n  if (document) useEventListener(document, \"visibilitychange\", onVisibilityChange, {\n    passive: true\n  });\n\n  async function request(type) {\n    if (!isSupported) return;\n    wakeLock = await navigator.wakeLock.request(type);\n    isActive.value = !wakeLock.released;\n  }\n\n  async function release() {\n    if (!isSupported || !wakeLock) return;\n    await wakeLock.release();\n    isActive.value = !wakeLock.released;\n    wakeLock = null;\n  }\n\n  return {\n    isSupported,\n    isActive,\n    request,\n    release\n  };\n};\n\nconst useWebNotification = (defaultOptions = {}) => {\n  const {\n    window = defaultWindow\n  } = defaultOptions;\n  const isSupported = !!window && \"Notification\" in window;\n  const notification = ref(null);\n\n  const requestPermission = async () => {\n    if (!isSupported) return;\n    if (\"permission\" in Notification && Notification.permission !== \"denied\") await Notification.requestPermission();\n  };\n\n  const onClick = createEventHook();\n  const onShow = createEventHook();\n  const onError = createEventHook();\n  const onClose = createEventHook();\n\n  const show = async overrides => {\n    if (!isSupported) return;\n    await requestPermission();\n    const options = Object.assign({}, defaultOptions, overrides);\n    notification.value = new Notification(options.title || \"\", options);\n\n    notification.value.onclick = event => onClick.trigger(event);\n\n    notification.value.onshow = event => onShow.trigger(event);\n\n    notification.value.onerror = event => onError.trigger(event);\n\n    notification.value.onclose = event => onClose.trigger(event);\n\n    return notification.value;\n  };\n\n  const close = () => {\n    if (notification.value) notification.value.close();\n    notification.value = null;\n  };\n\n  tryOnMounted(async () => {\n    if (isSupported) await requestPermission();\n  });\n  tryOnScopeDispose(close);\n\n  if (isSupported && window) {\n    const document = window.document;\n    useEventListener(document, \"visibilitychange\", e => {\n      e.preventDefault();\n\n      if (document.visibilityState === \"visible\") {\n        close();\n      }\n    });\n  }\n\n  return {\n    isSupported,\n    notification,\n    show,\n    close,\n    onClick,\n    onShow,\n    onError,\n    onClose\n  };\n};\n\nfunction resolveNestedOptions(options) {\n  if (options === true) return {};\n  return options;\n}\n\nfunction useWebSocket(url, options = {}) {\n  const {\n    onConnected,\n    onDisconnected,\n    onError,\n    onMessage,\n    immediate = true,\n    autoClose = true,\n    protocols = []\n  } = options;\n  const data = ref(null);\n  const status = ref(\"CONNECTING\");\n  const wsRef = ref();\n  let heartbeatPause;\n  let heartbeatResume;\n  let explicitlyClosed = false;\n  let retried = 0;\n  let bufferedData = [];\n\n  const close = (code = 1e3, reason) => {\n    if (!wsRef.value) return;\n    explicitlyClosed = true;\n    heartbeatPause == null ? void 0 : heartbeatPause();\n    wsRef.value.close(code, reason);\n  };\n\n  const _sendBuffer = () => {\n    if (bufferedData.length && wsRef.value && status.value === \"OPEN\") {\n      for (const buffer of bufferedData) wsRef.value.send(buffer);\n\n      bufferedData = [];\n    }\n  };\n\n  const send = (data2, useBuffer = true) => {\n    if (!wsRef.value || status.value !== \"OPEN\") {\n      if (useBuffer) bufferedData.push(data2);\n      return false;\n    }\n\n    _sendBuffer();\n\n    wsRef.value.send(data2);\n    return true;\n  };\n\n  const _init = () => {\n    const ws = new WebSocket(url, protocols);\n    wsRef.value = ws;\n    status.value = \"CONNECTING\";\n    explicitlyClosed = false;\n\n    ws.onopen = () => {\n      status.value = \"OPEN\";\n      onConnected == null ? void 0 : onConnected(ws);\n      heartbeatResume == null ? void 0 : heartbeatResume();\n\n      _sendBuffer();\n    };\n\n    ws.onclose = ev => {\n      status.value = \"CLOSED\";\n      wsRef.value = void 0;\n      onDisconnected == null ? void 0 : onDisconnected(ws, ev);\n\n      if (!explicitlyClosed && options.autoReconnect) {\n        const {\n          retries = -1,\n          delay = 1e3,\n          onFailed\n        } = resolveNestedOptions(options.autoReconnect);\n        retried += 1;\n        if (typeof retries === \"number\" && (retries < 0 || retried < retries)) setTimeout(_init, delay);else if (typeof retries === \"function\" && retries()) setTimeout(_init, delay);else onFailed == null ? void 0 : onFailed();\n      }\n    };\n\n    ws.onerror = e => {\n      onError == null ? void 0 : onError(ws, e);\n    };\n\n    ws.onmessage = e => {\n      data.value = e.data;\n      onMessage == null ? void 0 : onMessage(ws, e);\n    };\n  };\n\n  if (options.heartbeat) {\n    const {\n      message = \"ping\",\n      interval = 1e3\n    } = resolveNestedOptions(options.heartbeat);\n    const {\n      pause,\n      resume\n    } = useIntervalFn(() => send(message, false), interval, {\n      immediate: false\n    });\n    heartbeatPause = pause;\n    heartbeatResume = resume;\n  }\n\n  if (immediate) _init();\n\n  if (autoClose) {\n    useEventListener(window, \"beforeunload\", () => close());\n    tryOnScopeDispose(close);\n  }\n\n  const open = () => {\n    close();\n    retried = 0;\n\n    _init();\n  };\n\n  return {\n    data,\n    status,\n    close,\n    send,\n    open,\n    ws: wsRef\n  };\n}\n\nfunction useWebWorker(url, workerOptions, options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  const data = ref(null);\n  const worker = shallowRef();\n\n  const post = function post2(val) {\n    if (!worker.value) return;\n    worker.value.postMessage(val);\n  };\n\n  const terminate = function terminate2() {\n    if (!worker.value) return;\n    worker.value.terminate();\n  };\n\n  if (window) {\n    worker.value = new Worker(url, workerOptions);\n\n    worker.value.onmessage = e => {\n      data.value = e.data;\n    };\n\n    tryOnScopeDispose(() => {\n      if (worker.value) worker.value.terminate();\n    });\n  }\n\n  return {\n    data,\n    post,\n    terminate,\n    worker\n  };\n}\n\nconst jobRunner = userFunc => e => {\n  const userFuncArgs = e.data[0];\n  return Promise.resolve(userFunc.apply(void 0, userFuncArgs)).then(result => {\n    postMessage([\"SUCCESS\", result]);\n  }).catch(error => {\n    postMessage([\"ERROR\", error]);\n  });\n};\n\nconst depsParser = deps => {\n  if (deps.length === 0) return \"\";\n  const depsString = deps.map(dep => `'${dep}'`).toString();\n  return `importScripts(${depsString})`;\n};\n\nconst createWorkerBlobUrl = (fn, deps) => {\n  const blobCode = `${depsParser(deps)}; onmessage=(${jobRunner})(${fn})`;\n  const blob = new Blob([blobCode], {\n    type: \"text/javascript\"\n  });\n  const url = URL.createObjectURL(blob);\n  return url;\n};\n\nconst useWebWorkerFn = (fn, options = {}) => {\n  const {\n    dependencies = [],\n    timeout,\n    window = defaultWindow\n  } = options;\n  const worker = ref();\n  const workerStatus = ref(\"PENDING\");\n  const promise = ref({});\n  const timeoutId = ref();\n\n  const workerTerminate = (status = \"PENDING\") => {\n    if (worker.value && worker.value._url && window) {\n      worker.value.terminate();\n      URL.revokeObjectURL(worker.value._url);\n      promise.value = {};\n      worker.value = void 0;\n      window.clearTimeout(timeoutId.value);\n      workerStatus.value = status;\n    }\n  };\n\n  workerTerminate();\n  tryOnScopeDispose(workerTerminate);\n\n  const generateWorker = () => {\n    const blobUrl = createWorkerBlobUrl(fn, dependencies);\n    const newWorker = new Worker(blobUrl);\n    newWorker._url = blobUrl;\n\n    newWorker.onmessage = e => {\n      const {\n        resolve = () => {},\n        reject = () => {}\n      } = promise.value;\n      const [status, result] = e.data;\n\n      switch (status) {\n        case \"SUCCESS\":\n          resolve(result);\n          workerTerminate(status);\n          break;\n\n        default:\n          reject(result);\n          workerTerminate(\"ERROR\");\n          break;\n      }\n    };\n\n    newWorker.onerror = e => {\n      const {\n        reject = () => {}\n      } = promise.value;\n      reject(e);\n      workerTerminate(\"ERROR\");\n    };\n\n    if (timeout) {\n      timeoutId.value = setTimeout(() => workerTerminate(\"TIMEOUT_EXPIRED\"), timeout);\n    }\n\n    return newWorker;\n  };\n\n  const callWorker = (...fnArgs) => new Promise((resolve, reject) => {\n    promise.value = {\n      resolve,\n      reject\n    };\n    worker.value && worker.value.postMessage([[...fnArgs]]);\n    workerStatus.value = \"RUNNING\";\n  });\n\n  const workerFn = (...fnArgs) => {\n    if (workerStatus.value === \"RUNNING\") {\n      console.error(\"[useWebWorkerFn] You can only run one instance of the worker at a time.\");\n      return Promise.reject();\n    }\n\n    worker.value = generateWorker();\n    return callWorker(...fnArgs);\n  };\n\n  return {\n    workerFn,\n    workerStatus,\n    workerTerminate\n  };\n};\n\nfunction useWindowFocus({\n  window = defaultWindow\n} = {}) {\n  if (!window) return ref(false);\n  const focused = ref(window.document.hasFocus());\n  useEventListener(window, \"blur\", () => {\n    focused.value = false;\n  });\n  useEventListener(window, \"focus\", () => {\n    focused.value = true;\n  });\n  return focused;\n}\n\nfunction useWindowScroll({\n  window = defaultWindow\n} = {}) {\n  if (!window) {\n    return {\n      x: ref(0),\n      y: ref(0)\n    };\n  }\n\n  const x = ref(window.pageXOffset);\n  const y = ref(window.pageYOffset);\n  useEventListener(\"scroll\", () => {\n    x.value = window.pageXOffset;\n    y.value = window.pageYOffset;\n  }, {\n    capture: false,\n    passive: true\n  });\n  return {\n    x,\n    y\n  };\n}\n\nfunction useWindowSize(options = {}) {\n  const {\n    window = defaultWindow,\n    initialWidth = Infinity,\n    initialHeight = Infinity,\n    listenOrientation = true\n  } = options;\n  const width = ref(initialWidth);\n  const height = ref(initialHeight);\n\n  const update = () => {\n    if (window) {\n      width.value = window.innerWidth;\n      height.value = window.innerHeight;\n    }\n  };\n\n  update();\n  tryOnMounted(update);\n  useEventListener(\"resize\", update, {\n    passive: true\n  });\n  if (listenOrientation) useEventListener(\"orientationchange\", update, {\n    passive: true\n  });\n  return {\n    width,\n    height\n  };\n}\n\nexport { DefaultMagicKeysAliasMap, StorageSerializers, SwipeDirection, TransitionPresets, computedAsync as asyncComputed, breakpointsAntDesign, breakpointsBootstrapV5, breakpointsQuasar, breakpointsSematic, breakpointsTailwind, breakpointsVuetify, computedAsync, computedInject, createFetch, createUnrefFn, defaultDocument, defaultLocation, defaultNavigator, defaultWindow, getSSRHandler, mapGamepadToXbox360Controller, onClickOutside, onKeyDown, onKeyPressed, onKeyStroke, onKeyUp, onLongPress, onStartTyping, setSSRHandler, templateRef, unrefElement, useActiveElement, useAsyncQueue, useAsyncState, useBase64, useBattery, useBluetooth, useBreakpoints, useBroadcastChannel, useBrowserLocation, useCached, useClamp, useClipboard, useColorMode, useConfirmDialog, useCssVar, useCurrentElement, useCycleList, useDark, useDebouncedRefHistory, useDeviceMotion, useDeviceOrientation, useDevicePixelRatio, useDevicesList, useDisplayMedia, useDocumentVisibility, useDraggable, useDropZone, useElementBounding, useElementByPoint, useElementHover, useElementSize, useElementVisibility, useEventBus, useEventListener, useEventSource, useEyeDropper, useFavicon, useFetch, useFileDialog, useFileSystemAccess, useFocus, useFocusWithin, useFps, useFullscreen, useGamepad, useGeolocation, useIdle, useImage, useInfiniteScroll, useIntersectionObserver, useKeyModifier, useLocalStorage, useMagicKeys, useManualRefHistory, useMediaControls, useMediaQuery, useMemoize, useMemory, useMounted, useMouse, useMouseInElement, useMousePressed, useMutationObserver, useNavigatorLanguage, useNetwork, useNow, useObjectUrl, useOffsetPagination, useOnline, usePageLeave, useParallax, usePermission, usePointer, usePointerSwipe, usePreferredColorScheme, usePreferredDark, usePreferredLanguages, useRafFn, useRefHistory, useResizeObserver, useScreenOrientation, useScreenSafeArea, useScriptTag, useScroll, useScrollLock, useSessionStorage, useShare, useSpeechRecognition, useSpeechSynthesis, useStepper, useStorage, useStorageAsync, useStyleTag, useSwipe, useTemplateRefsList, useTextSelection, useTextareaAutosize, useThrottledRefHistory, useTimeAgo, useTimeoutPoll, useTimestamp, useTitle, useTransition, useUrlSearchParams, useUserMedia, useVModel, useVModels, useVibrate, useVirtualList, useWakeLock, useWebNotification, useWebSocket, useWebWorker, useWebWorkerFn, useWindowFocus, useWindowScroll, useWindowSize };","map":null,"metadata":{},"sourceType":"module"}