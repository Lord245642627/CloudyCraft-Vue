{"ast":null,"code":"import { defineComponent, getCurrentInstance, shallowRef, ref, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElColorAlphaSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance();\n    const thumb = shallowRef(null);\n    const bar = shallowRef(null);\n    const thumbLeft = ref(0);\n    const thumbTop = ref(0);\n    const background = ref(null);\n    watch(() => props.color.get(\"alpha\"), () => {\n      update();\n    });\n    watch(() => props.color.value, () => {\n      update();\n    });\n\n    function getThumbLeft() {\n      if (props.vertical) return 0;\n      const el = instance.vnode.el;\n      const alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      const alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);\n    }\n\n    function getBackground() {\n      if (props.color && props.color.value) {\n        const {\n          r,\n          g,\n          b\n        } = props.color.toRgb();\n        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`;\n      }\n\n      return null;\n    }\n\n    function handleClick(event) {\n      const target = event.target;\n\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n\n      if (!props.vertical) {\n        let left = clientX - rect.left;\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        props.color.set(\"alpha\", Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));\n      } else {\n        let top = clientY - rect.top;\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        props.color.set(\"alpha\", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));\n      }\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n      background.value = getBackground();\n    }\n\n    onMounted(() => {\n      const dragConfig = {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      thumb,\n      bar,\n      thumbLeft,\n      thumbTop,\n      background,\n      handleClick,\n      update\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-color-alpha-slider\", {\n      \"is-vertical\": _ctx.vertical\n    }])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    class: \"el-color-alpha-slider__bar\",\n    style: normalizeStyle({\n      background: _ctx.background\n    }),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, null, 4), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    class: \"el-color-alpha-slider__thumb\",\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 4)], 2);\n}\n\nvar AlphaSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/alpha-slider.vue\"]]);\n\nexport { AlphaSlider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","vertical","default","setup","instance","getCurrentInstance","shallowRef","ref","watch","get","update","value","vnode","el","alpha","round","offsetWidth","thumb","offsetHeight","r","g","b","toRgb","event","target","handleDrag","getBoundingClientRect","clientX","clientY","getClientXY","rect","left","Math","max","min","width","set","top","height","thumbLeft","getThumbLeft","thumbTop","getThumbTop","background","getBackground","onMounted","dragConfig","drag","end","draggable","bar","handleClick","_createElementBlock","class","_ctx","_createElementVNode","style","onClick","_cache"],"sources":["../../../../../../../packages/components/color-picker/src/components/alpha-slider.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-alpha-slider\" :class=\"{ 'is-vertical': vertical }\">\n    <div\n      ref=\"bar\"\n      class=\"el-color-alpha-slider__bar\"\n      :style=\"{\n        background,\n      }\"\n      @click=\"handleClick\"\n    />\n    <div\n      ref=\"thumb\"\n      class=\"el-color-alpha-slider__thumb\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  onMounted,\n  ref,\n  shallowRef,\n  watch,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElColorAlphaSlider',\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = shallowRef<Nullable<HTMLElement>>(null)\n    const bar = shallowRef<Nullable<HTMLElement>>(null)\n\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    const background = ref<Nullable<string>>(null)\n\n    watch(\n      () => props.color.get('alpha'),\n      () => {\n        update()\n      }\n    )\n    watch(\n      () => props.color.value,\n      () => {\n        update()\n      }\n    )\n\n    //methods\n    function getThumbLeft() {\n      if (props.vertical) return 0\n      const el = instance.vnode.el\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 100\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el\n      if (!props.vertical) return 0\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 100\n      )\n    }\n\n    function getBackground() {\n      if (props.color && props.color.value) {\n        const { r, g, b } = props.color.toRgb()\n        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`\n      }\n      return null\n    }\n\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((left - thumb.value.offsetWidth / 2) /\n              (rect.width - thumb.value.offsetWidth)) *\n              100\n          )\n        )\n      } else {\n        let top = clientY - rect.top\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((top - thumb.value.offsetHeight / 2) /\n              (rect.height - thumb.value.offsetHeight)) *\n              100\n          )\n        )\n      }\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n      background.value = getBackground()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      thumb,\n      bar,\n      thumbLeft,\n      thumbTop,\n      background,\n      handleClick,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}