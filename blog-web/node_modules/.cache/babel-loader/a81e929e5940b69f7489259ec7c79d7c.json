{"ast":null,"code":"import Mermaid from \"mermaid\"; // Define interface to await readiness of import\n\nexport default function mermaid(md, options) {\n  // Setup Mermaid\n  Mermaid.initialize(Object.assign({\n    securityLevel: \"loose\"\n  }, options));\n\n  function getLangName(info) {\n    return info.split(/\\s+/g)[0];\n  } // Store reference to original renderer.\n\n\n  let defaultFenceRenderer = md.renderer.rules.fence; // Render custom code types as SVGs, letting the fence parser do all the heavy lifting.\n\n  function customFenceRenderer(tokens, idx, options, env, slf) {\n    let token = tokens[idx];\n    let info = token.info.trim();\n    let langName = info ? getLangName(info) : \"\";\n\n    if ([\"mermaid\", \"{mermaid}\"].indexOf(langName) === -1) {\n      if (defaultFenceRenderer !== undefined) {\n        return defaultFenceRenderer(tokens, idx, options, env, slf);\n      } // Missing fence renderer!\n\n\n      return \"\";\n    }\n\n    let imageHTML = \"\";\n    let imageAttrs = []; // Create element to render into\n\n    const element = document.createElement(\"div\");\n    document.body.appendChild(element); // Render with Mermaid\n\n    try {\n      const container_id = \"mermaid-container\";\n      Mermaid.mermaidAPI.render(container_id, token.content, html => {\n        // We need to forcibly extract the max-width/height attributes to set on img tag\n        let svg = document.getElementById(container_id);\n\n        if (svg !== null) {\n          imageAttrs.push([\"style\", `max-width:${svg.style.maxWidth};max-height:${svg.style.maxHeight}`]);\n        } // Store HTML\n\n\n        imageHTML = html;\n      }, element);\n    } catch (e) {\n      return `<div class=\"alert alert-danger\">${e}</div>`;\n    } finally {\n      element.remove();\n    } // Store encoded image data\n\n\n    imageAttrs.push([\"src\", `data:image/svg+xml,${encodeURIComponent(imageHTML)}`]);\n    return `<img ${slf.renderAttrs({\n      attrs: imageAttrs\n    })}>`;\n  }\n\n  md.renderer.rules.fence = customFenceRenderer;\n}","map":null,"metadata":{},"sourceType":"module"}