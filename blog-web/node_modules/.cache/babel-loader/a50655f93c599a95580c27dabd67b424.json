{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, toRef, computed, reactive, onMounted, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, renderSlot, createElementVNode, Fragment } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport useMenu from './use-menu.mjs';\nimport { menuItemProps, menuItemEmits } from './menu-item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { Effect } from '../../popper/src/popper.mjs';\nconst COMPONENT_NAME = \"ElMenuItem\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip\n  },\n  props: menuItemProps,\n  emits: menuItemEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const instance = getCurrentInstance();\n    const rootMenu = inject(\"rootMenu\");\n    const nsMenu = useNamespace(\"menu\");\n    const nsMenuItem = useNamespace(\"menu-item\");\n    if (!rootMenu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const {\n      parentMenu,\n      indexPath\n    } = useMenu(instance, toRef(props, \"index\"));\n    const subMenu = inject(`subMenu:${parentMenu.value.uid}`);\n    if (!subMenu) throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    const active = computed(() => props.index === rootMenu.activeIndex);\n    const item = reactive({\n      index: props.index,\n      indexPath,\n      active\n    });\n\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route\n        });\n        emit(\"click\", item);\n      }\n    };\n\n    onMounted(() => {\n      subMenu.addSubMenu(item);\n      rootMenu.addMenuItem(item);\n    });\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeMenuItem(item);\n    });\n    return {\n      Effect,\n      parentMenu,\n      rootMenu,\n      active,\n      nsMenu,\n      nsMenuItem,\n      handleClick\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  return openBlock(), createElementBlock(\"li\", {\n    class: normalizeClass([_ctx.nsMenuItem.b(), _ctx.nsMenuItem.is(\"active\", _ctx.active), _ctx.nsMenuItem.is(\"disabled\", _ctx.disabled)]),\n    role: \"menuitem\",\n    tabindex: \"-1\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, [_ctx.parentMenu.type.name === \"ElMenu\" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? (openBlock(), createBlock(_component_el_tooltip, {\n    key: 0,\n    effect: _ctx.Effect.DARK,\n    placement: \"right\",\n    \"fallback-placements\": [\"left\"],\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [renderSlot(_ctx.$slots, \"title\")]),\n    default: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.nsMenu.be(\"tooltip\", \"trigger\"))\n    }, [renderSlot(_ctx.$slots, \"default\")], 2)]),\n    _: 3\n  }, 8, [\"effect\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [renderSlot(_ctx.$slots, \"default\"), renderSlot(_ctx.$slots, \"title\")], 64))], 2);\n}\n\nvar MenuItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue\"]]);\n\nexport { MenuItem as default };","map":null,"metadata":{},"sourceType":"module"}