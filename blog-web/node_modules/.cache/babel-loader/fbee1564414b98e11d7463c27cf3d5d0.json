{"ast":null,"code":"import { defineComponent, getCurrentInstance, useAttrs, useSlots, computed, shallowRef, ref, nextTick, watch, onMounted, onUpdated, toRef, withDirectives, openBlock, createElementBlock, mergeProps, unref, createCommentVNode, Fragment, normalizeClass, renderSlot, createElementVNode, createBlock, withCtx, resolveDynamicComponent, withModifiers, createVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { useResizeObserver, isClient } from '@vueuse/core';\nimport { isNil } from 'lodash-unified';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { View, Hide, CircleClose } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport { calcTextareaHeight } from './utils.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs as useAttrs$1 } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useCursor } from '../../../hooks/use-cursor/index.mjs';\nimport { isObject, NOOP } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst _hoisted_1 = [\"role\"];\nconst _hoisted_2 = [\"id\", \"type\", \"disabled\", \"formatter\", \"parser\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\"];\nconst _hoisted_3 = [\"id\", \"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\"];\nconst __default__ = {\n  name: \"ElInput\",\n  inheritAttrs: false\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: inputProps,\n  emits: inputEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const PENDANT_MAP = {\n      suffix: \"append\",\n      prefix: \"prepend\"\n    };\n    const instance = getCurrentInstance();\n    const rawAttrs = useAttrs();\n    const slots = useSlots();\n    const containerAttrs = computed(() => {\n      const comboBoxAttrs = {};\n\n      if (props.containerRole === \"combobox\") {\n        comboBoxAttrs[\"aria-haspopup\"] = rawAttrs[\"aria-haspopup\"];\n        comboBoxAttrs[\"aria-owns\"] = rawAttrs[\"aria-owns\"];\n        comboBoxAttrs[\"aria-expanded\"] = rawAttrs[\"aria-expanded\"];\n      }\n\n      return comboBoxAttrs;\n    });\n    const attrs = useAttrs$1({\n      excludeKeys: computed(() => {\n        return Object.keys(containerAttrs.value);\n      })\n    });\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const {\n      inputId\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const inputSize = useSize();\n    const inputDisabled = useDisabled();\n    const nsInput = useNamespace(\"input\");\n    const nsTextarea = useNamespace(\"textarea\");\n    const input = shallowRef();\n    const textarea = shallowRef();\n    const focused = ref(false);\n    const hovering = ref(false);\n    const isComposing = ref(false);\n    const passwordVisible = ref(false);\n    const countStyle = ref();\n    const textareaCalcStyle = shallowRef(props.inputStyle);\n\n    const _ref = computed(() => input.value || textarea.value);\n\n    const needStatusIcon = computed(() => {\n      var _a;\n\n      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n    });\n    const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || \"\");\n    const validateIcon = computed(() => validateState.value && ValidateComponentsMap[validateState.value]);\n    const passwordIcon = computed(() => passwordVisible.value ? View : Hide);\n    const containerStyle = computed(() => [rawAttrs.style, props.inputStyle]);\n    const textareaStyle = computed(() => [props.inputStyle, textareaCalcStyle.value, {\n      resize: props.resize\n    }]);\n    const nativeInputValue = computed(() => isNil(props.modelValue) ? \"\" : String(props.modelValue));\n    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value));\n    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (!!nativeInputValue.value || focused.value));\n    const isWordLimitVisible = computed(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword);\n    const textLength = computed(() => Array.from(nativeInputValue.value).length);\n    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));\n    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);\n    const [recordCursor, setCursor] = useCursor(input);\n    useResizeObserver(textarea, entries => {\n      if (!isWordLimitVisible.value || props.resize !== \"both\") return;\n      const entry = entries[0];\n      const {\n        width\n      } = entry.contentRect;\n      countStyle.value = {\n        right: `calc(100% - ${width + 15 + 6}px)`\n      };\n    });\n\n    const resizeTextarea = () => {\n      const {\n        type,\n        autosize\n      } = props;\n      if (!isClient || type !== \"textarea\") return;\n\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : void 0;\n        const maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        textareaCalcStyle.value = { ...calcTextareaHeight(textarea.value, minRows, maxRows)\n        };\n      } else {\n        textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n\n    const setNativeInputValue = () => {\n      const input2 = _ref.value;\n      if (!input2 || input2.value === nativeInputValue.value) return;\n      input2.value = nativeInputValue.value;\n    };\n\n    const calcIconOffset = place => {\n      const {\n        el\n      } = instance.vnode;\n      if (!el) return;\n      const elList = Array.from(el.querySelectorAll(`.${nsInput.e(place)}`));\n      const target = elList.find(item => item.parentNode === el);\n      if (!target) return;\n      const pendant = PENDANT_MAP[place];\n\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === \"suffix\" ? \"-\" : \"\"}${el.querySelector(`.${nsInput.be(\"group\", pendant)}`).offsetWidth}px)`;\n      } else {\n        target.removeAttribute(\"style\");\n      }\n    };\n\n    const updateIconOffset = () => {\n      calcIconOffset(\"prefix\");\n      calcIconOffset(\"suffix\");\n    };\n\n    const handleInput = async event => {\n      recordCursor();\n      let {\n        value\n      } = event.target;\n\n      if (props.formatter) {\n        value = props.parser ? props.parser(value) : value;\n        value = props.formatter(value);\n      }\n\n      if (isComposing.value) return;\n      if (value === nativeInputValue.value) return;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      await nextTick();\n      setNativeInputValue();\n      setCursor();\n    };\n\n    const handleChange = event => {\n      emit(\"change\", event.target.value);\n    };\n\n    const handleCompositionStart = event => {\n      emit(\"compositionstart\", event);\n      isComposing.value = true;\n    };\n\n    const handleCompositionUpdate = event => {\n      var _a;\n\n      emit(\"compositionupdate\", event);\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      const lastCharacter = text[text.length - 1] || \"\";\n      isComposing.value = !isKorean(lastCharacter);\n    };\n\n    const handleCompositionEnd = event => {\n      emit(\"compositionend\", event);\n\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n\n    const focus = async () => {\n      var _a;\n\n      await nextTick();\n      (_a = _ref.value) == null ? void 0 : _a.focus();\n    };\n\n    const blur = () => {\n      var _a;\n\n      return (_a = _ref.value) == null ? void 0 : _a.blur();\n    };\n\n    const handleFocus = event => {\n      focused.value = true;\n      emit(\"focus\", event);\n    };\n\n    const handleBlur = event => {\n      var _a;\n\n      focused.value = false;\n      emit(\"blur\", event);\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n      }\n    };\n\n    const handleMouseLeave = evt => {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n\n    const handleMouseEnter = evt => {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n\n    const handleKeydown = evt => {\n      emit(\"keydown\", evt);\n    };\n\n    const select = () => {\n      var _a;\n\n      (_a = _ref.value) == null ? void 0 : _a.select();\n    };\n\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n\n    watch(() => props.modelValue, () => {\n      var _a;\n\n      nextTick(() => resizeTextarea());\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      }\n    });\n    watch(nativeInputValue, () => setNativeInputValue());\n    watch(() => props.type, async () => {\n      await nextTick();\n      setNativeInputValue();\n      resizeTextarea();\n      updateIconOffset();\n    });\n    onMounted(async () => {\n      if (!props.formatter && props.parser) {\n        debugWarn(\"ElInput\", \"If you set the parser, you also need to set the formatter.\");\n      }\n\n      setNativeInputValue();\n      updateIconOffset();\n      await nextTick();\n      resizeTextarea();\n    });\n    onUpdated(async () => {\n      await nextTick();\n      updateIconOffset();\n    });\n    expose({\n      input,\n      textarea,\n      ref: _ref,\n      textareaStyle,\n      autosize: toRef(props, \"autosize\"),\n      focus,\n      blur,\n      select,\n      clear,\n      resizeTextarea\n    });\n    return (_ctx, _cache) => {\n      return withDirectives((openBlock(), createElementBlock(\"div\", mergeProps(unref(containerAttrs), {\n        class: [_ctx.type === \"textarea\" ? unref(nsTextarea).b() : unref(nsInput).b(), unref(nsInput).m(unref(inputSize)), unref(nsInput).is(\"disabled\", unref(inputDisabled)), unref(nsInput).is(\"exceed\", unref(inputExceed)), {\n          [unref(nsInput).b(\"group\")]: _ctx.$slots.prepend || _ctx.$slots.append,\n          [unref(nsInput).bm(\"group\", \"append\")]: _ctx.$slots.append,\n          [unref(nsInput).bm(\"group\", \"prepend\")]: _ctx.$slots.prepend,\n          [unref(nsInput).m(\"prefix\")]: _ctx.$slots.prefix || _ctx.prefixIcon,\n          [unref(nsInput).m(\"suffix\")]: _ctx.$slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword,\n          [unref(nsInput).bm(\"suffix\", \"password-clear\")]: unref(showClear) && unref(showPwdVisible)\n        }, _ctx.$attrs.class],\n        style: unref(containerStyle),\n        role: _ctx.containerRole,\n        onMouseenter: handleMouseEnter,\n        onMouseleave: handleMouseLeave\n      }), [createCommentVNode(\" input \"), _ctx.type !== \"textarea\" ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [createCommentVNode(\" prepend slot \"), _ctx.$slots.prepend ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(nsInput).be(\"group\", \"prepend\"))\n      }, [renderSlot(_ctx.$slots, \"prepend\")], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass([unref(nsInput).e(\"wrapper\"), unref(nsInput).is(\"focus\", focused.value)])\n      }, [createCommentVNode(\" prefix slot \"), _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        class: normalizeClass(unref(nsInput).e(\"prefix\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(nsInput).e(\"prefix-inner\"))\n      }, [renderSlot(_ctx.$slots, \"prefix\"), _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        class: normalizeClass(unref(nsInput).e(\"icon\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", mergeProps({\n        id: unref(inputId),\n        ref_key: \"input\",\n        ref: input,\n        class: unref(nsInput).e(\"inner\")\n      }, unref(attrs), {\n        type: _ctx.showPassword ? passwordVisible.value ? \"text\" : \"password\" : _ctx.type,\n        disabled: unref(inputDisabled),\n        formatter: _ctx.formatter,\n        parser: _ctx.parser,\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        tabindex: _ctx.tabindex,\n        \"aria-label\": _ctx.label,\n        placeholder: _ctx.placeholder,\n        style: _ctx.inputStyle,\n        onCompositionstart: handleCompositionStart,\n        onCompositionupdate: handleCompositionUpdate,\n        onCompositionend: handleCompositionEnd,\n        onInput: handleInput,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, _hoisted_2), createCommentVNode(\" suffix slot \"), unref(suffixVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        class: normalizeClass(unref(nsInput).e(\"suffix\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(nsInput).e(\"suffix-inner\"))\n      }, [!unref(showClear) || !unref(showPwdVisible) || !unref(isWordLimitVisible) ? (openBlock(), createElementBlock(Fragment, {\n        key: 0\n      }, [renderSlot(_ctx.$slots, \"suffix\"), _ctx.suffixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        class: normalizeClass(unref(nsInput).e(\"icon\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true), unref(showClear) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 1,\n        class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"clear\")]),\n        onMousedown: withModifiers(unref(NOOP), [\"prevent\"]),\n        onClick: clear\n      }, {\n        default: withCtx(() => [createVNode(unref(CircleClose))]),\n        _: 1\n      }, 8, [\"class\", \"onMousedown\"])) : createCommentVNode(\"v-if\", true), unref(showPwdVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 2,\n        class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"password\")]),\n        onClick: handlePasswordVisible\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(passwordIcon))))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 3,\n        class: normalizeClass(unref(nsInput).e(\"count\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(unref(nsInput).e(\"count-inner\"))\n      }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(unref(attrs).maxlength), 3)], 2)) : createCommentVNode(\"v-if\", true), unref(validateState) && unref(validateIcon) && unref(needStatusIcon) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 4,\n        class: normalizeClass([unref(nsInput).e(\"icon\"), unref(nsInput).e(\"validateIcon\"), unref(nsInput).is(\"loading\", unref(validateState) === \"validating\")])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(validateIcon))))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true)], 2), createCommentVNode(\" append slot \"), _ctx.$slots.append ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(unref(nsInput).be(\"group\", \"append\"))\n      }, [renderSlot(_ctx.$slots, \"append\")], 2)) : createCommentVNode(\"v-if\", true)], 64)) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [createCommentVNode(\" textarea \"), createElementVNode(\"textarea\", mergeProps({\n        id: unref(inputId),\n        ref_key: \"textarea\",\n        ref: textarea,\n        class: unref(nsTextarea).e(\"inner\")\n      }, unref(attrs), {\n        tabindex: _ctx.tabindex,\n        disabled: unref(inputDisabled),\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        style: unref(textareaStyle),\n        \"aria-label\": _ctx.label,\n        placeholder: _ctx.placeholder,\n        onCompositionstart: handleCompositionStart,\n        onCompositionupdate: handleCompositionUpdate,\n        onCompositionend: handleCompositionEnd,\n        onInput: handleInput,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onKeydown: handleKeydown\n      }), null, 16, _hoisted_3), unref(isWordLimitVisible) ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        style: normalizeStyle(countStyle.value),\n        class: normalizeClass(unref(nsInput).e(\"count\"))\n      }, toDisplayString(unref(textLength)) + \" / \" + toDisplayString(unref(attrs).maxlength), 7)) : createCommentVNode(\"v-if\", true)], 64))], 16, _hoisted_1)), [[vShow, _ctx.type !== \"hidden\"]]);\n    };\n  }\n\n});\n\nvar Input = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/input/src/input.vue\"]]);\n\nexport { Input as default };","map":null,"metadata":{},"sourceType":"module"}