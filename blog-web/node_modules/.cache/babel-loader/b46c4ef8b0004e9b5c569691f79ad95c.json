{"ast":null,"code":"import { defineComponent, getCurrentInstance, computed, inject, ref, reactive, watch, provide, onMounted, onBeforeUnmount, h, Fragment, withDirectives, vShow } from 'vue';\nimport { useTimeoutFn } from '@vueuse/core';\nimport _CollapseTransition from '../../collapse-transition/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ArrowDown, ArrowRight } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport useMenu from './use-menu.mjs';\nimport { useMenuCssVar } from './use-menu-css-var.mjs';\nimport { buildProps } from '../../../utils/vue/props/runtime.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst subMenuProps = buildProps({\n  index: {\n    type: String,\n    required: true\n  },\n  showTimeout: {\n    type: Number,\n    default: 300\n  },\n  hideTimeout: {\n    type: Number,\n    default: 300\n  },\n  popperClass: String,\n  disabled: Boolean,\n  popperAppendToBody: {\n    type: Boolean,\n    default: void 0\n  },\n  popperOffset: {\n    type: Number,\n    default: 6\n  }\n});\nconst COMPONENT_NAME = \"ElSubMenu\";\nvar SubMenu = defineComponent({\n  name: COMPONENT_NAME,\n  props: subMenuProps,\n\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const instance = getCurrentInstance();\n    const {\n      indexPath,\n      parentMenu\n    } = useMenu(instance, computed(() => props.index));\n    const nsMenu = useNamespace(\"menu\");\n    const nsSubMenu = useNamespace(\"sub-menu\");\n    const rootMenu = inject(\"rootMenu\");\n    if (!rootMenu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const subMenu = inject(`subMenu:${parentMenu.value.uid}`);\n    if (!subMenu) throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    const items = ref({});\n    const subMenus = ref({});\n    let timeout;\n    const mouseInChild = ref(false);\n    const verticalTitleRef = ref();\n    const vPopper = ref(null);\n    const currentPlacement = computed(() => mode.value === \"horizontal\" && isFirstLevel.value ? \"bottom-start\" : \"right-start\");\n    const subMenuTitleIcon = computed(() => {\n      return mode.value === \"horizontal\" && isFirstLevel.value || mode.value === \"vertical\" && !rootMenu.props.collapse ? ArrowDown : ArrowRight;\n    });\n    const isFirstLevel = computed(() => {\n      return subMenu.level === 0;\n    });\n    const appendToBody = computed(() => {\n      return props.popperAppendToBody === void 0 ? isFirstLevel.value : Boolean(props.popperAppendToBody);\n    });\n    const menuTransitionName = computed(() => rootMenu.props.collapse ? `${nsMenu.namespace.value}-zoom-in-left` : `${nsMenu.namespace.value}-zoom-in-top`);\n    const fallbackPlacements = computed(() => mode.value === \"horizontal\" && isFirstLevel.value ? [\"bottom-start\", \"bottom-end\", \"top-start\", \"top-end\", \"right-start\", \"left-start\"] : [\"right-start\", \"left-start\", \"bottom-start\", \"bottom-end\", \"top-start\", \"top-end\"]);\n    const opened = computed(() => rootMenu.openedMenus.includes(props.index));\n    const active = computed(() => {\n      let isActive = false;\n      Object.values(items.value).forEach(item2 => {\n        if (item2.active) {\n          isActive = true;\n        }\n      });\n      Object.values(subMenus.value).forEach(subItem => {\n        if (subItem.active) {\n          isActive = true;\n        }\n      });\n      return isActive;\n    });\n    const backgroundColor = computed(() => rootMenu.props.backgroundColor || \"\");\n    const activeTextColor = computed(() => rootMenu.props.activeTextColor || \"\");\n    const textColor = computed(() => rootMenu.props.textColor || \"\");\n    const mode = computed(() => rootMenu.props.mode);\n    const item = reactive({\n      index: props.index,\n      indexPath,\n      active\n    });\n    const titleStyle = computed(() => {\n      if (mode.value !== \"horizontal\") {\n        return {\n          color: textColor.value\n        };\n      }\n\n      return {\n        borderBottomColor: active.value ? rootMenu.props.activeTextColor ? activeTextColor.value : \"\" : \"transparent\",\n        color: active.value ? activeTextColor.value : textColor.value\n      };\n    });\n\n    const doDestroy = () => {\n      var _a, _b, _c;\n\n      return (_c = (_b = (_a = vPopper.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.popperInstanceRef) == null ? void 0 : _c.destroy();\n    };\n\n    const handleCollapseToggle = value => {\n      if (!value) {\n        doDestroy();\n      }\n    };\n\n    const handleClick = () => {\n      if (rootMenu.props.menuTrigger === \"hover\" && rootMenu.props.mode === \"horizontal\" || rootMenu.props.collapse && rootMenu.props.mode === \"vertical\" || props.disabled) return;\n      rootMenu.handleSubMenuClick({\n        index: props.index,\n        indexPath: indexPath.value,\n        active: active.value\n      });\n    };\n\n    const handleMouseenter = (event, showTimeout = props.showTimeout) => {\n      var _a;\n\n      if (event.type === \"focus\") {\n        return;\n      }\n\n      if (rootMenu.props.menuTrigger === \"click\" && rootMenu.props.mode === \"horizontal\" || !rootMenu.props.collapse && rootMenu.props.mode === \"vertical\" || props.disabled) {\n        return;\n      }\n\n      subMenu.mouseInChild.value = true;\n      timeout == null ? void 0 : timeout();\n      ({\n        stop: timeout\n      } = useTimeoutFn(() => {\n        rootMenu.openMenu(props.index, indexPath.value);\n      }, showTimeout));\n\n      if (appendToBody.value) {\n        (_a = parentMenu.value.vnode.el) == null ? void 0 : _a.dispatchEvent(new MouseEvent(\"mouseenter\"));\n      }\n    };\n\n    const handleMouseleave = (deepDispatch = false) => {\n      var _a, _b;\n\n      if (rootMenu.props.menuTrigger === \"click\" && rootMenu.props.mode === \"horizontal\" || !rootMenu.props.collapse && rootMenu.props.mode === \"vertical\") {\n        return;\n      }\n\n      timeout == null ? void 0 : timeout();\n      subMenu.mouseInChild.value = false;\n      ({\n        stop: timeout\n      } = useTimeoutFn(() => !mouseInChild.value && rootMenu.closeMenu(props.index, indexPath.value), props.hideTimeout));\n\n      if (appendToBody.value && deepDispatch) {\n        if (((_a = instance.parent) == null ? void 0 : _a.type.name) === \"ElSubMenu\") {\n          (_b = subMenu.handleMouseleave) == null ? void 0 : _b.call(subMenu, true);\n        }\n      }\n    };\n\n    watch(() => rootMenu.props.collapse, value => handleCollapseToggle(Boolean(value)));\n    {\n      const addSubMenu = item2 => {\n        subMenus.value[item2.index] = item2;\n      };\n\n      const removeSubMenu = item2 => {\n        delete subMenus.value[item2.index];\n      };\n\n      provide(`subMenu:${instance.uid}`, {\n        addSubMenu,\n        removeSubMenu,\n        handleMouseleave,\n        mouseInChild,\n        level: subMenu.level + 1\n      });\n    }\n    expose({\n      opened\n    });\n    onMounted(() => {\n      rootMenu.addSubMenu(item);\n      subMenu.addSubMenu(item);\n    });\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeSubMenu(item);\n    });\n    return () => {\n      var _a;\n\n      const titleTag = [(_a = slots.title) == null ? void 0 : _a.call(slots), h(ElIcon, {\n        class: nsSubMenu.e(\"icon-arrow\")\n      }, {\n        default: () => h(subMenuTitleIcon.value)\n      })];\n      const ulStyle = useMenuCssVar(rootMenu.props, subMenu.level + 1);\n      const child = rootMenu.isMenuPopup ? h(ElTooltip, {\n        ref: vPopper,\n        visible: opened.value,\n        effect: \"light\",\n        pure: true,\n        offset: props.popperOffset,\n        showArrow: false,\n        persistent: true,\n        popperClass: props.popperClass,\n        placement: currentPlacement.value,\n        teleported: appendToBody.value,\n        fallbackPlacements: fallbackPlacements.value,\n        transition: menuTransitionName.value,\n        gpuAcceleration: false\n      }, {\n        content: () => {\n          var _a2;\n\n          return h(\"div\", {\n            class: [nsMenu.m(mode.value), nsMenu.m(\"popup-container\"), props.popperClass],\n            onMouseenter: evt => handleMouseenter(evt, 100),\n            onMouseleave: () => handleMouseleave(true),\n            onFocus: evt => handleMouseenter(evt, 100)\n          }, [h(\"ul\", {\n            class: [nsMenu.b(), nsMenu.m(\"popup\"), nsMenu.m(`popup-${currentPlacement.value}`)],\n            style: ulStyle.value\n          }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)])]);\n        },\n        default: () => h(\"div\", {\n          class: nsSubMenu.e(\"title\"),\n          style: [titleStyle.value, {\n            backgroundColor: backgroundColor.value\n          }],\n          onClick: handleClick\n        }, titleTag)\n      }) : h(Fragment, {}, [h(\"div\", {\n        class: nsSubMenu.e(\"title\"),\n        style: [titleStyle.value, {\n          backgroundColor: backgroundColor.value\n        }],\n        ref: verticalTitleRef,\n        onClick: handleClick\n      }, titleTag), h(_CollapseTransition, {}, {\n        default: () => {\n          var _a2;\n\n          return withDirectives(h(\"ul\", {\n            role: \"menu\",\n            class: [nsMenu.b(), nsMenu.m(\"inline\")],\n            style: ulStyle.value\n          }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]), [[vShow, opened.value]]);\n        }\n      })]);\n      return h(\"li\", {\n        class: [nsSubMenu.b(), nsSubMenu.is(\"active\", active.value), nsSubMenu.is(\"opened\", opened.value), nsSubMenu.is(\"disabled\", props.disabled)],\n        role: \"menuitem\",\n        ariaHaspopup: true,\n        ariaExpanded: opened.value,\n        onMouseenter: handleMouseenter,\n        onMouseleave: () => handleMouseleave(true),\n        onFocus: handleMouseenter\n      }, [child]);\n    };\n  }\n\n});\nexport { SubMenu as default, subMenuProps };","map":null,"metadata":{},"sourceType":"module"}