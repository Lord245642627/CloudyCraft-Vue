{"ast":null,"code":"// HTML block\n'use strict';\n\nvar block_names = require('../common/html_blocks');\n\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE; // An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\n\n\nvar HTML_SEQUENCES = [[/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true], [/^<!--/, /-->/, true], [/^<\\?/, /\\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\\[CDATA\\[/, /\\]\\]>/, true], [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'), /^$/, false]];\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i,\n      nextLine,\n      token,\n      lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block\n\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  if (!state.md.options.html) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(pos) !== 0x3C\n  /* < */\n  ) {\n    return false;\n  }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) {\n      break;\n    }\n  }\n\n  if (i === HTML_SEQUENCES.length) {\n    return false;\n  }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1; // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) {\n        break;\n      }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) {\n          nextLine++;\n        }\n\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n  token = state.push('html_block', '', 0);\n  token.map = [startLine, nextLine];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n  return true;\n};","map":{"version":3,"names":["block_names","require","HTML_OPEN_CLOSE_TAG_RE","HTML_SEQUENCES","RegExp","join","source","module","exports","html_block","state","startLine","endLine","silent","i","nextLine","token","lineText","pos","bMarks","tShift","max","eMarks","sCount","blkIndent","md","options","html","src","charCodeAt","slice","length","test","line","push","map","content","getLines"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-web/node_modules/markdown-it/lib/rules_block/html_block.js"],"sourcesContent":["// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}