{"ast":null,"code":"import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nexport { addDummyNode, simplify, asNonCompoundGraph, successorWeights, predecessorWeights, intersectRect, buildLayerMatrix, normalizeRanks, removeEmptyRanks, addBorderNode, maxRank, partition, time, notime };\n/*\n * Adds a dummy node to the graph and return v.\n */\n\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\n\n\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || {\n      weight: 0,\n      minlen: 1\n    };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen)\n    });\n  });\n\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({\n    multigraph: g.isMultigraph()\n  }).setGraph(g.graph());\n\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n\n    return sucs;\n  });\n\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n\n    return preds;\n  });\n\n  return _.zipObject(g.nodes(), weightMap);\n}\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\n\n\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y; // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n\n    sx = h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n\n    sx = w;\n    sy = w * dy / dx;\n  }\n\n  return {\n    x: x + sx,\n    y: y + sy\n  };\n}\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\n\n\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n\n  return layering;\n}\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\n\n\nfunction normalizeRanks(g) {\n  var min = _.min(_.map(g.nodes(), function (v) {\n    return g.node(v).rank;\n  }));\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(_.map(g.nodes(), function (v) {\n    return g.node(v).rank;\n  }));\n\n  var layers = [];\n\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0\n  };\n\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(_.map(g.nodes(), function (v) {\n    var rank = g.node(v).rank;\n\n    if (!_.isUndefined(rank)) {\n      return rank;\n    }\n  }));\n}\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\n\n\nfunction partition(collection, fn) {\n  var result = {\n    lhs: [],\n    rhs: []\n  };\n\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n\n  return result;\n}\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\n\n\nfunction time(name, fn) {\n  var start = _.now();\n\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}","map":{"version":3,"names":["_","Graph","addDummyNode","simplify","asNonCompoundGraph","successorWeights","predecessorWeights","intersectRect","buildLayerMatrix","normalizeRanks","removeEmptyRanks","addBorderNode","maxRank","partition","time","notime","g","type","attrs","name","v","uniqueId","hasNode","dummy","setNode","simplified","setGraph","graph","forEach","nodes","node","edges","e","simpleLabel","edge","w","weight","minlen","label","setEdge","Math","max","multigraph","isMultigraph","children","length","weightMap","map","sucs","outEdges","zipObject","preds","inEdges","rect","point","x","y","dx","dy","width","h","height","Error","sx","sy","abs","layering","range","rank","isUndefined","order","min","has","offset","layers","push","delta","nodeRankFactor","vs","i","prefix","arguments","collection","fn","result","lhs","rhs","value","start","now","console","log"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-web/node_modules/dagre-d3-es/src/dagre/util.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}