{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, nextTick, watch, provide, reactive, onMounted, withDirectives, h } from 'vue';\nimport '../../../directives/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { More } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport Menu$1 from './utils/menu-bar.mjs';\nimport ElMenuCollapseTransition from './menu-collapse-transition.mjs';\nimport SubMenu from './sub-menu.mjs';\nimport { useMenuCssVar } from './use-menu-css-var.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { isString, isObject } from '@vue/shared';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport Resize from '../../../directives/resize/index.mjs';\nconst menuProps = buildProps({\n  mode: {\n    type: String,\n    values: [\"horizontal\", \"vertical\"],\n    default: \"vertical\"\n  },\n  defaultActive: {\n    type: String,\n    default: \"\"\n  },\n  defaultOpeneds: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  uniqueOpened: Boolean,\n  router: Boolean,\n  menuTrigger: {\n    type: String,\n    values: [\"hover\", \"click\"],\n    default: \"hover\"\n  },\n  collapse: Boolean,\n  backgroundColor: String,\n  textColor: String,\n  activeTextColor: String,\n  collapseTransition: {\n    type: Boolean,\n    default: true\n  },\n  ellipsis: {\n    type: Boolean,\n    default: true\n  }\n});\n\nconst checkIndexPath = indexPath => Array.isArray(indexPath) && indexPath.every(path => isString(path));\n\nconst menuEmits = {\n  close: (index, indexPath) => isString(index) && checkIndexPath(indexPath),\n  open: (index, indexPath) => isString(index) && checkIndexPath(indexPath),\n  select: (index, indexPath, item, routerResult) => isString(index) && checkIndexPath(indexPath) && isObject(item) && (routerResult === void 0 || routerResult instanceof Promise)\n};\nvar Menu = defineComponent({\n  name: \"ElMenu\",\n  props: menuProps,\n  emits: menuEmits,\n\n  setup(props, {\n    emit,\n    slots,\n    expose\n  }) {\n    const instance = getCurrentInstance();\n    const router = instance.appContext.config.globalProperties.$router;\n    const menu = ref();\n    const nsMenu = useNamespace(\"menu\");\n    const nsSubMenu = useNamespace(\"sub-menu\");\n    const openedMenus = ref(props.defaultOpeneds && !props.collapse ? props.defaultOpeneds.slice(0) : []);\n    const activeIndex = ref(props.defaultActive);\n    const items = ref({});\n    const subMenus = ref({});\n    const isMenuPopup = computed(() => {\n      return props.mode === \"horizontal\" || props.mode === \"vertical\" && props.collapse;\n    });\n\n    const initMenu = () => {\n      const activeItem = activeIndex.value && items.value[activeIndex.value];\n      if (!activeItem || props.mode === \"horizontal\" || props.collapse) return;\n      const indexPath = activeItem.indexPath;\n      indexPath.forEach(index => {\n        const subMenu = subMenus.value[index];\n        subMenu && openMenu(index, subMenu.indexPath);\n      });\n    };\n\n    const openMenu = (index, indexPath) => {\n      if (openedMenus.value.includes(index)) return;\n\n      if (props.uniqueOpened) {\n        openedMenus.value = openedMenus.value.filter(index2 => indexPath.includes(index2));\n      }\n\n      openedMenus.value.push(index);\n      emit(\"open\", index, indexPath);\n    };\n\n    const closeMenu = (index, indexPath) => {\n      const i = openedMenus.value.indexOf(index);\n\n      if (i !== -1) {\n        openedMenus.value.splice(i, 1);\n      }\n\n      emit(\"close\", index, indexPath);\n    };\n\n    const handleSubMenuClick = ({\n      index,\n      indexPath\n    }) => {\n      const isOpened = openedMenus.value.includes(index);\n\n      if (isOpened) {\n        closeMenu(index, indexPath);\n      } else {\n        openMenu(index, indexPath);\n      }\n    };\n\n    const handleMenuItemClick = menuItem => {\n      if (props.mode === \"horizontal\" || props.collapse) {\n        openedMenus.value = [];\n      }\n\n      const {\n        index,\n        indexPath\n      } = menuItem;\n      if (index === void 0 || indexPath === void 0) return;\n\n      if (props.router && router) {\n        const route = menuItem.route || index;\n        const routerResult = router.push(route).then(res => {\n          if (!res) activeIndex.value = index;\n          return res;\n        });\n        emit(\"select\", index, indexPath, {\n          index,\n          indexPath,\n          route\n        }, routerResult);\n      } else {\n        activeIndex.value = index;\n        emit(\"select\", index, indexPath, {\n          index,\n          indexPath\n        });\n      }\n    };\n\n    const updateActiveIndex = val => {\n      const itemsInData = items.value;\n      const item = itemsInData[val] || activeIndex.value && itemsInData[activeIndex.value] || itemsInData[props.defaultActive];\n\n      if (item) {\n        activeIndex.value = item.index;\n        initMenu();\n      } else {\n        activeIndex.value = val;\n      }\n    };\n\n    const handleResize = () => {\n      nextTick(() => instance.proxy.$forceUpdate());\n    };\n\n    watch(() => props.defaultActive, currentActive => {\n      if (!items.value[currentActive]) {\n        activeIndex.value = \"\";\n      }\n\n      updateActiveIndex(currentActive);\n    });\n    watch(items.value, () => initMenu());\n    watch(() => props.collapse, value => {\n      if (value) openedMenus.value = [];\n    });\n    {\n      const addSubMenu = item => {\n        subMenus.value[item.index] = item;\n      };\n\n      const removeSubMenu = item => {\n        delete subMenus.value[item.index];\n      };\n\n      const addMenuItem = item => {\n        items.value[item.index] = item;\n      };\n\n      const removeMenuItem = item => {\n        delete items.value[item.index];\n      };\n\n      provide(\"rootMenu\", reactive({\n        props,\n        openedMenus,\n        items,\n        subMenus,\n        activeIndex,\n        isMenuPopup,\n        addMenuItem,\n        removeMenuItem,\n        addSubMenu,\n        removeSubMenu,\n        openMenu,\n        closeMenu,\n        handleMenuItemClick,\n        handleSubMenuClick\n      }));\n      provide(`subMenu:${instance.uid}`, {\n        addSubMenu,\n        removeSubMenu,\n        mouseInChild: ref(false),\n        level: 0\n      });\n    }\n    onMounted(() => {\n      initMenu();\n\n      if (props.mode === \"horizontal\") {\n        new Menu$1(instance.vnode.el, nsMenu.namespace.value);\n      }\n    });\n    {\n      const open = index => {\n        const {\n          indexPath\n        } = subMenus.value[index];\n        indexPath.forEach(i => openMenu(i, indexPath));\n      };\n\n      expose({\n        open,\n        close: closeMenu,\n        handleResize\n      });\n    }\n\n    const flattedChildren = children => {\n      const vnodes = Array.isArray(children) ? children : [children];\n      const result = [];\n      vnodes.forEach(child => {\n        if (Array.isArray(child.children)) {\n          result.push(...flattedChildren(child.children));\n        } else {\n          result.push(child);\n        }\n      });\n      return result;\n    };\n\n    const useVNodeResize = vnode => props.mode === \"horizontal\" ? withDirectives(vnode, [[Resize, handleResize]]) : vnode;\n\n    return () => {\n      var _a, _b, _c, _d;\n\n      let slot = (_b = (_a = slots.default) == null ? void 0 : _a.call(slots)) != null ? _b : [];\n      const vShowMore = [];\n\n      if (props.mode === \"horizontal\" && menu.value) {\n        const items2 = Array.from((_d = (_c = menu.value) == null ? void 0 : _c.childNodes) != null ? _d : []).filter(item => item.nodeName !== \"#text\" || item.nodeValue);\n        const originalSlot = flattedChildren(slot);\n        const moreItemWidth = 64;\n        const paddingLeft = Number.parseInt(getComputedStyle(menu.value).paddingLeft, 10);\n        const paddingRight = Number.parseInt(getComputedStyle(menu.value).paddingRight, 10);\n        const menuWidth = menu.value.clientWidth - paddingLeft - paddingRight;\n        let calcWidth = 0;\n        let sliceIndex = 0;\n        items2.forEach((item, index) => {\n          calcWidth += item.offsetWidth || 0;\n\n          if (calcWidth <= menuWidth - moreItemWidth) {\n            sliceIndex = index + 1;\n          }\n        });\n        const slotDefault = originalSlot.slice(0, sliceIndex);\n        const slotMore = originalSlot.slice(sliceIndex);\n\n        if ((slotMore == null ? void 0 : slotMore.length) && props.ellipsis) {\n          slot = slotDefault;\n          vShowMore.push(h(SubMenu, {\n            index: \"sub-menu-more\",\n            class: nsSubMenu.e(\"hide-arrow\")\n          }, {\n            title: () => h(ElIcon, {\n              class: nsSubMenu.e(\"icon-more\")\n            }, {\n              default: () => h(More)\n            }),\n            default: () => slotMore\n          }));\n        }\n      }\n\n      const ulStyle = useMenuCssVar(props, 0);\n\n      const resizeMenu = vNode => props.ellipsis ? useVNodeResize(vNode) : vNode;\n\n      const vMenu = resizeMenu(h(\"ul\", {\n        key: String(props.collapse),\n        role: \"menubar\",\n        ref: menu,\n        style: ulStyle.value,\n        class: {\n          [nsMenu.b()]: true,\n          [nsMenu.m(props.mode)]: true,\n          [nsMenu.m(\"collapse\")]: props.collapse\n        }\n      }, [...slot, ...vShowMore]));\n\n      if (props.collapseTransition && props.mode === \"vertical\") {\n        return h(ElMenuCollapseTransition, () => vMenu);\n      }\n\n      return vMenu;\n    };\n  }\n\n});\nexport { Menu as default, menuEmits, menuProps };","map":null,"metadata":{},"sourceType":"module"}