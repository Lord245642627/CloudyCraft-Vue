{"ast":null,"code":"import * as _ from 'lodash-es';\nexport { dfs };\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\n\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n  var acc = [];\n  var visited = {};\n\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}","map":{"version":3,"names":["_","dfs","g","vs","order","isArray","navigation","isDirected","successors","neighbors","bind","acc","visited","each","v","hasNode","Error","doDfs","postorder","has","push","w"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-web/node_modules/dagre-d3-es/src/graphlib/alg/dfs.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,WAAnB;AAEA,SAASC,GAAT;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,GAAT,CAAaC,CAAb,EAAgBC,EAAhB,EAAoBC,KAApB,EAA2B;EACzB,IAAI,CAACJ,CAAC,CAACK,OAAF,CAAUF,EAAV,CAAL,EAAoB;IAClBA,EAAE,GAAG,CAACA,EAAD,CAAL;EACD;;EAED,IAAIG,UAAU,GAAG,CAACJ,CAAC,CAACK,UAAF,KAAiBL,CAAC,CAACM,UAAnB,GAAgCN,CAAC,CAACO,SAAnC,EAA8CC,IAA9C,CAAmDR,CAAnD,CAAjB;EAEA,IAAIS,GAAG,GAAG,EAAV;EACA,IAAIC,OAAO,GAAG,EAAd;;EACAZ,CAAC,CAACa,IAAF,CAAOV,EAAP,EAAW,UAAUW,CAAV,EAAa;IACtB,IAAI,CAACZ,CAAC,CAACa,OAAF,CAAUD,CAAV,CAAL,EAAmB;MACjB,MAAM,IAAIE,KAAJ,CAAU,+BAA+BF,CAAzC,CAAN;IACD;;IAEDG,KAAK,CAACf,CAAD,EAAIY,CAAJ,EAAOV,KAAK,KAAK,MAAjB,EAAyBQ,OAAzB,EAAkCN,UAAlC,EAA8CK,GAA9C,CAAL;EACD,CAND;;EAOA,OAAOA,GAAP;AACD;;AAED,SAASM,KAAT,CAAef,CAAf,EAAkBY,CAAlB,EAAqBI,SAArB,EAAgCN,OAAhC,EAAyCN,UAAzC,EAAqDK,GAArD,EAA0D;EACxD,IAAI,CAACX,CAAC,CAACmB,GAAF,CAAMP,OAAN,EAAeE,CAAf,CAAL,EAAwB;IACtBF,OAAO,CAACE,CAAD,CAAP,GAAa,IAAb;;IAEA,IAAI,CAACI,SAAL,EAAgB;MACdP,GAAG,CAACS,IAAJ,CAASN,CAAT;IACD;;IACDd,CAAC,CAACa,IAAF,CAAOP,UAAU,CAACQ,CAAD,CAAjB,EAAsB,UAAUO,CAAV,EAAa;MACjCJ,KAAK,CAACf,CAAD,EAAImB,CAAJ,EAAOH,SAAP,EAAkBN,OAAlB,EAA2BN,UAA3B,EAAuCK,GAAvC,CAAL;IACD,CAFD;;IAGA,IAAIO,SAAJ,EAAe;MACbP,GAAG,CAACS,IAAJ,CAASN,CAAT;IACD;EACF;AACF"},"metadata":{},"sourceType":"module"}