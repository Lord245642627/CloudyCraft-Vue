{"ast":null,"code":"import { defineComponent, useAttrs, ref, computed, nextTick, watch, onMounted, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, mergeProps, createCommentVNode, renderSlot, createElementVNode, toDisplayString, Fragment, createBlock, withCtx } from 'vue';\nimport { isClient, useThrottleFn, useEventListener } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport { ElImageViewer } from '../../image-viewer/index.mjs';\nimport '../../../utils/index.mjs';\nimport { imageProps, imageEmits } from './image.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useAttrs as useAttrs$1 } from '../../../hooks/use-attrs/index.mjs';\nimport { isInContainer } from '../../../utils/dom/position.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport { isString } from '@vue/shared';\nimport { getScrollContainer } from '../../../utils/dom/scroll.mjs';\nconst _hoisted_1 = [\"src\", \"loading\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst __default__ = {\n  name: \"ElImage\",\n  inheritAttrs: false\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: imageProps,\n  emits: imageEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    let prevOverflow = \"\";\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"image\");\n    const rawAttrs = useAttrs();\n    const attrs = useAttrs$1();\n    const imageSrc = ref();\n    const hasLoadError = ref(false);\n    const isLoading = ref(true);\n    const showViewer = ref(false);\n    const container = ref();\n\n    const _scrollContainer = ref();\n\n    const supportLoading = isClient && \"loading\" in HTMLImageElement.prototype;\n    let stopScrollListener;\n    let stopWheelListener;\n    const containerStyle = computed(() => rawAttrs.style);\n    const imageStyle = computed(() => {\n      const {\n        fit\n      } = props;\n\n      if (isClient && fit) {\n        return {\n          objectFit: fit\n        };\n      }\n\n      return {};\n    });\n    const preview = computed(() => {\n      const {\n        previewSrcList\n      } = props;\n      return Array.isArray(previewSrcList) && previewSrcList.length > 0;\n    });\n    const imageIndex = computed(() => {\n      const {\n        previewSrcList,\n        initialIndex\n      } = props;\n      let previewIndex = initialIndex;\n\n      if (initialIndex > previewSrcList.length - 1) {\n        previewIndex = 0;\n      }\n\n      return previewIndex;\n    });\n    const isManual = computed(() => {\n      if (props.loading === \"eager\") return false;\n      return !supportLoading && props.loading === \"lazy\" || props.lazy;\n    });\n\n    const loadImage = () => {\n      if (!isClient) return;\n      isLoading.value = true;\n      hasLoadError.value = false;\n      imageSrc.value = props.src;\n    };\n\n    function handleLoad(event) {\n      isLoading.value = false;\n      hasLoadError.value = false;\n      emit(\"load\", event);\n    }\n\n    function handleError(event) {\n      isLoading.value = false;\n      hasLoadError.value = true;\n      emit(\"error\", event);\n    }\n\n    function handleLazyLoad() {\n      if (isInContainer(container.value, _scrollContainer.value)) {\n        loadImage();\n        removeLazyLoadListener();\n      }\n    }\n\n    const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200);\n\n    async function addLazyLoadListener() {\n      var _a;\n\n      if (!isClient) return;\n      await nextTick();\n      const {\n        scrollContainer\n      } = props;\n\n      if (isElement(scrollContainer)) {\n        _scrollContainer.value = scrollContainer;\n      } else if (isString(scrollContainer) && scrollContainer !== \"\") {\n        _scrollContainer.value = (_a = document.querySelector(scrollContainer)) != null ? _a : void 0;\n      } else if (container.value) {\n        _scrollContainer.value = getScrollContainer(container.value);\n      }\n\n      if (_scrollContainer.value) {\n        stopScrollListener = useEventListener(_scrollContainer, \"scroll\", lazyLoadHandler);\n        setTimeout(() => handleLazyLoad(), 100);\n      }\n    }\n\n    function removeLazyLoadListener() {\n      if (!isClient || !_scrollContainer.value || !lazyLoadHandler) return;\n      stopScrollListener == null ? void 0 : stopScrollListener();\n      _scrollContainer.value = void 0;\n    }\n\n    function wheelHandler(e) {\n      if (!e.ctrlKey) return;\n\n      if (e.deltaY < 0) {\n        e.preventDefault();\n        return false;\n      } else if (e.deltaY > 0) {\n        e.preventDefault();\n        return false;\n      }\n    }\n\n    function clickHandler() {\n      if (!preview.value) return;\n      stopWheelListener = useEventListener(\"wheel\", wheelHandler, {\n        passive: false\n      });\n      prevOverflow = document.body.style.overflow;\n      document.body.style.overflow = \"hidden\";\n      showViewer.value = true;\n    }\n\n    function closeViewer() {\n      stopWheelListener == null ? void 0 : stopWheelListener();\n      document.body.style.overflow = prevOverflow;\n      showViewer.value = false;\n      emit(\"close\");\n    }\n\n    function switchViewer(val) {\n      emit(\"switch\", val);\n    }\n\n    watch(() => props.src, () => {\n      if (isManual.value) {\n        isLoading.value = true;\n        hasLoadError.value = false;\n        removeLazyLoadListener();\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    onMounted(() => {\n      if (isManual.value) {\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"container\",\n        ref: container,\n        class: normalizeClass([unref(ns).b(), _ctx.$attrs.class]),\n        style: normalizeStyle(unref(containerStyle))\n      }, [imageSrc.value !== void 0 && !hasLoadError.value ? (openBlock(), createElementBlock(\"img\", mergeProps({\n        key: 0\n      }, unref(attrs), {\n        src: imageSrc.value,\n        loading: _ctx.loading,\n        style: unref(imageStyle),\n        class: [unref(ns).e(\"inner\"), unref(preview) && unref(ns).e(\"preview\"), isLoading.value && unref(ns).is(\"loading\")],\n        onClick: clickHandler,\n        onLoad: handleLoad,\n        onError: handleError\n      }), null, 16, _hoisted_1)) : createCommentVNode(\"v-if\", true), isLoading.value || hasLoadError.value ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(unref(ns).e(\"wrapper\"))\n      }, [isLoading.value ? renderSlot(_ctx.$slots, \"placeholder\", {\n        key: 0\n      }, () => [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"placeholder\"))\n      }, null, 2)]) : hasLoadError.value ? renderSlot(_ctx.$slots, \"error\", {\n        key: 1\n      }, () => [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"error\"))\n      }, toDisplayString(unref(t)(\"el.image.error\")), 3)]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), unref(preview) ? (openBlock(), createElementBlock(Fragment, {\n        key: 2\n      }, [showViewer.value ? (openBlock(), createBlock(unref(ElImageViewer), {\n        key: 0,\n        \"z-index\": _ctx.zIndex,\n        \"initial-index\": unref(imageIndex),\n        infinite: _ctx.infinite,\n        \"url-list\": _ctx.previewSrcList,\n        \"hide-on-click-modal\": _ctx.hideOnClickModal,\n        teleported: _ctx.previewTeleported,\n        \"close-on-press-escape\": _ctx.closeOnPressEscape,\n        onClose: closeViewer,\n        onSwitch: switchViewer\n      }, {\n        default: withCtx(() => [_ctx.$slots.viewer ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [renderSlot(_ctx.$slots, \"viewer\")])) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"z-index\", \"initial-index\", \"infinite\", \"url-list\", \"hide-on-click-modal\", \"teleported\", \"close-on-press-escape\"])) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true)], 6);\n    };\n  }\n\n});\n\nvar Image = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/image/src/image.vue\"]]);\n\nexport { Image as default };","map":null,"metadata":{},"sourceType":"module"}