{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, watch, nextTick, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle } from 'vue';\nimport { useResizeObserver } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { tabBarProps } from './tab-bar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { capitalize } from '@vue/shared';\nconst __default__ = {\n  name: \"ElTabBar\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: tabBarProps,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const COMPONENT_NAME = \"ElTabBar\";\n    const instance = getCurrentInstance();\n    const rootTabs = inject(tabsRootContextKey);\n    if (!rootTabs) throwError(COMPONENT_NAME, \"<el-tabs><el-tab-bar /></el-tabs>\");\n    const ns = useNamespace(\"tabs\");\n    const barRef = ref();\n    const barStyle = ref();\n\n    const getBarStyle = () => {\n      let offset = 0;\n      let tabSize = 0;\n      const sizeName = [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition) ? \"width\" : \"height\";\n      const sizeDir = sizeName === \"width\" ? \"x\" : \"y\";\n      props.tabs.every(tab => {\n        var _a, _b, _c, _d;\n\n        const $el = (_b = (_a = instance.parent) == null ? void 0 : _a.refs) == null ? void 0 : _b[`tab-${tab.paneName}`];\n        if (!$el) return false;\n\n        if (!tab.active) {\n          return true;\n        }\n\n        tabSize = $el[`client${capitalize(sizeName)}`];\n        const position = sizeDir === \"x\" ? \"left\" : \"top\";\n        offset = $el.getBoundingClientRect()[position] - ((_d = (_c = $el.parentElement) == null ? void 0 : _c.getBoundingClientRect()[position]) != null ? _d : 0);\n        const tabStyles = window.getComputedStyle($el);\n\n        if (sizeName === \"width\") {\n          if (props.tabs.length > 1) {\n            tabSize -= Number.parseFloat(tabStyles.paddingLeft) + Number.parseFloat(tabStyles.paddingRight);\n          }\n\n          offset += Number.parseFloat(tabStyles.paddingLeft);\n        }\n\n        return false;\n      });\n      return {\n        [sizeName]: `${tabSize}px`,\n        transform: `translate${capitalize(sizeDir)}(${offset}px)`\n      };\n    };\n\n    const update = () => barStyle.value = getBarStyle();\n\n    watch(() => props.tabs, async () => {\n      await nextTick();\n      update();\n    }, {\n      immediate: true\n    });\n    useResizeObserver(barRef, () => update());\n    expose({\n      ref: barRef,\n      update\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"barRef\",\n        ref: barRef,\n        class: normalizeClass([unref(ns).e(\"active-bar\"), unref(ns).is(unref(rootTabs).props.tabPosition)]),\n        style: normalizeStyle(barStyle.value)\n      }, null, 6);\n    };\n  }\n\n});\n\nvar TabBar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tabs/src/tab-bar.vue\"]]);\n\nexport { TabBar as default };","map":null,"metadata":{},"sourceType":"module"}