{"ast":null,"code":"import { defineComponent, inject, ref, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, withKeys, withModifiers, renderSlot, createTextVNode, toDisplayString, createVNode, withCtx, withDirectives, vShow } from 'vue';\nimport '../../../utils/index.mjs';\nimport _CollapseTransition from '../../collapse-transition/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowRight } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { collapseItemProps } from './collapse-item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { collapseContextKey } from '../../../tokens/collapse.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { generateId } from '../../../utils/rand.mjs';\nconst _hoisted_1 = [\"aria-expanded\", \"aria-controls\", \"aria-describedby\"];\nconst _hoisted_2 = [\"id\", \"tabindex\", \"onKeypress\"];\nconst _hoisted_3 = [\"id\", \"aria-hidden\", \"aria-labelledby\"];\nconst __default__ = {\n  name: \"ElCollapseItem\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: collapseItemProps,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const collapse = inject(collapseContextKey);\n    const ns = useNamespace(\"collapse\");\n    const focusing = ref(false);\n    const isClick = ref(false);\n    const id = ref(generateId());\n    const isActive = computed(() => collapse == null ? void 0 : collapse.activeNames.value.includes(props.name));\n\n    const handleFocus = () => {\n      setTimeout(() => {\n        if (!isClick.value) {\n          focusing.value = true;\n        } else {\n          isClick.value = false;\n        }\n      }, 50);\n    };\n\n    const handleHeaderClick = () => {\n      if (props.disabled) return;\n      collapse == null ? void 0 : collapse.handleItemClick(props.name);\n      focusing.value = false;\n      isClick.value = true;\n    };\n\n    const handleEnterClick = () => {\n      collapse == null ? void 0 : collapse.handleItemClick(props.name);\n    };\n\n    expose({\n      isActive\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(\"item\"), unref(ns).is(\"active\", unref(isActive)), unref(ns).is(\"disabled\", _ctx.disabled)])\n      }, [createElementVNode(\"div\", {\n        role: \"tab\",\n        \"aria-expanded\": unref(isActive),\n        \"aria-controls\": unref(ns).b(`content-${id.value}`),\n        \"aria-describedby\": unref(ns).b(`content-${id.value}`)\n      }, [createElementVNode(\"div\", {\n        id: unref(ns).b(`head-${id.value}`),\n        class: normalizeClass([unref(ns).be(\"item\", \"header\"), unref(ns).is(\"active\", unref(isActive)), {\n          focusing: focusing.value && !_ctx.disabled\n        }]),\n        role: \"button\",\n        tabindex: _ctx.disabled ? -1 : 0,\n        onClick: handleHeaderClick,\n        onKeypress: withKeys(withModifiers(handleEnterClick, [\"stop\", \"prevent\"]), [\"space\", \"enter\"]),\n        onFocus: handleFocus,\n        onBlur: _cache[0] || (_cache[0] = $event => focusing.value = false)\n      }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title), 1)]), createVNode(unref(ElIcon), {\n        class: normalizeClass([unref(ns).be(\"item\", \"arrow\"), unref(ns).is(\"active\", unref(isActive))])\n      }, {\n        default: withCtx(() => [createVNode(unref(ArrowRight))]),\n        _: 1\n      }, 8, [\"class\"])], 42, _hoisted_2)], 8, _hoisted_1), createVNode(unref(_CollapseTransition), null, {\n        default: withCtx(() => [withDirectives(createElementVNode(\"div\", {\n          id: unref(ns).b(`content-${id.value}`),\n          class: normalizeClass(unref(ns).be(\"item\", \"wrap\")),\n          role: \"tabpanel\",\n          \"aria-hidden\": !unref(isActive),\n          \"aria-labelledby\": unref(ns).b(`head-${id.value}`)\n        }, [createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"item\", \"content\"))\n        }, [renderSlot(_ctx.$slots, \"default\")], 2)], 10, _hoisted_3), [[vShow, unref(isActive)]])]),\n        _: 3\n      })], 2);\n    };\n  }\n\n});\n\nvar CollapseItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/collapse/src/collapse-item.vue\"]]);\n\nexport { CollapseItem as default };","map":null,"metadata":{},"sourceType":"module"}