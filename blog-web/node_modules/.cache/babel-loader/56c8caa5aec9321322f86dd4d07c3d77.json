{"ast":null,"code":"// Emojies & shortcuts replacement logic.\n//\n// Note: In theory, it could be faster to parse :smile: in inline chain and\n// leave only shortcuts here. But, who care...\n//\n'use strict';\n\nmodule.exports = function create_rule(md, emojies, shortcuts, scanRE, replaceRE) {\n  var arrayReplaceAt = md.utils.arrayReplaceAt,\n      ucm = md.utils.lib.ucmicro,\n      ZPCc = new RegExp([ucm.Z.source, ucm.P.source, ucm.Cc.source].join('|'));\n\n  function splitTextToken(text, level, Token) {\n    var token,\n        last_pos = 0,\n        nodes = [];\n    text.replace(replaceRE, function (match, offset, src) {\n      var emoji_name; // Validate emoji name\n\n      if (shortcuts.hasOwnProperty(match)) {\n        // replace shortcut with full name\n        emoji_name = shortcuts[match]; // Don't allow letters before any shortcut (as in no \":/\" in http://)\n\n        if (offset > 0 && !ZPCc.test(src[offset - 1])) {\n          return;\n        } // Don't allow letters after any shortcut\n\n\n        if (offset + match.length < src.length && !ZPCc.test(src[offset + match.length])) {\n          return;\n        }\n      } else {\n        emoji_name = match.slice(1, -1);\n      } // Add new tokens to pending list\n\n\n      if (offset > last_pos) {\n        token = new Token('text', '', 0);\n        token.content = text.slice(last_pos, offset);\n        nodes.push(token);\n      }\n\n      token = new Token('emoji', '', 0);\n      token.markup = emoji_name;\n      token.content = emojies[emoji_name];\n      nodes.push(token);\n      last_pos = offset + match.length;\n    });\n\n    if (last_pos < text.length) {\n      token = new Token('text', '', 0);\n      token.content = text.slice(last_pos);\n      nodes.push(token);\n    }\n\n    return nodes;\n  }\n\n  return function emoji_replace(state) {\n    var i,\n        j,\n        l,\n        tokens,\n        token,\n        blockTokens = state.tokens,\n        autolinkLevel = 0;\n\n    for (j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') {\n        continue;\n      }\n\n      tokens = blockTokens[j].children; // We scan from the end, to keep position when new tags added.\n      // Use reversed logic in links start/end match\n\n      for (i = tokens.length - 1; i >= 0; i--) {\n        token = tokens[i];\n\n        if (token.type === 'link_open' || token.type === 'link_close') {\n          if (token.info === 'auto') {\n            autolinkLevel -= token.nesting;\n          }\n        }\n\n        if (token.type === 'text' && autolinkLevel === 0 && scanRE.test(token.content)) {\n          // replace current node\n          blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, splitTextToken(token.content, token.level, state.Token));\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["module","exports","create_rule","md","emojies","shortcuts","scanRE","replaceRE","arrayReplaceAt","utils","ucm","lib","ucmicro","ZPCc","RegExp","Z","source","P","Cc","join","splitTextToken","text","level","Token","token","last_pos","nodes","replace","match","offset","src","emoji_name","hasOwnProperty","test","length","slice","content","push","markup","emoji_replace","state","i","j","l","tokens","blockTokens","autolinkLevel","type","children","info","nesting"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-web/node_modules/markdown-it-emoji/lib/replace.js"],"sourcesContent":["// Emojies & shortcuts replacement logic.\n//\n// Note: In theory, it could be faster to parse :smile: in inline chain and\n// leave only shortcuts here. But, who care...\n//\n\n'use strict';\n\n\nmodule.exports = function create_rule(md, emojies, shortcuts, scanRE, replaceRE) {\n  var arrayReplaceAt = md.utils.arrayReplaceAt,\n      ucm = md.utils.lib.ucmicro,\n      ZPCc = new RegExp([ ucm.Z.source, ucm.P.source, ucm.Cc.source ].join('|'));\n\n  function splitTextToken(text, level, Token) {\n    var token, last_pos = 0, nodes = [];\n\n    text.replace(replaceRE, function (match, offset, src) {\n      var emoji_name;\n      // Validate emoji name\n      if (shortcuts.hasOwnProperty(match)) {\n        // replace shortcut with full name\n        emoji_name = shortcuts[match];\n\n        // Don't allow letters before any shortcut (as in no \":/\" in http://)\n        if (offset > 0 && !ZPCc.test(src[offset - 1])) {\n          return;\n        }\n\n        // Don't allow letters after any shortcut\n        if (offset + match.length < src.length && !ZPCc.test(src[offset + match.length])) {\n          return;\n        }\n      } else {\n        emoji_name = match.slice(1, -1);\n      }\n\n      // Add new tokens to pending list\n      if (offset > last_pos) {\n        token         = new Token('text', '', 0);\n        token.content = text.slice(last_pos, offset);\n        nodes.push(token);\n      }\n\n      token         = new Token('emoji', '', 0);\n      token.markup  = emoji_name;\n      token.content = emojies[emoji_name];\n      nodes.push(token);\n\n      last_pos = offset + match.length;\n    });\n\n    if (last_pos < text.length) {\n      token         = new Token('text', '', 0);\n      token.content = text.slice(last_pos);\n      nodes.push(token);\n    }\n\n    return nodes;\n  }\n\n  return function emoji_replace(state) {\n    var i, j, l, tokens, token,\n        blockTokens = state.tokens,\n        autolinkLevel = 0;\n\n    for (j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') { continue; }\n      tokens = blockTokens[j].children;\n\n      // We scan from the end, to keep position when new tags added.\n      // Use reversed logic in links start/end match\n      for (i = tokens.length - 1; i >= 0; i--) {\n        token = tokens[i];\n\n        if (token.type === 'link_open' || token.type === 'link_close') {\n          if (token.info === 'auto') { autolinkLevel -= token.nesting; }\n        }\n\n        if (token.type === 'text' && autolinkLevel === 0 && scanRE.test(token.content)) {\n          // replace current node\n          blockTokens[j].children = tokens = arrayReplaceAt(\n            tokens, i, splitTextToken(token.content, token.level, state.Token)\n          );\n        }\n      }\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}