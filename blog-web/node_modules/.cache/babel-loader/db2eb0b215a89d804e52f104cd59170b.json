{"ast":null,"code":"/* Process inline math */\n\n/*\nLike markdown-it-simplemath, this is a stripped down, simplified version of:\nhttps://github.com/runarberg/markdown-it-math\n\nIt differs in that it takes (a subset of) LaTeX as input and relies on KaTeX\nfor rendering output.\n*/\n\n/*jslint node: true */\n'use strict';\n\nvar katex = require('katex'); // Test if potential opening or closing delimieter\n// Assumes that there is a \"$\" at state.src[pos]\n\n\nfunction isValidDelim(state, pos) {\n  var prevChar,\n      nextChar,\n      max = state.posMax,\n      can_open = true,\n      can_close = true;\n  prevChar = pos > 0 ? state.src.charCodeAt(pos - 1) : -1;\n  nextChar = pos + 1 <= max ? state.src.charCodeAt(pos + 1) : -1; // Check non-whitespace conditions for opening and closing, and\n  // check that closing delimeter isn't followed by a number\n\n  if (prevChar === 0x20\n  /* \" \" */\n  || prevChar === 0x09\n  /* \\t */\n  || nextChar >= 0x30\n  /* \"0\" */\n  && nextChar <= 0x39\n  /* \"9\" */\n  ) {\n    can_close = false;\n  }\n\n  if (nextChar === 0x20\n  /* \" \" */\n  || nextChar === 0x09\n  /* \\t */\n  ) {\n    can_open = false;\n  }\n\n  return {\n    can_open: can_open,\n    can_close: can_close\n  };\n}\n\nfunction math_inline(state, silent) {\n  var start, match, token, res, pos, esc_count;\n\n  if (state.src[state.pos] !== \"$\") {\n    return false;\n  }\n\n  res = isValidDelim(state, state.pos);\n\n  if (!res.can_open) {\n    if (!silent) {\n      state.pending += \"$\";\n    }\n\n    state.pos += 1;\n    return true;\n  } // First check for and bypass all properly escaped delimieters\n  // This loop will assume that the first leading backtick can not\n  // be the first character in state.src, which is known since\n  // we have found an opening delimieter already.\n\n\n  start = state.pos + 1;\n  match = start;\n\n  while ((match = state.src.indexOf(\"$\", match)) !== -1) {\n    // Found potential $, look for escapes, pos will point to\n    // first non escape when complete\n    pos = match - 1;\n\n    while (state.src[pos] === \"\\\\\") {\n      pos -= 1;\n    } // Even number of escapes, potential closing delimiter found\n\n\n    if ((match - pos) % 2 == 1) {\n      break;\n    }\n\n    match += 1;\n  } // No closing delimter found.  Consume $ and continue.\n\n\n  if (match === -1) {\n    if (!silent) {\n      state.pending += \"$\";\n    }\n\n    state.pos = start;\n    return true;\n  } // Check if we have empty content, ie: $$.  Do not parse.\n\n\n  if (match - start === 0) {\n    if (!silent) {\n      state.pending += \"$$\";\n    }\n\n    state.pos = start + 1;\n    return true;\n  } // Check for valid closing delimiter\n\n\n  res = isValidDelim(state, match);\n\n  if (!res.can_close) {\n    if (!silent) {\n      state.pending += \"$\";\n    }\n\n    state.pos = start;\n    return true;\n  }\n\n  if (!silent) {\n    token = state.push('math_inline', 'math', 0);\n    token.markup = \"$\";\n    token.content = state.src.slice(start, match);\n  }\n\n  state.pos = match + 1;\n  return true;\n}\n\nfunction math_block(state, start, end, silent) {\n  var firstLine,\n      lastLine,\n      next,\n      lastPos,\n      found = false,\n      token,\n      pos = state.bMarks[start] + state.tShift[start],\n      max = state.eMarks[start];\n\n  if (pos + 2 > max) {\n    return false;\n  }\n\n  if (state.src.slice(pos, pos + 2) !== '$$') {\n    return false;\n  }\n\n  pos += 2;\n  firstLine = state.src.slice(pos, max);\n\n  if (silent) {\n    return true;\n  }\n\n  if (firstLine.trim().slice(-2) === '$$') {\n    // Single line expression\n    firstLine = firstLine.trim().slice(0, -2);\n    found = true;\n  }\n\n  for (next = start; !found;) {\n    next++;\n\n    if (next >= end) {\n      break;\n    }\n\n    pos = state.bMarks[next] + state.tShift[next];\n    max = state.eMarks[next];\n\n    if (pos < max && state.tShift[next] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      break;\n    }\n\n    if (state.src.slice(pos, max).trim().slice(-2) === '$$') {\n      lastPos = state.src.slice(0, max).lastIndexOf('$$');\n      lastLine = state.src.slice(pos, lastPos);\n      found = true;\n    }\n  }\n\n  state.line = next + 1;\n  token = state.push('math_block', 'math', 0);\n  token.block = true;\n  token.content = (firstLine && firstLine.trim() ? firstLine + '\\n' : '') + state.getLines(start + 1, next, state.tShift[start], true) + (lastLine && lastLine.trim() ? lastLine : '');\n  token.map = [start, state.line];\n  token.markup = '$$';\n  return true;\n}\n\nfunction escapeHtml(unsafe) {\n  return unsafe.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n}\n\nmodule.exports = function math_plugin(md, options) {\n  // Default options\n  options = options || {}; // set KaTeX as the renderer for markdown-it-simplemath\n\n  var katexInline = function (latex) {\n    options.displayMode = false;\n\n    try {\n      return katex.renderToString(latex, options);\n    } catch (error) {\n      if (options.throwOnError) {\n        console.log(error);\n      }\n\n      return `<span class='katex-error' title='${escapeHtml(error.toString())}'>${escapeHtml(latex)}</span>`;\n    }\n  };\n\n  var inlineRenderer = function (tokens, idx) {\n    return katexInline(tokens[idx].content);\n  };\n\n  var katexBlock = function (latex) {\n    options.displayMode = true;\n\n    try {\n      return \"<p class='katex-block'>\" + katex.renderToString(latex, options) + \"</p>\";\n    } catch (error) {\n      if (options.throwOnError) {\n        console.log(error);\n      }\n\n      return `<p class='katex-block katex-error' title='${escapeHtml(error.toString())}'>${escapeHtml(latex)}</p>`;\n    }\n  };\n\n  var blockRenderer = function (tokens, idx) {\n    return katexBlock(tokens[idx].content) + '\\n';\n  };\n\n  md.inline.ruler.after('escape', 'math_inline', math_inline);\n  md.block.ruler.after('blockquote', 'math_block', math_block, {\n    alt: ['paragraph', 'reference', 'blockquote', 'list']\n  });\n  md.renderer.rules.math_inline = inlineRenderer;\n  md.renderer.rules.math_block = blockRenderer;\n};","map":null,"metadata":{},"sourceType":"script"}