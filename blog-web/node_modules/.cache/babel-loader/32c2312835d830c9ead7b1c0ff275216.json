{"ast":null,"code":"// GFM table, https://github.github.com/gfm/#tables-extension-\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n  return state.src.slice(pos, max);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n  ch = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c\n    /* | */\n    ) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = ch === 0x5c\n    /* \\ */\n    ;\n    pos++;\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n  return result;\n}\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh; // should have at least two lines\n\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  } // if it's indented more than 3 spaces, it should be a code block\n\n\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  } // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n\n  firstCh = state.src.charCodeAt(pos++);\n\n  if (firstCh !== 0x7C\n  /* | */\n  && firstCh !== 0x2D\n  /* - */\n  && firstCh !== 0x3A\n  /* : */\n  ) {\n    return false;\n  }\n\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n\n  secondCh = state.src.charCodeAt(pos++);\n\n  if (secondCh !== 0x7C\n  /* | */\n  && secondCh !== 0x2D\n  /* - */\n  && secondCh !== 0x3A\n  /* : */\n  && !isSpace(secondCh)) {\n    return false;\n  } // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n\n\n  if (firstCh === 0x2D\n  /* - */\n  && isSpace(secondCh)) {\n    return false;\n  }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C\n    /* | */\n    && ch !== 0x2D\n    /* - */\n    && ch !== 0x3A\n    /* : */\n    && !isSpace(ch)) {\n      return false;\n    }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n  columns = lineText.split('|');\n  aligns = [];\n\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n\n    if (t.charCodeAt(t.length - 1) === 0x3A\n    /* : */\n    ) {\n      aligns.push(t.charCodeAt(0) === 0x3A\n      /* : */\n      ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A\n    /* : */\n    ) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n\n  if (lineText.indexOf('|') === -1) {\n    return false;\n  }\n\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop(); // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n\n  columnCount = columns.length;\n\n  if (columnCount === 0 || columnCount !== aligns.length) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table'; // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n  token = state.push('table_open', 'table', 1);\n  token.map = tableLines = [startLine, 0];\n  token = state.push('thead_open', 'thead', 1);\n  token.map = [startLine, startLine + 1];\n  token = state.push('tr_open', 'tr', 1);\n  token.map = [startLine, startLine + 1];\n\n  for (i = 0; i < columns.length; i++) {\n    token = state.push('th_open', 'th', 1);\n\n    if (aligns[i]) {\n      token.attrs = [['style', 'text-align:' + aligns[i]]];\n    }\n\n    token = state.push('inline', '', 0);\n    token.content = columns[i].trim();\n    token.children = [];\n    token = state.push('th_close', 'th', -1);\n  }\n\n  token = state.push('tr_close', 'tr', -1);\n  token = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n\n    terminate = false;\n\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      break;\n    }\n\n    lineText = getLine(state, nextLine).trim();\n\n    if (!lineText) {\n      break;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [startLine + 2, 0];\n    }\n\n    token = state.push('tr_open', 'tr', 1);\n    token.map = [nextLine, nextLine + 1];\n\n    for (i = 0; i < columnCount; i++) {\n      token = state.push('td_open', 'td', 1);\n\n      if (aligns[i]) {\n        token.attrs = [['style', 'text-align:' + aligns[i]]];\n      }\n\n      token = state.push('inline', '', 0);\n      token.content = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n      token = state.push('td_close', 'td', -1);\n    }\n\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};","map":{"version":3,"names":["isSpace","require","getLine","state","line","pos","bMarks","tShift","max","eMarks","src","slice","escapedSplit","str","result","length","ch","isEscaped","lastPos","current","charCodeAt","push","substring","module","exports","table","startLine","endLine","silent","lineText","i","l","nextLine","columns","columnCount","token","aligns","t","tableLines","tbodyLines","oldParentType","terminate","terminatorRules","firstCh","secondCh","sCount","blkIndent","split","trim","test","indexOf","shift","pop","parentType","md","block","ruler","getRules","map","attrs","content","children"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-web/node_modules/markdown-it/lib/rules_block/table.js"],"sourcesContent":["// GFM table, https://github.github.com/gfm/#tables-extension-\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  return state.src.slice(pos, max);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */);\n    pos++;\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines, oldParentType, terminate,\n      terminatorRules, firstCh, secondCh;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }\n\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) { break; }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token     = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [ startLine + 2, 0 ];\n    }\n\n    token     = state.push('tr_open', 'tr', 1);\n    token.map = [ nextLine, nextLine + 1 ];\n\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}