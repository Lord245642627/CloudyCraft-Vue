{"ast":null,"code":"import e from \"@babel/runtime/helpers/slicedToArray\";\nimport t from \"@babel/runtime/helpers/asyncToGenerator\";\nimport r from \"@babel/runtime/regenerator\";\nimport \"cropperjs/dist/cropper.css\";\nimport a from \"cropperjs\";\nimport n from \"mime/lite\";\nimport { defineComponent as i, openBlock as o, createElementBlock as p, normalizeClass as l, createElementVNode as c, createCommentVNode as s, withModifiers as u, toDisplayString as m } from \"vue\";\nvar d = i({\n  name: \"AvatarCropper\",\n  emits: [\"update:modelValue\", \"submit\", \"error\", \"cancel\", \"changed\", \"uploading\", \"completed\", \"uploaded\"],\n  props: {\n    modelValue: {\n      type: Boolean,\n      default: !1\n    },\n    file: {\n      type: File\n    },\n    uploadHandler: {\n      type: Function\n    },\n    uploadUrl: {\n      type: String\n    },\n    requestOptions: {\n      type: Object,\n      default: function () {\n        return {\n          method: \"POST\"\n        };\n      }\n    },\n    uploadFileField: {\n      type: String,\n      default: \"file\"\n    },\n    uploadFileName: {\n      type: [String, Function]\n    },\n    uploadFormData: {\n      type: FormData,\n      default: function () {\n        return new FormData();\n      }\n    },\n    cropperOptions: {\n      type: Object,\n      default: function () {\n        return {\n          aspectRatio: 1,\n          autoCropArea: 1,\n          viewMode: 1,\n          movable: !1,\n          zoomable: !1\n        };\n      }\n    },\n    outputOptions: {\n      type: Object\n    },\n    outputMime: {\n      type: String,\n      default: null\n    },\n    outputQuality: {\n      type: Number,\n      default: .9\n    },\n    mimes: {\n      type: String,\n      default: \"image/png, image/gif, image/jpeg, image/bmp, image/x-icon\"\n    },\n    capture: {\n      type: String\n    },\n    labels: {\n      type: Object,\n      default: function () {\n        return {\n          submit: \"Ok\",\n          cancel: \"Cancel\"\n        };\n      }\n    },\n    inline: {\n      type: Boolean,\n      default: !1\n    }\n  },\n  data: function () {\n    return {\n      cropper: void 0,\n      dataUrl: void 0,\n      fileName: void 0,\n      mimeType: void 0\n    };\n  },\n  computed: {\n    cleanedMimes: function () {\n      if (!this.mimes) throw new Error(\"vue-avatar-cropper: mimes prop cannot be empty\");\n      return this.mimes.trim().toLowerCase();\n    }\n  },\n  watch: {\n    modelValue: function (e) {\n      e && (this.file ? this.onFileChange(this.file) : this.pickImage(), this.$emit(\"update:modelValue\", !1));\n    }\n  },\n  mounted: function () {\n    this.$emit(\"update:modelValue\", !1);\n  },\n  methods: {\n    destroy: function () {\n      this.cropper && this.cropper.destroy(), this.$refs.input && (this.$refs.input.value = \"\"), this.dataUrl = void 0;\n    },\n    submit: function () {\n      this.$emit(\"submit\"), this.uploadUrl ? this.uploadImage() : this.uploadHandler ? this.uploadHandler(this.cropper) : this.$emit(\"error\", {\n        type: \"user\",\n        message: \"No upload handler found\"\n      }), this.destroy();\n    },\n    cancel: function () {\n      this.$emit(\"cancel\"), this.destroy();\n    },\n    onImgElementError: function () {\n      this.$emit(\"error\", {\n        type: \"load\",\n        message: \"File loading failed\"\n      }), this.destroy();\n    },\n    pickImage: function () {\n      this.$refs.input && this.$refs.input.click();\n    },\n    onFileChange: function (e) {\n      var t = this;\n\n      if (\"image/*\" === this.cleanedMimes) {\n        if (\"image\" !== e.type.split(\"/\")[0]) return void this.$emit(\"error\", {\n          type: \"user\",\n          message: \"File type not correct\"\n        });\n      } else if (this.cleanedMimes) {\n        var r = this.cleanedMimes.split(\", \").find(function (t) {\n          return t === e.type;\n        });\n        if (!r) return void this.$emit(\"error\", {\n          type: \"user\",\n          message: \"File type not correct\"\n        });\n      }\n\n      var a = new FileReader();\n      a.onload = function (e) {\n        t.dataUrl = e.target.result;\n      }, a.readAsDataURL(e), this.fileName = e.name || \"unknown\", this.mimeType = e.type, this.$emit(\"changed\", {\n        file: e,\n        reader: a\n      });\n    },\n    onFileInputChange: function (e) {\n      e.target.files && e.target.files[0] && this.onFileChange(e.target.files[0]);\n    },\n    createCropper: function () {\n      this.cropper = new a(this.$refs.img, this.cropperOptions);\n    },\n    getFilename: function (e) {\n      var t = n.getExtension(e.type);\n\n      if (!this.uploadFileName) {\n        var r = this.fileName,\n            a = this.fileName.split(\".\");\n        return a.length > 1 && (r = a.slice(0, -1).join(\".\")), \"\".concat(r, \".\").concat(t);\n      }\n\n      return \"string\" == typeof this.uploadFileName ? this.uploadFileName : \"function\" == typeof this.uploadFileName ? this.uploadFileName({\n        filename: this.fileName,\n        mime: e.type,\n        extension: t\n      }) : \"unknown.\".concat(t);\n    },\n    uploadImage: function () {\n      var a = this;\n      this.cropper.getCroppedCanvas(this.outputOptions).toBlob(function () {\n        var n = t(r.mark(function t(n) {\n          var i, o, p, l, c, s, u, m, d;\n          return r.wrap(function (t) {\n            for (;;) switch (t.prev = t.next) {\n              case 0:\n                for (o in i = new FormData(), a.uploadFormData.entries()) p = e(o, 2), l = p[0], c = p[1], i.append(l, c);\n\n                return i.append(a.uploadFileField, n, a.getFilename(n)), s = Object.assign({\n                  body: i\n                }, a.requestOptions), u = new Request(a.uploadUrl, s), m = fetch(u), a.$emit(\"uploading\", {\n                  form: i,\n                  request: u,\n                  response: m\n                }), t.next = 9, m;\n\n              case 9:\n                d = t.sent, a.$emit(\"completed\", {\n                  form: i,\n                  request: u,\n                  response: d\n                }), d.ok ? a.$emit(\"uploaded\", {\n                  form: i,\n                  request: u,\n                  response: d\n                }) : a.$emit(\"error\", {\n                  type: \"upload\",\n                  message: \"Image upload fail\",\n                  context: {\n                    request: u,\n                    response: d\n                  }\n                });\n\n              case 12:\n              case \"end\":\n                return t.stop();\n            }\n          }, t);\n        }));\n        return function (e) {\n          return n.apply(this, arguments);\n        };\n      }(), this.outputMime || this.mimeType, this.outputQuality);\n    }\n  }\n}),\n    f = {\n  class: \"avatar-cropper\"\n},\n    h = {\n  key: 0,\n  class: \"avatar-cropper-mark\"\n},\n    v = [\"title\"],\n    g = {\n  class: \"avatar-cropper-container\"\n},\n    y = {\n  class: \"avatar-cropper-image-container\"\n},\n    b = [\"src\"],\n    x = {\n  class: \"avatar-cropper-footer\"\n},\n    F = [\"accept\", \"capture\"];\n!function (e, t) {\n  void 0 === t && (t = {});\n  var r = t.insertAt;\n\n  if (e && \"undefined\" != typeof document) {\n    var a = document.head || document.getElementsByTagName(\"head\")[0],\n        n = document.createElement(\"style\");\n    n.type = \"text/css\", \"top\" === r && a.firstChild ? a.insertBefore(n, a.firstChild) : a.appendChild(n), n.styleSheet ? n.styleSheet.cssText = e : n.appendChild(document.createTextNode(e));\n  }\n}(\".avatar-cropper .avatar-cropper-overlay {\\n  text-align: center;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  z-index: 99999; }\\n\\n.avatar-cropper .avatar-cropper-overlay-inline {\\n  position: initial; }\\n\\n.avatar-cropper .avatar-cropper-img-input {\\n  display: none; }\\n\\n.avatar-cropper .avatar-cropper-close {\\n  float: right;\\n  padding: 20px;\\n  font-size: 3rem;\\n  color: #fff;\\n  font-weight: 100;\\n  text-shadow: 0px 1px rgba(40, 40, 40, 0.3); }\\n\\n.avatar-cropper .avatar-cropper-mark {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background: rgba(0, 0, 0, 0.1); }\\n\\n.avatar-cropper .avatar-cropper-container {\\n  background: #fff;\\n  z-index: 999;\\n  box-shadow: 1px 1px 5px rgba(100, 100, 100, 0.14); }\\n  .avatar-cropper .avatar-cropper-container .avatar-cropper-image-container {\\n    position: relative;\\n    max-width: 400px;\\n    height: 300px; }\\n  .avatar-cropper .avatar-cropper-container img {\\n    max-width: 100%;\\n    height: 100%; }\\n  .avatar-cropper .avatar-cropper-container .avatar-cropper-footer {\\n    display: flex;\\n    align-items: stretch;\\n    align-content: stretch;\\n    justify-content: space-between; }\\n    .avatar-cropper .avatar-cropper-container .avatar-cropper-footer .avatar-cropper-btn {\\n      width: 50%;\\n      padding: 15px 0;\\n      cursor: pointer;\\n      border: none;\\n      background: transparent;\\n      outline: none; }\\n      .avatar-cropper .avatar-cropper-container .avatar-cropper-footer .avatar-cropper-btn:hover {\\n        background-color: #2aabd2;\\n        color: #fff; }\\n\"), d.render = function (e, t, r, a, n, i) {\n  return o(), p(\"div\", f, [e.dataUrl ? (o(), p(\"div\", {\n    key: 0,\n    class: l([\"avatar-cropper-overlay\", {\n      \"avatar-cropper-overlay-inline\": e.inline\n    }])\n  }, [e.inline ? s(\"\", !0) : (o(), p(\"div\", h, [c(\"a\", {\n    onClick: t[0] || (t[0] = function () {\n      return e.cancel && e.cancel.apply(e, arguments);\n    }),\n    class: \"avatar-cropper-close\",\n    title: e.labels.cancel,\n    href: \"javascript:;\"\n  }, \" Ã— \", 8, v)])), c(\"div\", g, [c(\"div\", y, [c(\"img\", {\n    ref: \"img\",\n    src: e.dataUrl,\n    alt: \"\",\n    onLoad: t[1] || (t[1] = u(function () {\n      return e.createCropper && e.createCropper.apply(e, arguments);\n    }, [\"stop\"])),\n    onError: t[2] || (t[2] = function () {\n      return e.onImgElementError && e.onImgElementError.apply(e, arguments);\n    })\n  }, null, 40, b)]), c(\"div\", x, [c(\"button\", {\n    onClick: t[3] || (t[3] = u(function () {\n      return e.cancel && e.cancel.apply(e, arguments);\n    }, [\"stop\", \"prevent\"])),\n    class: \"avatar-cropper-btn\"\n  }, m(e.labels.cancel), 1), c(\"button\", {\n    onClick: t[4] || (t[4] = u(function () {\n      return e.submit && e.submit.apply(e, arguments);\n    }, [\"stop\", \"prevent\"])),\n    class: \"avatar-cropper-btn\"\n  }, m(e.labels.submit), 1)])])], 2)) : s(\"\", !0), e.file ? s(\"\", !0) : (o(), p(\"input\", {\n    key: 1,\n    accept: e.cleanedMimes,\n    capture: e.capture,\n    class: \"avatar-cropper-img-input\",\n    ref: \"input\",\n    type: \"file\",\n    onChange: t[5] || (t[5] = function () {\n      return e.onFileInputChange && e.onFileInputChange.apply(e, arguments);\n    })\n  }, null, 40, F))]);\n}, d.install = function (e) {\n  e.component(\"avatar-cropper\", d);\n};\nexport { d as default };","map":null,"metadata":{},"sourceType":"module"}