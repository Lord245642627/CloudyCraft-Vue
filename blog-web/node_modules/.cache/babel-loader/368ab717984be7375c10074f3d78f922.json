{"ast":null,"code":"import { defineComponent, ref, computed, onMounted, resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, resolveDynamicComponent, createCommentVNode, toDisplayString, renderSlot, createElementBlock, Fragment, vShow, withModifiers, createVNode } from 'vue';\nimport { useTimeoutFn, useEventListener } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { notificationProps, notificationEmits } from './notification.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElNotification\",\n  components: {\n    ElIcon,\n    ...TypeComponents\n  },\n  props: notificationProps,\n  emits: notificationEmits,\n\n  setup(props) {\n    const ns = useNamespace(\"notification\");\n    const visible = ref(false);\n    let timer = void 0;\n    const typeClass = computed(() => {\n      const type = props.type;\n      return type && TypeComponentsMap[props.type] ? ns.m(type) : \"\";\n    });\n    const iconComponent = computed(() => {\n      return TypeComponentsMap[props.type] || props.icon || \"\";\n    });\n    const horizontalClass = computed(() => props.position.endsWith(\"right\") ? \"right\" : \"left\");\n    const verticalProperty = computed(() => props.position.startsWith(\"top\") ? \"top\" : \"bottom\");\n    const positionStyle = computed(() => {\n      return {\n        [verticalProperty.value]: `${props.offset}px`,\n        zIndex: props.zIndex\n      };\n    });\n\n    function startTimer() {\n      if (props.duration > 0) {\n        ;\n        ({\n          stop: timer\n        } = useTimeoutFn(() => {\n          if (visible.value) close();\n        }, props.duration));\n      }\n    }\n\n    function clearTimer() {\n      timer == null ? void 0 : timer();\n    }\n\n    function close() {\n      visible.value = false;\n    }\n\n    function onKeydown({\n      code\n    }) {\n      if (code === EVENT_CODE.delete || code === EVENT_CODE.backspace) {\n        clearTimer();\n      } else if (code === EVENT_CODE.esc) {\n        if (visible.value) {\n          close();\n        }\n      } else {\n        startTimer();\n      }\n    }\n\n    onMounted(() => {\n      startTimer();\n      visible.value = true;\n    });\n    useEventListener(document, \"keydown\", onKeydown);\n    return {\n      ns,\n      horizontalClass,\n      typeClass,\n      iconComponent,\n      positionStyle,\n      visible,\n      close,\n      clearTimer,\n      startTimer\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = [\"textContent\"];\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = [\"innerHTML\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_close = resolveComponent(\"close\");\n\n  return openBlock(), createBlock(Transition, {\n    name: _ctx.ns.b(\"fade\"),\n    onBeforeLeave: _ctx.onClose,\n    onAfterLeave: _cache[3] || (_cache[3] = $event => _ctx.$emit(\"destroy\")),\n    persisted: \"\"\n  }, {\n    default: withCtx(() => [withDirectives(createElementVNode(\"div\", {\n      id: _ctx.id,\n      class: normalizeClass([_ctx.ns.b(), _ctx.customClass, _ctx.horizontalClass]),\n      style: normalizeStyle(_ctx.positionStyle),\n      role: \"alert\",\n      onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.clearTimer && _ctx.clearTimer(...args)),\n      onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.startTimer && _ctx.startTimer(...args)),\n      onClick: _cache[2] || (_cache[2] = (...args) => _ctx.onClick && _ctx.onClick(...args))\n    }, [_ctx.iconComponent ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass([_ctx.ns.e(\"icon\"), _ctx.typeClass])\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n      _: 1\n    }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"group\"))\n    }, [createElementVNode(\"h2\", {\n      class: normalizeClass(_ctx.ns.e(\"title\")),\n      textContent: toDisplayString(_ctx.title)\n    }, null, 10, _hoisted_2), withDirectives(createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"content\")),\n      style: normalizeStyle(!!_ctx.title ? void 0 : {\n        margin: 0\n      })\n    }, [renderSlot(_ctx.$slots, \"default\", {}, () => [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", _hoisted_3, toDisplayString(_ctx.message), 1)) : (openBlock(), createElementBlock(Fragment, {\n      key: 1\n    }, [createCommentVNode(\" Caution here, message could've been compromized, nerver use user's input as message \"), createCommentVNode(\" eslint-disable-next-line \"), createElementVNode(\"p\", {\n      innerHTML: _ctx.message\n    }, null, 8, _hoisted_4)], 2112))])], 6), [[vShow, _ctx.message]]), _ctx.showClose ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass(_ctx.ns.e(\"closeBtn\")),\n      onClick: withModifiers(_ctx.close, [\"stop\"])\n    }, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 2)], 46, _hoisted_1), [[vShow, _ctx.visible]])]),\n    _: 3\n  }, 8, [\"name\", \"onBeforeLeave\"]);\n}\n\nvar NotificationConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/notification/src/notification.vue\"]]);\n\nexport { NotificationConstructor as default };","map":null,"metadata":{},"sourceType":"module"}