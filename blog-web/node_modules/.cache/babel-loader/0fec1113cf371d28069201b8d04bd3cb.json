{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElColorHueSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: Boolean\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance();\n    const thumb = ref(null);\n    const bar = ref(null);\n    const thumbLeft = ref(0);\n    const thumbTop = ref(0);\n    const hueValue = computed(() => {\n      return props.color.get(\"hue\");\n    });\n    watch(() => hueValue.value, () => {\n      update();\n    });\n\n    function handleClick(event) {\n      const target = event.target;\n\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      let hue;\n\n      if (!props.vertical) {\n        let left = clientX - rect.left;\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        hue = Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 360);\n      } else {\n        let top = clientY - rect.top;\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        hue = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);\n      }\n\n      props.color.set(\"hue\", hue);\n    }\n\n    function getThumbLeft() {\n      const el = instance.vnode.el;\n      if (props.vertical) return 0;\n      const hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      const hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n    }\n\n    onMounted(() => {\n      const dragConfig = {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-color-hue-slider\", {\n      \"is-vertical\": _ctx.vertical\n    }])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    class: \"el-color-hue-slider__bar\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, null, 512), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    class: \"el-color-hue-slider__thumb\",\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 4)], 2);\n}\n\nvar HueSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/hue-slider.vue\"]]);\n\nexport { HueSlider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","vertical","setup","instance","getCurrentInstance","ref","computed","get","watch","hueValue","update","event","target","thumb","value","handleDrag","vnode","el","getBoundingClientRect","clientX","clientY","getClientXY","rect","left","min","width","offsetWidth","Math","max","hue","top","height","offsetHeight","set","round","thumbLeft","getThumbLeft","thumbTop","getThumbTop","onMounted","dragConfig","drag","end","draggable","bar","handleClick","_createElementBlock","class","_ctx","_createElementVNode","onClick","_cache","style"],"sources":["../../../../../../../packages/components/color-picker/src/components/hue-slider.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-hue-slider\" :class=\"{ 'is-vertical': vertical }\">\n    <div ref=\"bar\" class=\"el-color-hue-slider__bar\" @click=\"handleClick\" />\n    <div\n      ref=\"thumb\"\n      class=\"el-color-hue-slider__thumb\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElColorHueSlider',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n\n    vertical: Boolean,\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = ref<HTMLElement | null>(null)\n    const bar = ref<HTMLElement | null>(null)\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    // computed\n    const hueValue = computed(() => {\n      return props.color.get('hue')\n    })\n    // watch\n    watch(\n      () => hueValue.value,\n      () => {\n        update()\n      }\n    )\n\n    // methods\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n      let hue\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n\n        hue = Math.round(\n          ((left - thumb.value.offsetWidth / 2) /\n            (rect.width - thumb.value.offsetWidth)) *\n            360\n        )\n      } else {\n        let top = clientY - rect.top\n\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        hue = Math.round(\n          ((top - thumb.value.offsetHeight / 2) /\n            (rect.height - thumb.value.offsetHeight)) *\n            360\n        )\n      }\n      props.color.set('hue', hue)\n    }\n\n    function getThumbLeft() {\n      const el = instance.vnode.el\n\n      if (props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 360\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el as HTMLElement\n      if (!props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 360\n      )\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}