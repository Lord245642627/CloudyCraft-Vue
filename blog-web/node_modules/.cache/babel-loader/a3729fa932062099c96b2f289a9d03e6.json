{"ast":null,"code":"import { defineComponent, useSlots, computed, ref, provide, openBlock, createBlock, Teleport, createVNode, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, createSlots, renderSlot, createCommentVNode, vShow } from 'vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport ElDialogContent from './dialog-content2.mjs';\nimport { dialogProps, dialogEmits } from './dialog.mjs';\nimport { useDialog } from './use-dialog.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { dialogInjectionKey } from '../../../tokens/dialog.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nconst _hoisted_1 = [\"aria-label\", \"aria-labelledby\", \"aria-describedby\"];\nconst __default__ = {\n  name: \"ElDialog\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: dialogProps,\n  emits: dialogEmits,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const slots = useSlots();\n    useDeprecated({\n      scope: \"el-dialog\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/dialog.html#slots\"\n    }, computed(() => !!slots.title));\n    const ns = useNamespace(\"dialog\");\n    const dialogRef = ref();\n    const headerRef = ref();\n    const dialogContentRef = ref();\n    const {\n      visible,\n      titleId,\n      bodyId,\n      style,\n      rendered,\n      zIndex,\n      afterEnter,\n      afterLeave,\n      beforeLeave,\n      handleClose,\n      onModalClick,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      onCloseRequested\n    } = useDialog(props, dialogRef);\n    provide(dialogInjectionKey, {\n      dialogRef,\n      headerRef,\n      bodyId,\n      ns,\n      rendered,\n      style\n    });\n    const overlayEvent = useSameTarget(onModalClick);\n    const draggable = computed(() => props.draggable && !props.fullscreen);\n    expose({\n      visible,\n      dialogContentRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Teleport, {\n        to: \"body\",\n        disabled: !_ctx.appendToBody\n      }, [createVNode(Transition, {\n        name: \"dialog-fade\",\n        onAfterEnter: unref(afterEnter),\n        onAfterLeave: unref(afterLeave),\n        onBeforeLeave: unref(beforeLeave),\n        persisted: \"\"\n      }, {\n        default: withCtx(() => [withDirectives(createVNode(unref(ElOverlay), {\n          \"custom-mask-event\": \"\",\n          mask: _ctx.modal,\n          \"overlay-class\": _ctx.modalClass,\n          \"z-index\": unref(zIndex)\n        }, {\n          default: withCtx(() => [createElementVNode(\"div\", {\n            role: \"dialog\",\n            \"aria-modal\": \"true\",\n            \"aria-label\": _ctx.title || void 0,\n            \"aria-labelledby\": !_ctx.title ? unref(titleId) : void 0,\n            \"aria-describedby\": unref(bodyId),\n            class: normalizeClass(`${unref(ns).namespace.value}-overlay-dialog`),\n            onClick: _cache[0] || (_cache[0] = (...args) => unref(overlayEvent).onClick && unref(overlayEvent).onClick(...args)),\n            onMousedown: _cache[1] || (_cache[1] = (...args) => unref(overlayEvent).onMousedown && unref(overlayEvent).onMousedown(...args)),\n            onMouseup: _cache[2] || (_cache[2] = (...args) => unref(overlayEvent).onMouseup && unref(overlayEvent).onMouseup(...args))\n          }, [createVNode(unref(ElFocusTrap), {\n            loop: \"\",\n            trapped: unref(visible),\n            \"focus-start-el\": \"container\",\n            onFocusAfterTrapped: unref(onOpenAutoFocus),\n            onFocusAfterReleased: unref(onCloseAutoFocus),\n            onReleaseRequested: unref(onCloseRequested)\n          }, {\n            default: withCtx(() => [unref(rendered) ? (openBlock(), createBlock(ElDialogContent, {\n              key: 0,\n              ref_key: \"dialogContentRef\",\n              ref: dialogContentRef,\n              \"custom-class\": _ctx.customClass,\n              center: _ctx.center,\n              \"close-icon\": _ctx.closeIcon,\n              draggable: unref(draggable),\n              fullscreen: _ctx.fullscreen,\n              \"show-close\": _ctx.showClose,\n              title: _ctx.title,\n              onClose: unref(handleClose)\n            }, createSlots({\n              header: withCtx(() => [!_ctx.$slots.title ? renderSlot(_ctx.$slots, \"header\", {\n                key: 0,\n                close: unref(handleClose),\n                titleId: unref(titleId),\n                titleClass: unref(ns).e(\"title\")\n              }) : renderSlot(_ctx.$slots, \"title\", {\n                key: 1\n              })]),\n              default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n              _: 2\n            }, [_ctx.$slots.footer ? {\n              name: \"footer\",\n              fn: withCtx(() => [renderSlot(_ctx.$slots, \"footer\")])\n            } : void 0]), 1032, [\"custom-class\", \"center\", \"close-icon\", \"draggable\", \"fullscreen\", \"show-close\", \"title\", \"onClose\"])) : createCommentVNode(\"v-if\", true)]),\n            _: 3\n          }, 8, [\"trapped\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onReleaseRequested\"])], 42, _hoisted_1)]),\n          _: 3\n        }, 8, [\"mask\", \"overlay-class\", \"z-index\"]), [[vShow, unref(visible)]])]),\n        _: 3\n      }, 8, [\"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n    };\n  }\n\n});\n\nvar Dialog = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue\"]]);\n\nexport { Dialog as default };","map":null,"metadata":{},"sourceType":"module"}