{"ast":null,"code":"import { h, render, watch, isVNode } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport MessageBoxConstructor from './index.mjs';\nimport { hasOwn, isString, isObject } from '@vue/shared';\nimport { isUndefined } from '../../../utils/types.mjs';\nconst messageInstance = /* @__PURE__ */new Map();\n\nconst initInstance = (props, container, appContext = null) => {\n  const vnode = h(MessageBoxConstructor, props);\n  vnode.appContext = appContext;\n  render(vnode, container);\n  document.body.appendChild(container.firstElementChild);\n  return vnode.component;\n};\n\nconst genContainer = () => {\n  return document.createElement(\"div\");\n};\n\nconst showMessage = (options, appContext) => {\n  const container = genContainer();\n\n  options.onVanish = () => {\n    render(null, container);\n    messageInstance.delete(vm);\n  };\n\n  options.onAction = action => {\n    const currentMsg = messageInstance.get(vm);\n    let resolve;\n\n    if (options.showInput) {\n      resolve = {\n        value: vm.inputValue,\n        action\n      };\n    } else {\n      resolve = action;\n    }\n\n    if (options.callback) {\n      options.callback(resolve, instance.proxy);\n    } else {\n      if (action === \"cancel\" || action === \"close\") {\n        if (options.distinguishCancelAndClose && action !== \"cancel\") {\n          currentMsg.reject(\"close\");\n        } else {\n          currentMsg.reject(\"cancel\");\n        }\n      } else {\n        currentMsg.resolve(resolve);\n      }\n    }\n  };\n\n  const instance = initInstance(options, container, appContext);\n  const vm = instance.proxy;\n\n  for (const prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop] = options[prop];\n    }\n  }\n\n  watch(() => vm.message, (newVal, oldVal) => {\n    if (isVNode(newVal)) {\n      instance.slots.default = () => [newVal];\n    } else if (isVNode(oldVal) && !isVNode(newVal)) {\n      delete instance.slots.default;\n    }\n  }, {\n    immediate: true\n  });\n  vm.visible = true;\n  return vm;\n};\n\nfunction MessageBox(options, appContext = null) {\n  if (!isClient) return Promise.reject();\n  let callback;\n\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  } else {\n    callback = options.callback;\n  }\n\n  return new Promise((resolve, reject) => {\n    const vm = showMessage(options, appContext != null ? appContext : MessageBox._context);\n    messageInstance.set(vm, {\n      options,\n      callback,\n      resolve,\n      reject\n    });\n  });\n}\n\nconst MESSAGE_BOX_VARIANTS = [\"alert\", \"confirm\", \"prompt\"];\nconst MESSAGE_BOX_DEFAULT_OPTS = {\n  alert: {\n    closeOnPressEscape: false,\n    closeOnClickModal: false\n  },\n  confirm: {\n    showCancelButton: true\n  },\n  prompt: {\n    showCancelButton: true,\n    showInput: true\n  }\n};\nMESSAGE_BOX_VARIANTS.forEach(boxType => {\n  MessageBox[boxType] = messageBoxFactory(boxType);\n});\n\nfunction messageBoxFactory(boxType) {\n  return (message, titleOrOpts, options, appContext) => {\n    let title;\n\n    if (isObject(titleOrOpts)) {\n      options = titleOrOpts;\n      title = \"\";\n    } else if (isUndefined(titleOrOpts)) {\n      title = \"\";\n    } else {\n      title = titleOrOpts;\n    }\n\n    return MessageBox(Object.assign({\n      title,\n      message,\n      type: \"\",\n      ...MESSAGE_BOX_DEFAULT_OPTS[boxType]\n    }, options, {\n      boxType\n    }), appContext);\n  };\n}\n\nMessageBox.close = () => {\n  messageInstance.forEach((_, vm) => {\n    vm.doClose();\n  });\n  messageInstance.clear();\n};\n\nMessageBox._context = null;\nexport { MessageBox as default };","map":null,"metadata":{},"sourceType":"module"}