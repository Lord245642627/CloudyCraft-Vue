{"ast":null,"code":"import { defineComponent, computed, ref, resolveComponent, openBlock, createBlock, Teleport, createVNode, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, withModifiers, createElementBlock, renderSlot, toDisplayString, createCommentVNode, vShow } from 'vue';\nimport { Close } from '@element-plus/icons-vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../dialog/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { drawerProps, drawerEmits } from './drawer.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { useDialog } from '../../dialog/src/use-dialog.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElDrawer\",\n  components: {\n    ElOverlay,\n    ElFocusTrap,\n    ElIcon,\n    Close\n  },\n  props: drawerProps,\n  emits: drawerEmits,\n\n  setup(props, {\n    slots\n  }) {\n    useDeprecated({\n      scope: \"el-drawer\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/drawer.html#slots\"\n    }, computed(() => !!slots.title));\n    const drawerRef = ref();\n    const focusStartRef = ref();\n    const ns = useNamespace(\"drawer\");\n    const {\n      t\n    } = useLocale();\n    const isHorizontal = computed(() => props.direction === \"rtl\" || props.direction === \"ltr\");\n    const drawerSize = computed(() => addUnit(props.size));\n    return { ...useDialog(props, drawerRef),\n      drawerRef,\n      focusStartRef,\n      isHorizontal,\n      drawerSize,\n      ns,\n      t\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-label\", \"aria-labelledby\", \"aria-describedby\"];\nconst _hoisted_2 = [\"id\"];\nconst _hoisted_3 = [\"aria-label\"];\nconst _hoisted_4 = [\"id\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_close = resolveComponent(\"close\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_focus_trap = resolveComponent(\"el-focus-trap\");\n\n  const _component_el_overlay = resolveComponent(\"el-overlay\");\n\n  return openBlock(), createBlock(Teleport, {\n    to: \"body\",\n    disabled: !_ctx.appendToBody\n  }, [createVNode(Transition, {\n    name: _ctx.ns.b(\"fade\"),\n    onAfterEnter: _ctx.afterEnter,\n    onAfterLeave: _ctx.afterLeave,\n    onBeforeLeave: _ctx.beforeLeave,\n    persisted: \"\"\n  }, {\n    default: withCtx(() => [withDirectives(createVNode(_component_el_overlay, {\n      mask: _ctx.modal,\n      \"overlay-class\": _ctx.modalClass,\n      \"z-index\": _ctx.zIndex,\n      onClick: _ctx.onModalClick\n    }, {\n      default: withCtx(() => [createVNode(_component_el_focus_trap, {\n        loop: \"\",\n        trapped: _ctx.visible,\n        \"focus-trap-el\": _ctx.drawerRef,\n        \"focus-start-el\": _ctx.focusStartRef,\n        onReleaseRequested: _ctx.onCloseRequested\n      }, {\n        default: withCtx(() => [createElementVNode(\"div\", {\n          ref: \"drawerRef\",\n          \"aria-modal\": \"true\",\n          \"aria-label\": _ctx.title || void 0,\n          \"aria-labelledby\": !_ctx.title ? _ctx.titleId : void 0,\n          \"aria-describedby\": _ctx.bodyId,\n          class: normalizeClass([_ctx.ns.b(), _ctx.direction, _ctx.visible && \"open\", _ctx.customClass]),\n          style: normalizeStyle(_ctx.isHorizontal ? \"width: \" + _ctx.drawerSize : \"height: \" + _ctx.drawerSize),\n          role: \"dialog\",\n          onClick: _cache[1] || (_cache[1] = withModifiers(() => {}, [\"stop\"]))\n        }, [createElementVNode(\"span\", {\n          ref: \"focusStartRef\",\n          class: normalizeClass(_ctx.ns.e(\"sr-focus\")),\n          tabindex: \"-1\"\n        }, null, 2), _ctx.withHeader ? (openBlock(), createElementBlock(\"header\", {\n          key: 0,\n          class: normalizeClass(_ctx.ns.e(\"header\"))\n        }, [!_ctx.$slots.title ? renderSlot(_ctx.$slots, \"header\", {\n          key: 0,\n          close: _ctx.handleClose,\n          titleId: _ctx.titleId,\n          titleClass: _ctx.ns.e(\"title\")\n        }, () => [!_ctx.$slots.title ? (openBlock(), createElementBlock(\"span\", {\n          key: 0,\n          id: _ctx.titleId,\n          role: \"heading\",\n          class: normalizeClass(_ctx.ns.e(\"title\"))\n        }, toDisplayString(_ctx.title), 11, _hoisted_2)) : createCommentVNode(\"v-if\", true)]) : renderSlot(_ctx.$slots, \"title\", {\n          key: 1\n        }, () => [createCommentVNode(\" DEPRECATED SLOT \")]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n          key: 2,\n          \"aria-label\": _ctx.t(\"el.drawer.close\"),\n          class: normalizeClass(_ctx.ns.e(\"close-btn\")),\n          type: \"button\",\n          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClose && _ctx.handleClose(...args))\n        }, [createVNode(_component_el_icon, {\n          class: normalizeClass(_ctx.ns.e(\"close\"))\n        }, {\n          default: withCtx(() => [createVNode(_component_close)]),\n          _: 1\n        }, 8, [\"class\"])], 10, _hoisted_3)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), _ctx.rendered ? (openBlock(), createElementBlock(\"div\", {\n          key: 1,\n          id: _ctx.bodyId,\n          class: normalizeClass(_ctx.ns.e(\"body\"))\n        }, [renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_4)) : createCommentVNode(\"v-if\", true), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"div\", {\n          key: 2,\n          class: normalizeClass(_ctx.ns.e(\"footer\"))\n        }, [renderSlot(_ctx.$slots, \"footer\")], 2)) : createCommentVNode(\"v-if\", true)], 14, _hoisted_1)]),\n        _: 3\n      }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\", \"onReleaseRequested\"])]),\n      _: 3\n    }, 8, [\"mask\", \"overlay-class\", \"z-index\", \"onClick\"]), [[vShow, _ctx.visible]])]),\n    _: 3\n  }, 8, [\"name\", \"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n}\n\nvar Drawer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/drawer/src/drawer.vue\"]]);\n\nexport { Drawer as default };","map":null,"metadata":{},"sourceType":"module"}