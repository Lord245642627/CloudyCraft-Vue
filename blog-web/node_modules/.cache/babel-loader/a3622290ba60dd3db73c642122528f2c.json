{"ast":null,"code":"import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\nexport { order };\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\n\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n      downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n      upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n  var bestCC = Number.POSITIVE_INFINITY,\n      best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}","map":{"version":3,"names":["_","Graph","util","addSubgraphConstraints","buildLayerGraph","crossCount","initOrder","sortSubgraph","order","g","maxRank","downLayerGraphs","buildLayerGraphs","range","upLayerGraphs","layering","assignOrder","bestCC","Number","POSITIVE_INFINITY","best","i","lastBest","sweepLayerGraphs","buildLayerMatrix","cc","cloneDeep","ranks","relationship","map","rank","layerGraphs","biasRight","cg","forEach","lg","root","graph","sorted","vs","v","node","layer"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-web/node_modules/dagre-d3-es/src/dagre/order/index.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}