{"ast":null,"code":"import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\nexport { feasibleTree };\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\n\nfunction feasibleTree(g) {\n  var t = new Graph({\n    directed: false\n  }); // Choose arbitrary node from which to start our tree\n\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n  var edge, delta;\n\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\n\n\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n          w = v === edgeV ? e.w : edgeV;\n\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n\n  return t.nodeCount();\n}\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\n\n\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}","map":{"version":3,"names":["_","Graph","slack","feasibleTree","g","t","directed","start","nodes","size","nodeCount","setNode","edge","delta","tightTree","findMinSlackEdge","hasNode","v","shiftRanks","dfs","forEach","nodeEdges","e","edgeV","w","setEdge","minBy","edges","node","rank"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-web/node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}