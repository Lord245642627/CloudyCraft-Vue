{"ast":null,"code":"/*!\n  * vue-i18n v9.1.10\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar shared = require('@intlify/shared');\n\nvar coreBase = require('@intlify/core-base');\n\nvar vue = require('vue');\n/**\r\n * Vue I18n Version\r\n *\r\n * @remarks\r\n * Semver format. Same format as the package.json `version` field.\r\n *\r\n * @VueI18nGeneral\r\n */\n\n\nconst VERSION = '9.1.10';\nconst warnMessages = {\n  [6\n  /* FALLBACK_TO_ROOT */\n  ]: `Fall back to {type} '{key}' with root locale.`,\n  [7\n  /* NOT_SUPPORTED_PRESERVE */\n  ]: `Not supported 'preserve'.`,\n  [8\n  /* NOT_SUPPORTED_FORMATTER */\n  ]: `Not supported 'formatter'.`,\n  [9\n  /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */\n  ]: `Not supported 'preserveDirectiveContent'.`,\n  [10\n  /* NOT_SUPPORTED_GET_CHOICE_INDEX */\n  ]: `Not supported 'getChoiceIndex'.`,\n  [11\n  /* COMPONENT_NAME_LEGACY_COMPATIBLE */\n  ]: `Component name legacy compatible: '{name}' -> 'i18n'`,\n  [12\n  /* NOT_FOUND_PARENT_SCOPE */\n  ]: `Not found parent scope. use the global scope.`\n};\n\nfunction getWarnMessage(code, ...args) {\n  return shared.format(warnMessages[code], ...args);\n}\n\nfunction createI18nError(code, ...args) {\n  return coreBase.createCompileError(code, null, {\n    messages: errorMessages,\n    args\n  });\n}\n\nconst errorMessages = {\n  [14\n  /* UNEXPECTED_RETURN_TYPE */\n  ]: 'Unexpected return type in composer',\n  [15\n  /* INVALID_ARGUMENT */\n  ]: 'Invalid argument',\n  [16\n  /* MUST_BE_CALL_SETUP_TOP */\n  ]: 'Must be called at the top of a `setup` function',\n  [17\n  /* NOT_INSLALLED */\n  ]: 'Need to install with `app.use` function',\n  [22\n  /* UNEXPECTED_ERROR */\n  ]: 'Unexpected error',\n  [18\n  /* NOT_AVAILABLE_IN_LEGACY_MODE */\n  ]: 'Not available in legacy mode',\n  [19\n  /* REQUIRED_VALUE */\n  ]: `Required in value: {0}`,\n  [20\n  /* INVALID_VALUE */\n  ]: `Invalid value`,\n  [21\n  /* CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN */\n  ]: `Cannot setup vue-devtools plugin`\n};\nconst DEVTOOLS_META = '__INTLIFY_META__';\nconst TransrateVNodeSymbol = shared.makeSymbol('__transrateVNode');\nconst DatetimePartsSymbol = shared.makeSymbol('__datetimeParts');\nconst NumberPartsSymbol = shared.makeSymbol('__numberParts');\nconst EnableEmitter = shared.makeSymbol('__enableEmitter');\nconst DisableEmitter = shared.makeSymbol('__disableEmitter');\nconst SetPluralRulesSymbol = shared.makeSymbol('__setPluralRules');\nshared.makeSymbol('__intlifyMeta');\nconst InejctWithOption = shared.makeSymbol('__injectWithOption');\nlet composerID = 0;\n\nfunction defineCoreMissingHandler(missing) {\n  return (ctx, locale, key, type) => {\n    return missing(locale, key, vue.getCurrentInstance() || undefined, type);\n  };\n}\n\nfunction getLocaleMessages(locale, options) {\n  const {\n    messages,\n    __i18n\n  } = options; // prettier-ignore\n\n  const ret = shared.isPlainObject(messages) ? messages : shared.isArray(__i18n) ? {} : {\n    [locale]: {}\n  }; // merge locale messages of i18n custom block\n\n  if (shared.isArray(__i18n)) {\n    __i18n.forEach(({\n      locale,\n      resource\n    }) => {\n      if (locale) {\n        ret[locale] = ret[locale] || {};\n        deepCopy(resource, ret[locale]);\n      } else {\n        deepCopy(resource, ret);\n      }\n    });\n  } // handle messages for flat json\n\n\n  if (options.flatJson) {\n    for (const key in ret) {\n      if (shared.hasOwn(ret, key)) {\n        coreBase.handleFlatJson(ret[key]);\n      }\n    }\n  }\n\n  return ret;\n}\n\nconst isNotObjectOrIsArray = val => !shared.isObject(val) || shared.isArray(val); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction deepCopy(src, des) {\n  // src and des should both be objects, and non of then can be a array\n  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {\n    throw createI18nError(20\n    /* INVALID_VALUE */\n    );\n  }\n\n  for (const key in src) {\n    if (shared.hasOwn(src, key)) {\n      if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {\n        // replace with src[key] when:\n        // src[key] or des[key] is not a object, or\n        // src[key] or des[key] is a array\n        des[key] = src[key];\n      } else {\n        // src[key] and des[key] are both object, merge them\n        deepCopy(src[key], des[key]);\n      }\n    }\n  }\n} // for Intlify DevTools\n\n\nconst getMetaInfo = /* #__PURE__*/() => {\n  const instance = vue.getCurrentInstance();\n  return instance && instance.type[DEVTOOLS_META] // eslint-disable-line @typescript-eslint/no-explicit-any\n  ? {\n    [DEVTOOLS_META]: instance.type[DEVTOOLS_META]\n  } // eslint-disable-line @typescript-eslint/no-explicit-any\n  : null;\n};\n/**\r\n * Create composer interface factory\r\n *\r\n * @internal\r\n */\n\n\nfunction createComposer(options = {}) {\n  const {\n    __root\n  } = options;\n\n  const _isGlobal = __root === undefined;\n\n  let _inheritLocale = shared.isBoolean(options.inheritLocale) ? options.inheritLocale : true;\n\n  const _locale = vue.ref( // prettier-ignore\n  __root && _inheritLocale ? __root.locale.value : shared.isString(options.locale) ? options.locale : 'en-US');\n\n  const _fallbackLocale = vue.ref( // prettier-ignore\n  __root && _inheritLocale ? __root.fallbackLocale.value : shared.isString(options.fallbackLocale) || shared.isArray(options.fallbackLocale) || shared.isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value);\n\n  const _messages = vue.ref(getLocaleMessages(_locale.value, options));\n\n  const _datetimeFormats = vue.ref(shared.isPlainObject(options.datetimeFormats) ? options.datetimeFormats : {\n    [_locale.value]: {}\n  });\n\n  const _numberFormats = vue.ref(shared.isPlainObject(options.numberFormats) ? options.numberFormats : {\n    [_locale.value]: {}\n  }); // warning suppress options\n  // prettier-ignore\n\n\n  let _missingWarn = __root ? __root.missingWarn : shared.isBoolean(options.missingWarn) || shared.isRegExp(options.missingWarn) ? options.missingWarn : true; // prettier-ignore\n\n\n  let _fallbackWarn = __root ? __root.fallbackWarn : shared.isBoolean(options.fallbackWarn) || shared.isRegExp(options.fallbackWarn) ? options.fallbackWarn : true; // prettier-ignore\n\n\n  let _fallbackRoot = __root ? __root.fallbackRoot : shared.isBoolean(options.fallbackRoot) ? options.fallbackRoot : true; // configure fall back to root\n\n\n  let _fallbackFormat = !!options.fallbackFormat; // runtime missing\n\n\n  let _missing = shared.isFunction(options.missing) ? options.missing : null;\n\n  let _runtimeMissing = shared.isFunction(options.missing) ? defineCoreMissingHandler(options.missing) : null; // postTranslation handler\n\n\n  let _postTranslation = shared.isFunction(options.postTranslation) ? options.postTranslation : null;\n\n  let _warnHtmlMessage = shared.isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n\n  let _escapeParameter = !!options.escapeParameter; // custom linked modifiers\n  // prettier-ignore\n\n\n  const _modifiers = __root ? __root.modifiers : shared.isPlainObject(options.modifiers) ? options.modifiers : {}; // pluralRules\n\n\n  let _pluralRules = options.pluralRules || __root && __root.pluralRules; // runtime context\n  // eslint-disable-next-line prefer-const\n\n\n  let _context;\n\n  function getCoreContext() {\n    return coreBase.createCoreContext({\n      version: VERSION,\n      locale: _locale.value,\n      fallbackLocale: _fallbackLocale.value,\n      messages: _messages.value,\n      datetimeFormats: _datetimeFormats.value,\n      numberFormats: _numberFormats.value,\n      modifiers: _modifiers,\n      pluralRules: _pluralRules,\n      missing: _runtimeMissing === null ? undefined : _runtimeMissing,\n      missingWarn: _missingWarn,\n      fallbackWarn: _fallbackWarn,\n      fallbackFormat: _fallbackFormat,\n      unresolving: true,\n      postTranslation: _postTranslation === null ? undefined : _postTranslation,\n      warnHtmlMessage: _warnHtmlMessage,\n      escapeParameter: _escapeParameter,\n      __datetimeFormatters: shared.isPlainObject(_context) ? _context.__datetimeFormatters : undefined,\n      __numberFormatters: shared.isPlainObject(_context) ? _context.__numberFormatters : undefined,\n      __v_emitter: shared.isPlainObject(_context) ? _context.__v_emitter : undefined,\n      __meta: {\n        framework: 'vue'\n      }\n    });\n  }\n\n  _context = getCoreContext();\n  coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value); // track reactivity\n\n  function trackReactivityValues() {\n    return [_locale.value, _fallbackLocale.value, _messages.value, _datetimeFormats.value, _numberFormats.value];\n  } // locale\n\n\n  const locale = vue.computed({\n    get: () => _locale.value,\n    set: val => {\n      _locale.value = val;\n      _context.locale = _locale.value;\n    }\n  }); // fallbackLocale\n\n  const fallbackLocale = vue.computed({\n    get: () => _fallbackLocale.value,\n    set: val => {\n      _fallbackLocale.value = val;\n      _context.fallbackLocale = _fallbackLocale.value;\n      coreBase.updateFallbackLocale(_context, _locale.value, val);\n    }\n  }); // messages\n\n  const messages = vue.computed(() => _messages.value); // datetimeFormats\n\n  const datetimeFormats = vue.computed(() => _datetimeFormats.value); // numberFormats\n\n  const numberFormats = vue.computed(() => _numberFormats.value); // getPostTranslationHandler\n\n  function getPostTranslationHandler() {\n    return shared.isFunction(_postTranslation) ? _postTranslation : null;\n  } // setPostTranslationHandler\n\n\n  function setPostTranslationHandler(handler) {\n    _postTranslation = handler;\n    _context.postTranslation = handler;\n  } // getMissingHandler\n\n\n  function getMissingHandler() {\n    return _missing;\n  } // setMissingHandler\n\n\n  function setMissingHandler(handler) {\n    if (handler !== null) {\n      _runtimeMissing = defineCoreMissingHandler(handler);\n    }\n\n    _missing = handler;\n    _context.missing = _runtimeMissing;\n  }\n\n  function isResolvedTranslateMessage(type, arg // eslint-disable-line @typescript-eslint/no-explicit-any\n  ) {\n    return type !== 'translate' || !!arg.resolvedMessage === false;\n  }\n\n  function wrapWithDeps(fn, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) {\n    trackReactivityValues(); // track reactive dependency\n    // NOTE: experimental !!\n\n    let ret;\n    {\n      try {\n        coreBase.setAdditionalMeta(getMetaInfo());\n        ret = fn(_context);\n      } finally {\n        coreBase.setAdditionalMeta(null);\n      }\n    }\n\n    if (shared.isNumber(ret) && ret === coreBase.NOT_REOSLVED) {\n      const [key, arg2] = argumentParser();\n\n      if (__root && shared.isString(key) && isResolvedTranslateMessage(warnType, arg2)) {\n        if (_fallbackRoot && (coreBase.isTranslateFallbackWarn(_fallbackWarn, key) || coreBase.isTranslateMissingWarn(_missingWarn, key))) {\n          shared.warn(getWarnMessage(6\n          /* FALLBACK_TO_ROOT */\n          , {\n            key,\n            type: warnType\n          }));\n        } // for vue-devtools timeline event\n\n\n        {\n          const {\n            __v_emitter: emitter\n          } = _context;\n\n          if (emitter && _fallbackRoot) {\n            emitter.emit(\"fallback\"\n            /* FALBACK */\n            , {\n              type: warnType,\n              key,\n              to: 'global',\n              groupId: `${warnType}:${key}`\n            });\n          }\n        }\n      }\n\n      return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);\n    } else if (successCondition(ret)) {\n      return ret;\n    } else {\n      /* istanbul ignore next */\n      throw createI18nError(14\n      /* UNEXPECTED_RETURN_TYPE */\n      );\n    }\n  } // t\n\n\n  function t(...args) {\n    return wrapWithDeps(context => coreBase.translate(context, ...args), () => coreBase.parseTranslateArgs(...args), 'translate', root => root.t(...args), key => key, val => shared.isString(val));\n  } // rt\n\n\n  function rt(...args) {\n    const [arg1, arg2, arg3] = args;\n\n    if (arg3 && !shared.isObject(arg3)) {\n      throw createI18nError(15\n      /* INVALID_ARGUMENT */\n      );\n    }\n\n    return t(...[arg1, arg2, shared.assign({\n      resolvedMessage: true\n    }, arg3 || {})]);\n  } // d\n\n\n  function d(...args) {\n    return wrapWithDeps(context => coreBase.datetime(context, ...args), () => coreBase.parseDateTimeArgs(...args), 'datetime format', root => root.d(...args), () => coreBase.MISSING_RESOLVE_VALUE, val => shared.isString(val));\n  } // n\n\n\n  function n(...args) {\n    return wrapWithDeps(context => coreBase.number(context, ...args), () => coreBase.parseNumberArgs(...args), 'number format', root => root.n(...args), () => coreBase.MISSING_RESOLVE_VALUE, val => shared.isString(val));\n  } // for custom processor\n\n\n  function normalize(values) {\n    return values.map(val => shared.isString(val) ? vue.createVNode(vue.Text, null, val, 0) : val);\n  }\n\n  const interpolate = val => val;\n\n  const processor = {\n    normalize,\n    interpolate,\n    type: 'vnode'\n  }; // transrateVNode, using for `i18n-t` component\n\n  function transrateVNode(...args) {\n    return wrapWithDeps(context => {\n      let ret;\n      const _context = context;\n\n      try {\n        _context.processor = processor;\n        ret = coreBase.translate(_context, ...args);\n      } finally {\n        _context.processor = null;\n      }\n\n      return ret;\n    }, () => coreBase.parseTranslateArgs(...args), 'translate', // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    root => root[TransrateVNodeSymbol](...args), key => [vue.createVNode(vue.Text, null, key, 0)], val => shared.isArray(val));\n  } // numberParts, using for `i18n-n` component\n\n\n  function numberParts(...args) {\n    return wrapWithDeps(context => coreBase.number(context, ...args), () => coreBase.parseNumberArgs(...args), 'number format', // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    root => root[NumberPartsSymbol](...args), () => [], val => shared.isString(val) || shared.isArray(val));\n  } // datetimeParts, using for `i18n-d` component\n\n\n  function datetimeParts(...args) {\n    return wrapWithDeps(context => coreBase.datetime(context, ...args), () => coreBase.parseDateTimeArgs(...args), 'datetime format', // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    root => root[DatetimePartsSymbol](...args), () => [], val => shared.isString(val) || shared.isArray(val));\n  }\n\n  function setPluralRules(rules) {\n    _pluralRules = rules;\n    _context.pluralRules = _pluralRules;\n  } // te\n\n\n  function te(key, locale) {\n    const targetLocale = shared.isString(locale) ? locale : _locale.value;\n    const message = getLocaleMessage(targetLocale);\n    return coreBase.resolveValue(message, key) !== null;\n  }\n\n  function resolveMessages(key) {\n    let messages = null;\n    const locales = coreBase.getLocaleChain(_context, _fallbackLocale.value, _locale.value);\n\n    for (let i = 0; i < locales.length; i++) {\n      const targetLocaleMessages = _messages.value[locales[i]] || {};\n      const messageValue = coreBase.resolveValue(targetLocaleMessages, key);\n\n      if (messageValue != null) {\n        messages = messageValue;\n        break;\n      }\n    }\n\n    return messages;\n  } // tm\n\n\n  function tm(key) {\n    const messages = resolveMessages(key); // prettier-ignore\n\n    return messages != null ? messages : __root ? __root.tm(key) || {} : {};\n  } // getLocaleMessage\n\n\n  function getLocaleMessage(locale) {\n    return _messages.value[locale] || {};\n  } // setLocaleMessage\n\n\n  function setLocaleMessage(locale, message) {\n    _messages.value[locale] = message;\n    _context.messages = _messages.value;\n  } // mergeLocaleMessage\n\n\n  function mergeLocaleMessage(locale, message) {\n    _messages.value[locale] = _messages.value[locale] || {};\n    deepCopy(message, _messages.value[locale]);\n    _context.messages = _messages.value;\n  } // getDateTimeFormat\n\n\n  function getDateTimeFormat(locale) {\n    return _datetimeFormats.value[locale] || {};\n  } // setDateTimeFormat\n\n\n  function setDateTimeFormat(locale, format) {\n    _datetimeFormats.value[locale] = format;\n    _context.datetimeFormats = _datetimeFormats.value;\n    coreBase.clearDateTimeFormat(_context, locale, format);\n  } // mergeDateTimeFormat\n\n\n  function mergeDateTimeFormat(locale, format) {\n    _datetimeFormats.value[locale] = shared.assign(_datetimeFormats.value[locale] || {}, format);\n    _context.datetimeFormats = _datetimeFormats.value;\n    coreBase.clearDateTimeFormat(_context, locale, format);\n  } // getNumberFormat\n\n\n  function getNumberFormat(locale) {\n    return _numberFormats.value[locale] || {};\n  } // setNumberFormat\n\n\n  function setNumberFormat(locale, format) {\n    _numberFormats.value[locale] = format;\n    _context.numberFormats = _numberFormats.value;\n    coreBase.clearNumberFormat(_context, locale, format);\n  } // mergeNumberFormat\n\n\n  function mergeNumberFormat(locale, format) {\n    _numberFormats.value[locale] = shared.assign(_numberFormats.value[locale] || {}, format);\n    _context.numberFormats = _numberFormats.value;\n    coreBase.clearNumberFormat(_context, locale, format);\n  } // for debug\n\n\n  composerID++; // watch root locale & fallbackLocale\n\n  if (__root) {\n    vue.watch(__root.locale, val => {\n      if (_inheritLocale) {\n        _locale.value = val;\n        _context.locale = val;\n        coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n    vue.watch(__root.fallbackLocale, val => {\n      if (_inheritLocale) {\n        _fallbackLocale.value = val;\n        _context.fallbackLocale = val;\n        coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n  } // define composition API!\n\n\n  const composer = {\n    id: composerID,\n    locale,\n    fallbackLocale,\n\n    get inheritLocale() {\n      return _inheritLocale;\n    },\n\n    set inheritLocale(val) {\n      _inheritLocale = val;\n\n      if (val && __root) {\n        _locale.value = __root.locale.value;\n        _fallbackLocale.value = __root.fallbackLocale.value;\n        coreBase.updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    },\n\n    get availableLocales() {\n      return Object.keys(_messages.value).sort();\n    },\n\n    messages,\n    datetimeFormats,\n    numberFormats,\n\n    get modifiers() {\n      return _modifiers;\n    },\n\n    get pluralRules() {\n      return _pluralRules || {};\n    },\n\n    get isGlobal() {\n      return _isGlobal;\n    },\n\n    get missingWarn() {\n      return _missingWarn;\n    },\n\n    set missingWarn(val) {\n      _missingWarn = val;\n      _context.missingWarn = _missingWarn;\n    },\n\n    get fallbackWarn() {\n      return _fallbackWarn;\n    },\n\n    set fallbackWarn(val) {\n      _fallbackWarn = val;\n      _context.fallbackWarn = _fallbackWarn;\n    },\n\n    get fallbackRoot() {\n      return _fallbackRoot;\n    },\n\n    set fallbackRoot(val) {\n      _fallbackRoot = val;\n    },\n\n    get fallbackFormat() {\n      return _fallbackFormat;\n    },\n\n    set fallbackFormat(val) {\n      _fallbackFormat = val;\n      _context.fallbackFormat = _fallbackFormat;\n    },\n\n    get warnHtmlMessage() {\n      return _warnHtmlMessage;\n    },\n\n    set warnHtmlMessage(val) {\n      _warnHtmlMessage = val;\n      _context.warnHtmlMessage = val;\n    },\n\n    get escapeParameter() {\n      return _escapeParameter;\n    },\n\n    set escapeParameter(val) {\n      _escapeParameter = val;\n      _context.escapeParameter = val;\n    },\n\n    t,\n    rt,\n    d,\n    n,\n    te,\n    tm,\n    getLocaleMessage,\n    setLocaleMessage,\n    mergeLocaleMessage,\n    getDateTimeFormat,\n    setDateTimeFormat,\n    mergeDateTimeFormat,\n    getNumberFormat,\n    setNumberFormat,\n    mergeNumberFormat,\n    getPostTranslationHandler,\n    setPostTranslationHandler,\n    getMissingHandler,\n    setMissingHandler,\n    [TransrateVNodeSymbol]: transrateVNode,\n    [NumberPartsSymbol]: numberParts,\n    [DatetimePartsSymbol]: datetimeParts,\n    [SetPluralRulesSymbol]: setPluralRules,\n    [InejctWithOption]: options.__injectWithOption // eslint-disable-line @typescript-eslint/no-explicit-any\n\n  }; // for vue-devtools timeline event\n\n  {\n    composer[EnableEmitter] = emitter => {\n      _context.__v_emitter = emitter;\n    };\n\n    composer[DisableEmitter] = () => {\n      _context.__v_emitter = undefined;\n    };\n  }\n  return composer;\n}\n/**\r\n * Convert to I18n Composer Options from VueI18n Options\r\n *\r\n * @internal\r\n */\n\n\nfunction convertComposerOptions(options) {\n  const locale = shared.isString(options.locale) ? options.locale : 'en-US';\n  const fallbackLocale = shared.isString(options.fallbackLocale) || shared.isArray(options.fallbackLocale) || shared.isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;\n  const missing = shared.isFunction(options.missing) ? options.missing : undefined;\n  const missingWarn = shared.isBoolean(options.silentTranslationWarn) || shared.isRegExp(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;\n  const fallbackWarn = shared.isBoolean(options.silentFallbackWarn) || shared.isRegExp(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;\n  const fallbackRoot = shared.isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  const fallbackFormat = !!options.formatFallbackMessages;\n  const modifiers = shared.isPlainObject(options.modifiers) ? options.modifiers : {};\n  const pluralizationRules = options.pluralizationRules;\n  const postTranslation = shared.isFunction(options.postTranslation) ? options.postTranslation : undefined;\n  const warnHtmlMessage = shared.isString(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== 'off' : true;\n  const escapeParameter = !!options.escapeParameterHtml;\n  const inheritLocale = shared.isBoolean(options.sync) ? options.sync : true;\n\n  if (options.formatter) {\n    shared.warn(getWarnMessage(8\n    /* NOT_SUPPORTED_FORMATTER */\n    ));\n  }\n\n  if (options.preserveDirectiveContent) {\n    shared.warn(getWarnMessage(9\n    /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */\n    ));\n  }\n\n  let messages = options.messages;\n\n  if (shared.isPlainObject(options.sharedMessages)) {\n    const sharedMessages = options.sharedMessages;\n    const locales = Object.keys(sharedMessages);\n    messages = locales.reduce((messages, locale) => {\n      const message = messages[locale] || (messages[locale] = {});\n      shared.assign(message, sharedMessages[locale]);\n      return messages;\n    }, messages || {});\n  }\n\n  const {\n    __i18n,\n    __root,\n    __injectWithOption\n  } = options;\n  const datetimeFormats = options.datetimeFormats;\n  const numberFormats = options.numberFormats;\n  const flatJson = options.flatJson;\n  return {\n    locale,\n    fallbackLocale,\n    messages,\n    flatJson,\n    datetimeFormats,\n    numberFormats,\n    missing,\n    missingWarn,\n    fallbackWarn,\n    fallbackRoot,\n    fallbackFormat,\n    modifiers,\n    pluralRules: pluralizationRules,\n    postTranslation,\n    warnHtmlMessage,\n    escapeParameter,\n    inheritLocale,\n    __i18n,\n    __root,\n    __injectWithOption\n  };\n}\n/**\r\n * create VueI18n interface factory\r\n *\r\n * @internal\r\n */\n\n\nfunction createVueI18n(options = {}) {\n  const composer = createComposer(convertComposerOptions(options)); // defines VueI18n\n\n  const vueI18n = {\n    // id\n    id: composer.id,\n\n    // locale\n    get locale() {\n      return composer.locale.value;\n    },\n\n    set locale(val) {\n      composer.locale.value = val;\n    },\n\n    // fallbackLocale\n    get fallbackLocale() {\n      return composer.fallbackLocale.value;\n    },\n\n    set fallbackLocale(val) {\n      composer.fallbackLocale.value = val;\n    },\n\n    // messages\n    get messages() {\n      return composer.messages.value;\n    },\n\n    // datetimeFormats\n    get datetimeFormats() {\n      return composer.datetimeFormats.value;\n    },\n\n    // numberFormats\n    get numberFormats() {\n      return composer.numberFormats.value;\n    },\n\n    // availableLocales\n    get availableLocales() {\n      return composer.availableLocales;\n    },\n\n    // formatter\n    get formatter() {\n      shared.warn(getWarnMessage(8\n      /* NOT_SUPPORTED_FORMATTER */\n      )); // dummy\n\n      return {\n        interpolate() {\n          return [];\n        }\n\n      };\n    },\n\n    set formatter(val) {\n      shared.warn(getWarnMessage(8\n      /* NOT_SUPPORTED_FORMATTER */\n      ));\n    },\n\n    // missing\n    get missing() {\n      return composer.getMissingHandler();\n    },\n\n    set missing(handler) {\n      composer.setMissingHandler(handler);\n    },\n\n    // silentTranslationWarn\n    get silentTranslationWarn() {\n      return shared.isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;\n    },\n\n    set silentTranslationWarn(val) {\n      composer.missingWarn = shared.isBoolean(val) ? !val : val;\n    },\n\n    // silentFallbackWarn\n    get silentFallbackWarn() {\n      return shared.isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;\n    },\n\n    set silentFallbackWarn(val) {\n      composer.fallbackWarn = shared.isBoolean(val) ? !val : val;\n    },\n\n    // modifiers\n    get modifiers() {\n      return composer.modifiers;\n    },\n\n    // formatFallbackMessages\n    get formatFallbackMessages() {\n      return composer.fallbackFormat;\n    },\n\n    set formatFallbackMessages(val) {\n      composer.fallbackFormat = val;\n    },\n\n    // postTranslation\n    get postTranslation() {\n      return composer.getPostTranslationHandler();\n    },\n\n    set postTranslation(handler) {\n      composer.setPostTranslationHandler(handler);\n    },\n\n    // sync\n    get sync() {\n      return composer.inheritLocale;\n    },\n\n    set sync(val) {\n      composer.inheritLocale = val;\n    },\n\n    // warnInHtmlMessage\n    get warnHtmlInMessage() {\n      return composer.warnHtmlMessage ? 'warn' : 'off';\n    },\n\n    set warnHtmlInMessage(val) {\n      composer.warnHtmlMessage = val !== 'off';\n    },\n\n    // escapeParameterHtml\n    get escapeParameterHtml() {\n      return composer.escapeParameter;\n    },\n\n    set escapeParameterHtml(val) {\n      composer.escapeParameter = val;\n    },\n\n    // preserveDirectiveContent\n    get preserveDirectiveContent() {\n      shared.warn(getWarnMessage(9\n      /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */\n      ));\n      return true;\n    },\n\n    set preserveDirectiveContent(val) {\n      shared.warn(getWarnMessage(9\n      /* NOT_SUPPORTED_PRESERVE_DIRECTIVE */\n      ));\n    },\n\n    // pluralizationRules\n    get pluralizationRules() {\n      return composer.pluralRules || {};\n    },\n\n    // for internal\n    __composer: composer,\n\n    // t\n    t(...args) {\n      const [arg1, arg2, arg3] = args;\n      const options = {};\n      let list = null;\n      let named = null;\n\n      if (!shared.isString(arg1)) {\n        throw createI18nError(15\n        /* INVALID_ARGUMENT */\n        );\n      }\n\n      const key = arg1;\n\n      if (shared.isString(arg2)) {\n        options.locale = arg2;\n      } else if (shared.isArray(arg2)) {\n        list = arg2;\n      } else if (shared.isPlainObject(arg2)) {\n        named = arg2;\n      }\n\n      if (shared.isArray(arg3)) {\n        list = arg3;\n      } else if (shared.isPlainObject(arg3)) {\n        named = arg3;\n      }\n\n      return composer.t(key, list || named || {}, options);\n    },\n\n    rt(...args) {\n      return composer.rt(...args);\n    },\n\n    // tc\n    tc(...args) {\n      const [arg1, arg2, arg3] = args;\n      const options = {\n        plural: 1\n      };\n      let list = null;\n      let named = null;\n\n      if (!shared.isString(arg1)) {\n        throw createI18nError(15\n        /* INVALID_ARGUMENT */\n        );\n      }\n\n      const key = arg1;\n\n      if (shared.isString(arg2)) {\n        options.locale = arg2;\n      } else if (shared.isNumber(arg2)) {\n        options.plural = arg2;\n      } else if (shared.isArray(arg2)) {\n        list = arg2;\n      } else if (shared.isPlainObject(arg2)) {\n        named = arg2;\n      }\n\n      if (shared.isString(arg3)) {\n        options.locale = arg3;\n      } else if (shared.isArray(arg3)) {\n        list = arg3;\n      } else if (shared.isPlainObject(arg3)) {\n        named = arg3;\n      }\n\n      return composer.t(key, list || named || {}, options);\n    },\n\n    // te\n    te(key, locale) {\n      return composer.te(key, locale);\n    },\n\n    // tm\n    tm(key) {\n      return composer.tm(key);\n    },\n\n    // getLocaleMessage\n    getLocaleMessage(locale) {\n      return composer.getLocaleMessage(locale);\n    },\n\n    // setLocaleMessage\n    setLocaleMessage(locale, message) {\n      composer.setLocaleMessage(locale, message);\n    },\n\n    // mergeLocaleMessage\n    mergeLocaleMessage(locale, message) {\n      composer.mergeLocaleMessage(locale, message);\n    },\n\n    // d\n    d(...args) {\n      return composer.d(...args);\n    },\n\n    // getDateTimeFormat\n    getDateTimeFormat(locale) {\n      return composer.getDateTimeFormat(locale);\n    },\n\n    // setDateTimeFormat\n    setDateTimeFormat(locale, format) {\n      composer.setDateTimeFormat(locale, format);\n    },\n\n    // mergeDateTimeFormat\n    mergeDateTimeFormat(locale, format) {\n      composer.mergeDateTimeFormat(locale, format);\n    },\n\n    // n\n    n(...args) {\n      return composer.n(...args);\n    },\n\n    // getNumberFormat\n    getNumberFormat(locale) {\n      return composer.getNumberFormat(locale);\n    },\n\n    // setNumberFormat\n    setNumberFormat(locale, format) {\n      composer.setNumberFormat(locale, format);\n    },\n\n    // mergeNumberFormat\n    mergeNumberFormat(locale, format) {\n      composer.mergeNumberFormat(locale, format);\n    },\n\n    // getChoiceIndex\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getChoiceIndex(choice, choicesLength) {\n      shared.warn(getWarnMessage(10\n      /* NOT_SUPPORTED_GET_CHOICE_INDEX */\n      ));\n      return -1;\n    },\n\n    // for internal\n    __onComponentInstanceCreated(target) {\n      const {\n        componentInstanceCreatedListener\n      } = options;\n\n      if (componentInstanceCreatedListener) {\n        componentInstanceCreatedListener(target, vueI18n);\n      }\n    }\n\n  }; // for vue-devtools timeline event\n\n  {\n    vueI18n.__enableEmitter = emitter => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const __composer = composer;\n      __composer[EnableEmitter] && __composer[EnableEmitter](emitter);\n    };\n\n    vueI18n.__disableEmitter = () => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const __composer = composer;\n      __composer[DisableEmitter] && __composer[DisableEmitter]();\n    };\n  }\n  return vueI18n;\n}\n\nconst baseFormatProps = {\n  tag: {\n    type: [String, Object]\n  },\n  locale: {\n    type: String\n  },\n  scope: {\n    type: String,\n    validator: val => val === 'parent' || val === 'global',\n    default: 'parent'\n  },\n  i18n: {\n    type: Object\n  }\n};\n/**\r\n * Translation Component\r\n *\r\n * @remarks\r\n * See the following items for property about details\r\n *\r\n * @VueI18nSee [TranslationProps](component#translationprops)\r\n * @VueI18nSee [BaseFormatProps](component#baseformatprops)\r\n * @VueI18nSee [Component Interpolation](../guide/advanced/component)\r\n *\r\n * @example\r\n * ```html\r\n * <div id=\"app\">\r\n *   <!-- ... -->\r\n *   <i18n path=\"term\" tag=\"label\" for=\"tos\">\r\n *     <a :href=\"url\" target=\"_blank\">{{ $t('tos') }}</a>\r\n *   </i18n>\r\n *   <!-- ... -->\r\n * </div>\r\n * ```\r\n * ```js\r\n * import { createApp } from 'vue'\r\n * import { createI18n } from 'vue-i18n'\r\n *\r\n * const messages = {\r\n *   en: {\r\n *     tos: 'Term of Service',\r\n *     term: 'I accept xxx {0}.'\r\n *   },\r\n *   ja: {\r\n *     tos: '利用規約',\r\n *     term: '私は xxx の{0}に同意します。'\r\n *   }\r\n * }\r\n *\r\n * const i18n = createI18n({\r\n *   locale: 'en',\r\n *   messages\r\n * })\r\n *\r\n * const app = createApp({\r\n *   data: {\r\n *     url: '/term'\r\n *   }\r\n * }).use(i18n).mount('#app')\r\n * ```\r\n *\r\n * @VueI18nComponent\r\n */\n\nconst Translation = {\n  /* eslint-disable */\n  name: 'i18n-t',\n  props: shared.assign({\n    keypath: {\n      type: String,\n      required: true\n    },\n    plural: {\n      type: [Number, String],\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      validator: val => shared.isNumber(val) || !isNaN(val)\n    }\n  }, baseFormatProps),\n\n  /* eslint-enable */\n  setup(props, context) {\n    const {\n      slots,\n      attrs\n    } = context;\n    const i18n = props.i18n || useI18n({\n      useScope: props.scope,\n      __useComponent: true\n    });\n    const keys = Object.keys(slots).filter(key => key !== '_');\n    return () => {\n      const options = {};\n\n      if (props.locale) {\n        options.locale = props.locale;\n      }\n\n      if (props.plural !== undefined) {\n        options.plural = shared.isString(props.plural) ? +props.plural : props.plural;\n      }\n\n      const arg = getInterpolateArg(context, keys); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const children = i18n[TransrateVNodeSymbol](props.keypath, arg, options);\n      const assignedAttrs = shared.assign({}, attrs); // prettier-ignore\n\n      return shared.isString(props.tag) ? vue.h(props.tag, assignedAttrs, children) : shared.isObject(props.tag) ? vue.h(props.tag, assignedAttrs, children) : vue.h(vue.Fragment, assignedAttrs, children);\n    };\n  }\n\n};\n\nfunction getInterpolateArg({\n  slots\n}, keys) {\n  if (keys.length === 1 && keys[0] === 'default') {\n    // default slot only\n    return slots.default ? slots.default() : [];\n  } else {\n    // named slots\n    return keys.reduce((arg, key) => {\n      const slot = slots[key];\n\n      if (slot) {\n        arg[key] = slot();\n      }\n\n      return arg;\n    }, {});\n  }\n}\n\nfunction renderFormatter(props, context, slotKeys, partFormatter) {\n  const {\n    slots,\n    attrs\n  } = context;\n  return () => {\n    const options = {\n      part: true\n    };\n    let overrides = {};\n\n    if (props.locale) {\n      options.locale = props.locale;\n    }\n\n    if (shared.isString(props.format)) {\n      options.key = props.format;\n    } else if (shared.isObject(props.format)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (shared.isString(props.format.key)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        options.key = props.format.key;\n      } // Filter out number format options only\n\n\n      overrides = Object.keys(props.format).reduce((options, prop) => {\n        return slotKeys.includes(prop) ? shared.assign({}, options, {\n          [prop]: props.format[prop]\n        }) // eslint-disable-line @typescript-eslint/no-explicit-any\n        : options;\n      }, {});\n    }\n\n    const parts = partFormatter(...[props.value, options, overrides]);\n    let children = [options.key];\n\n    if (shared.isArray(parts)) {\n      children = parts.map((part, index) => {\n        const slot = slots[part.type];\n        return slot ? slot({\n          [part.type]: part.value,\n          index,\n          parts\n        }) : [part.value];\n      });\n    } else if (shared.isString(parts)) {\n      children = [parts];\n    }\n\n    const assignedAttrs = shared.assign({}, attrs); // prettier-ignore\n\n    return shared.isString(props.tag) ? vue.h(props.tag, assignedAttrs, children) : shared.isObject(props.tag) ? vue.h(props.tag, assignedAttrs, children) : vue.h(vue.Fragment, assignedAttrs, children);\n  };\n}\n\nconst NUMBER_FORMAT_KEYS = ['localeMatcher', 'style', 'unit', 'unitDisplay', 'currency', 'currencyDisplay', 'useGrouping', 'numberingSystem', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits', 'notation', 'formatMatcher'];\n/**\r\n * Number Format Component\r\n *\r\n * @remarks\r\n * See the following items for property about details\r\n *\r\n * @VueI18nSee [FormattableProps](component#formattableprops)\r\n * @VueI18nSee [BaseFormatProps](component#baseformatprops)\r\n * @VueI18nSee [Custom Formatting](../guide/essentials/number#custom-formatting)\r\n *\r\n * @VueI18nDanger\r\n * Not supported IE, due to no support `Intl.NumberFormat#formatToParts` in [IE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts)\r\n *\r\n * If you want to use it, you need to use [polyfill](https://github.com/formatjs/formatjs/tree/main/packages/intl-numberformat)\r\n *\r\n * @VueI18nComponent\r\n */\n\nconst NumberFormat = {\n  /* eslint-disable */\n  name: 'i18n-n',\n  props: shared.assign({\n    value: {\n      type: Number,\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n\n  /* eslint-enable */\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({\n      useScope: 'parent',\n      __useComponent: true\n    });\n    return renderFormatter(props, context, NUMBER_FORMAT_KEYS, (...args) => // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    i18n[NumberPartsSymbol](...args));\n  }\n\n};\nconst DATETIME_FORMAT_KEYS = ['dateStyle', 'timeStyle', 'fractionalSecondDigits', 'calendar', 'dayPeriod', 'numberingSystem', 'localeMatcher', 'timeZone', 'hour12', 'hourCycle', 'formatMatcher', 'weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'];\n/**\r\n * Datetime Format Component\r\n *\r\n * @remarks\r\n * See the following items for property about details\r\n *\r\n * @VueI18nSee [FormattableProps](component#formattableprops)\r\n * @VueI18nSee [BaseFormatProps](component#baseformatprops)\r\n * @VueI18nSee [Custom Formatting](../guide/essentials/datetime#custom-formatting)\r\n *\r\n * @VueI18nDanger\r\n * Not supported IE, due to no support `Intl.DateTimeFormat#formatToParts` in [IE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts)\r\n *\r\n * If you want to use it, you need to use [polyfill](https://github.com/formatjs/formatjs/tree/main/packages/intl-datetimeformat)\r\n *\r\n * @VueI18nComponent\r\n */\n\nconst DatetimeFormat = {\n  /* eslint-disable */\n  name: 'i18n-d',\n  props: shared.assign({\n    value: {\n      type: [Number, Date],\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n\n  /* eslint-enable */\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({\n      useScope: 'parent',\n      __useComponent: true\n    });\n    return renderFormatter(props, context, DATETIME_FORMAT_KEYS, (...args) => // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    i18n[DatetimePartsSymbol](...args));\n  }\n\n};\n\nfunction getComposer$1(i18n, instance) {\n  const i18nInternal = i18n;\n\n  if (i18n.mode === 'composition') {\n    return i18nInternal.__getInstance(instance) || i18n.global;\n  } else {\n    const vueI18n = i18nInternal.__getInstance(instance);\n\n    return vueI18n != null ? vueI18n.__composer : i18n.global.__composer;\n  }\n}\n\nfunction vTDirective(i18n) {\n  const bind = (el, {\n    instance,\n    value,\n    modifiers\n  }) => {\n    /* istanbul ignore if */\n    if (!instance || !instance.$) {\n      throw createI18nError(22\n      /* UNEXPECTED_ERROR */\n      );\n    }\n\n    const composer = getComposer$1(i18n, instance.$);\n\n    if (modifiers.preserve) {\n      shared.warn(getWarnMessage(7\n      /* NOT_SUPPORTED_PRESERVE */\n      ));\n    }\n\n    const parsedValue = parseValue(value);\n    el.textContent = composer.t(...makeParams(parsedValue));\n  };\n\n  return {\n    beforeMount: bind,\n    beforeUpdate: bind\n  };\n}\n\nfunction parseValue(value) {\n  if (shared.isString(value)) {\n    return {\n      path: value\n    };\n  } else if (shared.isPlainObject(value)) {\n    if (!('path' in value)) {\n      throw createI18nError(19\n      /* REQUIRED_VALUE */\n      , 'path');\n    }\n\n    return value;\n  } else {\n    throw createI18nError(20\n    /* INVALID_VALUE */\n    );\n  }\n}\n\nfunction makeParams(value) {\n  const {\n    path,\n    locale,\n    args,\n    choice,\n    plural\n  } = value;\n  const options = {};\n  const named = args || {};\n\n  if (shared.isString(locale)) {\n    options.locale = locale;\n  }\n\n  if (shared.isNumber(choice)) {\n    options.plural = choice;\n  }\n\n  if (shared.isNumber(plural)) {\n    options.plural = plural;\n  }\n\n  return [path, named, options];\n}\n\nfunction apply(app, i18n, ...options) {\n  const pluginOptions = shared.isPlainObject(options[0]) ? options[0] : {};\n  const useI18nComponentName = !!pluginOptions.useI18nComponentName;\n  const globalInstall = shared.isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;\n\n  if (globalInstall && useI18nComponentName) {\n    shared.warn(getWarnMessage(11\n    /* COMPONENT_NAME_LEGACY_COMPATIBLE */\n    , {\n      name: Translation.name\n    }));\n  }\n\n  if (globalInstall) {\n    // install components\n    app.component(!useI18nComponentName ? Translation.name : 'i18n', Translation);\n    app.component(NumberFormat.name, NumberFormat);\n    app.component(DatetimeFormat.name, DatetimeFormat);\n  } // install directive\n\n\n  app.directive('t', vTDirective(i18n));\n} // supports compatibility for legacy vue-i18n APIs\n\n\nfunction defineMixin(vuei18n, composer, i18n) {\n  return {\n    beforeCreate() {\n      const instance = vue.getCurrentInstance();\n      /* istanbul ignore if */\n\n      if (!instance) {\n        throw createI18nError(22\n        /* UNEXPECTED_ERROR */\n        );\n      }\n\n      const options = this.$options;\n\n      if (options.i18n) {\n        const optionsI18n = options.i18n;\n\n        if (options.__i18n) {\n          optionsI18n.__i18n = options.__i18n;\n        }\n\n        optionsI18n.__root = composer;\n\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, optionsI18n);\n        } else {\n          optionsI18n.__injectWithOption = true;\n          this.$i18n = createVueI18n(optionsI18n);\n        }\n      } else if (options.__i18n) {\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, options);\n        } else {\n          this.$i18n = createVueI18n({\n            __i18n: options.__i18n,\n            __injectWithOption: true,\n            __root: composer\n          });\n        }\n      } else {\n        // set global\n        this.$i18n = vuei18n;\n      }\n\n      vuei18n.__onComponentInstanceCreated(this.$i18n);\n\n      i18n.__setInstance(instance, this.$i18n); // defines vue-i18n legacy APIs\n\n\n      this.$t = (...args) => this.$i18n.t(...args);\n\n      this.$rt = (...args) => this.$i18n.rt(...args);\n\n      this.$tc = (...args) => this.$i18n.tc(...args);\n\n      this.$te = (key, locale) => this.$i18n.te(key, locale);\n\n      this.$d = (...args) => this.$i18n.d(...args);\n\n      this.$n = (...args) => this.$i18n.n(...args);\n\n      this.$tm = key => this.$i18n.tm(key);\n    },\n\n    mounted() {},\n\n    beforeUnmount() {\n      const instance = vue.getCurrentInstance();\n      /* istanbul ignore if */\n\n      if (!instance) {\n        throw createI18nError(22\n        /* UNEXPECTED_ERROR */\n        );\n      }\n\n      delete this.$t;\n      delete this.$rt;\n      delete this.$tc;\n      delete this.$te;\n      delete this.$d;\n      delete this.$n;\n      delete this.$tm;\n\n      i18n.__deleteInstance(instance);\n\n      delete this.$i18n;\n    }\n\n  };\n}\n\nfunction mergeToRoot(root, options) {\n  root.locale = options.locale || root.locale;\n  root.fallbackLocale = options.fallbackLocale || root.fallbackLocale;\n  root.missing = options.missing || root.missing;\n  root.silentTranslationWarn = options.silentTranslationWarn || root.silentFallbackWarn;\n  root.silentFallbackWarn = options.silentFallbackWarn || root.silentFallbackWarn;\n  root.formatFallbackMessages = options.formatFallbackMessages || root.formatFallbackMessages;\n  root.postTranslation = options.postTranslation || root.postTranslation;\n  root.warnHtmlInMessage = options.warnHtmlInMessage || root.warnHtmlInMessage;\n  root.escapeParameterHtml = options.escapeParameterHtml || root.escapeParameterHtml;\n  root.sync = options.sync || root.sync;\n\n  root.__composer[SetPluralRulesSymbol](options.pluralizationRules || root.pluralizationRules);\n\n  const messages = getLocaleMessages(root.locale, {\n    messages: options.messages,\n    __i18n: options.__i18n\n  });\n  Object.keys(messages).forEach(locale => root.mergeLocaleMessage(locale, messages[locale]));\n\n  if (options.datetimeFormats) {\n    Object.keys(options.datetimeFormats).forEach(locale => root.mergeDateTimeFormat(locale, options.datetimeFormats[locale]));\n  }\n\n  if (options.numberFormats) {\n    Object.keys(options.numberFormats).forEach(locale => root.mergeNumberFormat(locale, options.numberFormats[locale]));\n  }\n\n  return root;\n}\n/**\r\n * Vue I18n factory\r\n *\r\n * @param options - An options, see the {@link I18nOptions}\r\n *\r\n * @returns {@link I18n} instance\r\n *\r\n * @remarks\r\n * If you use Legacy API mode, you need toto specify {@link VueI18nOptions} and `legacy: true` option.\r\n *\r\n * If you use composition API mode, you need to specify {@link ComposerOptions}.\r\n *\r\n * @VueI18nSee [Getting Started](../guide/)\r\n * @VueI18nSee [Composition API](../guide/advanced/composition)\r\n *\r\n * @example\r\n * case: for Legacy API\r\n * ```js\r\n * import { createApp } from 'vue'\r\n * import { createI18n } from 'vue-i18n'\r\n *\r\n * // call with I18n option\r\n * const i18n = createI18n({\r\n *   locale: 'ja',\r\n *   messages: {\r\n *     en: { ... },\r\n *     ja: { ... }\r\n *   }\r\n * })\r\n *\r\n * const App = {\r\n *   // ...\r\n * }\r\n *\r\n * const app = createApp(App)\r\n *\r\n * // install!\r\n * app.use(i18n)\r\n * app.mount('#app')\r\n * ```\r\n *\r\n * @example\r\n * case: for composition API\r\n * ```js\r\n * import { createApp } from 'vue'\r\n * import { createI18n, useI18n } from 'vue-i18n'\r\n *\r\n * // call with I18n option\r\n * const i18n = createI18n({\r\n *   legacy: false, // you must specify 'legacy: false' option\r\n *   locale: 'ja',\r\n *   messages: {\r\n *     en: { ... },\r\n *     ja: { ... }\r\n *   }\r\n * })\r\n *\r\n * const App = {\r\n *   setup() {\r\n *     // ...\r\n *     const { t } = useI18n({ ... })\r\n *     return { ... , t }\r\n *   }\r\n * }\r\n *\r\n * const app = createApp(App)\r\n *\r\n * // install!\r\n * app.use(i18n)\r\n * app.mount('#app')\r\n * ```\r\n *\r\n * @VueI18nGeneral\r\n */\n\n\nfunction createI18n(options = {}) {\n  // prettier-ignore\n  const __legacyMode = shared.isBoolean(options.legacy) ? options.legacy : true;\n\n  const __globalInjection = !!options.globalInjection;\n\n  const __instances = new Map(); // prettier-ignore\n\n\n  const __global = __legacyMode ? createVueI18n(options) : createComposer(options);\n\n  const symbol = shared.makeSymbol('vue-i18n');\n  const i18n = {\n    // mode\n    get mode() {\n      // prettier-ignore\n      return __legacyMode ? 'legacy' : 'composition';\n    },\n\n    // install plugin\n    async install(app, ...options) {\n      // setup global provider\n      app.__VUE_I18N_SYMBOL__ = symbol;\n      app.provide(app.__VUE_I18N_SYMBOL__, i18n); // global method and properties injection for Composition API\n\n      if (!__legacyMode && __globalInjection) {\n        injectGlobalFields(app, i18n.global);\n      } // install built-in components and directive\n\n\n      {\n        apply(app, i18n, ...options);\n      } // setup mixin for Legacy API\n\n      if (__legacyMode) {\n        app.mixin(defineMixin(__global, __global.__composer, i18n));\n      }\n    },\n\n    // global accessor\n    get global() {\n      return __global;\n    },\n\n    // @internal\n    __instances,\n\n    // @internal\n    __getInstance(component) {\n      return __instances.get(component) || null;\n    },\n\n    // @internal\n    __setInstance(component, instance) {\n      __instances.set(component, instance);\n    },\n\n    // @internal\n    __deleteInstance(component) {\n      __instances.delete(component);\n    }\n\n  };\n  return i18n;\n}\n/**\r\n * Use Composition API for Vue I18n\r\n *\r\n * @param options - An options, see {@link UseI18nOptions}\r\n *\r\n * @returns {@link Composer} instance\r\n *\r\n * @remarks\r\n * This function is mainly used by `setup`.\r\n *\r\n * If options are specified, Composer instance is created for each component and you can be localized on the component.\r\n *\r\n * If options are not specified, you can be localized using the global Composer.\r\n *\r\n * @example\r\n * case: Component resource base localization\r\n * ```html\r\n * <template>\r\n *   <form>\r\n *     <label>{{ t('language') }}</label>\r\n *     <select v-model=\"locale\">\r\n *       <option value=\"en\">en</option>\r\n *       <option value=\"ja\">ja</option>\r\n *     </select>\r\n *   </form>\r\n *   <p>message: {{ t('hello') }}</p>\r\n * </template>\r\n *\r\n * <script>\r\n * import { useI18n } from 'vue-i18n'\r\n *\r\n * export default {\r\n *  setup() {\r\n *    const { t, locale } = useI18n({\r\n *      locale: 'ja',\r\n *      messages: {\r\n *        en: { ... },\r\n *        ja: { ... }\r\n *      }\r\n *    })\r\n *    // Something to do ...\r\n *\r\n *    return { ..., t, locale }\r\n *  }\r\n * }\r\n * </script>\r\n * ```\r\n *\r\n * @VueI18nComposition\r\n */\n\n\nfunction useI18n(options = {}) {\n  const instance = vue.getCurrentInstance();\n\n  if (instance == null) {\n    throw createI18nError(16\n    /* MUST_BE_CALL_SETUP_TOP */\n    );\n  }\n\n  if (!instance.appContext.app.__VUE_I18N_SYMBOL__) {\n    throw createI18nError(17\n    /* NOT_INSLALLED */\n    );\n  }\n\n  const i18n = vue.inject(instance.appContext.app.__VUE_I18N_SYMBOL__);\n  /* istanbul ignore if */\n\n  if (!i18n) {\n    throw createI18nError(22\n    /* UNEXPECTED_ERROR */\n    );\n  } // prettier-ignore\n\n\n  const global = i18n.mode === 'composition' ? i18n.global : i18n.global.__composer; // prettier-ignore\n\n  const scope = shared.isEmptyObject(options) ? '__i18n' in instance.type ? 'local' : 'global' : !options.useScope ? 'local' : options.useScope;\n\n  if (scope === 'global') {\n    let messages = shared.isObject(options.messages) ? options.messages : {};\n\n    if ('__i18nGlobal' in instance.type) {\n      messages = getLocaleMessages(global.locale.value, {\n        messages,\n        __i18n: instance.type.__i18nGlobal\n      });\n    } // merge locale messages\n\n\n    const locales = Object.keys(messages);\n\n    if (locales.length) {\n      locales.forEach(locale => {\n        global.mergeLocaleMessage(locale, messages[locale]);\n      });\n    } // merge datetime formats\n\n\n    if (shared.isObject(options.datetimeFormats)) {\n      const locales = Object.keys(options.datetimeFormats);\n\n      if (locales.length) {\n        locales.forEach(locale => {\n          global.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);\n        });\n      }\n    } // merge number formats\n\n\n    if (shared.isObject(options.numberFormats)) {\n      const locales = Object.keys(options.numberFormats);\n\n      if (locales.length) {\n        locales.forEach(locale => {\n          global.mergeNumberFormat(locale, options.numberFormats[locale]);\n        });\n      }\n    }\n\n    return global;\n  }\n\n  if (scope === 'parent') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let composer = getComposer(i18n, instance, options.__useComponent);\n\n    if (composer == null) {\n      {\n        shared.warn(getWarnMessage(12\n        /* NOT_FOUND_PARENT_SCOPE */\n        ));\n      }\n      composer = global;\n    }\n\n    return composer;\n  } // scope 'local' case\n\n\n  if (i18n.mode === 'legacy') {\n    throw createI18nError(18\n    /* NOT_AVAILABLE_IN_LEGACY_MODE */\n    );\n  }\n\n  const i18nInternal = i18n;\n\n  let composer = i18nInternal.__getInstance(instance);\n\n  if (composer == null) {\n    const type = instance.type;\n    const composerOptions = shared.assign({}, options);\n\n    if (type.__i18n) {\n      composerOptions.__i18n = type.__i18n;\n    }\n\n    if (global) {\n      composerOptions.__root = global;\n    }\n\n    composer = createComposer(composerOptions);\n    setupLifeCycle(i18nInternal, instance);\n\n    i18nInternal.__setInstance(instance, composer);\n  }\n\n  return composer;\n}\n\nfunction getComposer(i18n, target, useComponent = false) {\n  let composer = null;\n  const root = target.root;\n  let current = target.parent;\n\n  while (current != null) {\n    const i18nInternal = i18n;\n\n    if (i18n.mode === 'composition') {\n      composer = i18nInternal.__getInstance(current);\n    } else {\n      const vueI18n = i18nInternal.__getInstance(current);\n\n      if (vueI18n != null) {\n        composer = vueI18n.__composer;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      if (useComponent && composer && !composer[InejctWithOption]) {\n        composer = null;\n      }\n    }\n\n    if (composer != null) {\n      break;\n    }\n\n    if (root === current) {\n      break;\n    }\n\n    current = current.parent;\n  }\n\n  return composer;\n}\n\nfunction setupLifeCycle(i18n, target, composer) {\n  vue.onMounted(() => {}, target);\n  vue.onUnmounted(() => {\n    i18n.__deleteInstance(target);\n  }, target);\n}\n\nconst globalExportProps = ['locale', 'fallbackLocale', 'availableLocales'];\nconst globalExportMethods = ['t', 'rt', 'd', 'n', 'tm'];\n\nfunction injectGlobalFields(app, composer) {\n  const i18n = Object.create(null);\n  globalExportProps.forEach(prop => {\n    const desc = Object.getOwnPropertyDescriptor(composer, prop);\n\n    if (!desc) {\n      throw createI18nError(22\n      /* UNEXPECTED_ERROR */\n      );\n    }\n\n    const wrap = vue.isRef(desc.value) // check computed props\n    ? {\n      get() {\n        return desc.value.value;\n      },\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      set(val) {\n        desc.value.value = val;\n      }\n\n    } : {\n      get() {\n        return desc.get && desc.get();\n      }\n\n    };\n    Object.defineProperty(i18n, prop, wrap);\n  });\n  app.config.globalProperties.$i18n = i18n;\n  globalExportMethods.forEach(method => {\n    const desc = Object.getOwnPropertyDescriptor(composer, method);\n\n    if (!desc || !desc.value) {\n      throw createI18nError(22\n      /* UNEXPECTED_ERROR */\n      );\n    }\n\n    Object.defineProperty(app.config.globalProperties, `$${method}`, desc);\n  });\n} // register message compiler at vue-i18n\n\n\ncoreBase.registerMessageCompiler(coreBase.compileToFunction); // NOTE: experimental !!\n\n{\n  const target = shared.getGlobalThis();\n  target.__INTLIFY__ = true;\n  coreBase.setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);\n}\nexports.DatetimeFormat = DatetimeFormat;\nexports.NumberFormat = NumberFormat;\nexports.Translation = Translation;\nexports.VERSION = VERSION;\nexports.createI18n = createI18n;\nexports.useI18n = useI18n;\nexports.vTDirective = vTDirective;","map":null,"metadata":{},"sourceType":"script"}