{"ast":null,"code":"/* eslint no-var: off */\n\n/**\n * Tocbot\n * Tocbot creates a toble of contents based on HTML headings on a page,\n * this allows users to easily jump to different sections of the document.\n * Tocbot was inspired by tocify (http://gregfranko.com/jquery.tocify.js/).\n * The main differences are that it works natively without any need for jquery or jquery UI).\n *\n * @author Tim Scanlin\n */\n\n/* globals define */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory(root));\n  } else if (typeof exports === 'object') {\n    module.exports = factory(root);\n  } else {\n    root.tocbot = factory(root);\n  }\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n  'use strict'; // Default options.\n\n  var defaultOptions = require('./default-options.js'); // Object to store current options.\n\n\n  var options = {}; // Object for public APIs.\n\n  var tocbot = {};\n\n  var BuildHtml = require('./build-html.js');\n\n  var ParseContent = require('./parse-content.js');\n\n  var updateTocScroll = require('./update-toc-scroll.js'); // Keep these variables at top scope once options are passed in.\n\n\n  var buildHtml;\n  var parseContent; // Just return if its not a browser.\n\n  var supports = !!root && !!root.document && !!root.document.querySelector && !!root.addEventListener; // Feature test\n\n  if (typeof window === 'undefined' && !supports) {\n    return;\n  }\n\n  var headingsArray; // From: https://github.com/Raynos/xtend\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function extend() {\n    var target = {};\n\n    for (var i = 0; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  } // From: https://remysharp.com/2010/07/21/throttling-function-calls\n\n\n  function throttle(fn, threshhold, scope) {\n    threshhold || (threshhold = 250);\n    var last;\n    var deferTimer;\n    return function () {\n      var context = scope || this;\n      var now = +new Date();\n      var args = arguments;\n\n      if (last && now < last + threshhold) {\n        // hold on to it\n        clearTimeout(deferTimer);\n        deferTimer = setTimeout(function () {\n          last = now;\n          fn.apply(context, args);\n        }, threshhold);\n      } else {\n        last = now;\n        fn.apply(context, args);\n      }\n    };\n  }\n\n  function getContentElement(options) {\n    try {\n      return options.contentElement || document.querySelector(options.contentSelector);\n    } catch (e) {\n      console.warn('Contents element not found: ' + options.contentSelector); // eslint-disable-line\n\n      return null;\n    }\n  }\n\n  function getTocElement(options) {\n    try {\n      return options.tocElement || document.querySelector(options.tocSelector);\n    } catch (e) {\n      console.warn('TOC element not found: ' + options.tocSelector); // eslint-disable-line\n\n      return null;\n    }\n  }\n  /**\n   * Destroy tocbot.\n   */\n\n\n  tocbot.destroy = function () {\n    var tocElement = getTocElement(options);\n\n    if (tocElement === null) {\n      return;\n    }\n\n    if (!options.skipRendering) {\n      // Clear HTML.\n      if (tocElement) {\n        tocElement.innerHTML = '';\n      }\n    } // Remove event listeners.\n\n\n    if (options.scrollContainer && document.querySelector(options.scrollContainer)) {\n      document.querySelector(options.scrollContainer).removeEventListener('scroll', this._scrollListener, false);\n      document.querySelector(options.scrollContainer).removeEventListener('resize', this._scrollListener, false);\n\n      if (buildHtml) {\n        document.querySelector(options.scrollContainer).removeEventListener('click', this._clickListener, false);\n      }\n    } else {\n      document.removeEventListener('scroll', this._scrollListener, false);\n      document.removeEventListener('resize', this._scrollListener, false);\n\n      if (buildHtml) {\n        document.removeEventListener('click', this._clickListener, false);\n      }\n    }\n  };\n  /**\n   * Initialize tocbot.\n   * @param {object} customOptions\n   */\n\n\n  tocbot.init = function (customOptions) {\n    // feature test\n    if (!supports) {\n      return;\n    } // Merge defaults with user options.\n    // Set to options variable at the top.\n\n\n    options = extend(defaultOptions, customOptions || {});\n    this.options = options;\n    this.state = {}; // Init smooth scroll if enabled (default).\n\n    if (options.scrollSmooth) {\n      options.duration = options.scrollSmoothDuration;\n      options.offset = options.scrollSmoothOffset;\n      tocbot.scrollSmooth = require('./scroll-smooth').initSmoothScrolling(options);\n    } // Pass options to these modules.\n\n\n    buildHtml = BuildHtml(options);\n    parseContent = ParseContent(options); // For testing purposes.\n\n    this._buildHtml = buildHtml;\n    this._parseContent = parseContent;\n    this._headingsArray = headingsArray; // Destroy it if it exists first.\n\n    tocbot.destroy();\n    var contentElement = getContentElement(options);\n\n    if (contentElement === null) {\n      return;\n    }\n\n    var tocElement = getTocElement(options);\n\n    if (tocElement === null) {\n      return;\n    } // Get headings array.\n\n\n    headingsArray = parseContent.selectHeadings(contentElement, options.headingSelector); // Return if no headings are found.\n\n    if (headingsArray === null) {\n      return;\n    } // Build nested headings array.\n\n\n    var nestedHeadingsObj = parseContent.nestHeadingsArray(headingsArray);\n    var nestedHeadings = nestedHeadingsObj.nest; // Render.\n\n    if (!options.skipRendering) {\n      buildHtml.render(tocElement, nestedHeadings);\n    } // Update Sidebar and bind listeners.\n\n\n    this._scrollListener = throttle(function (e) {\n      buildHtml.updateToc(headingsArray);\n      !options.disableTocScrollSync && updateTocScroll(options);\n      var isTop = e && e.target && e.target.scrollingElement && e.target.scrollingElement.scrollTop === 0;\n\n      if (e && (e.eventPhase === 0 || e.currentTarget === null) || isTop) {\n        buildHtml.updateToc(headingsArray);\n\n        if (options.scrollEndCallback) {\n          options.scrollEndCallback(e);\n        }\n      }\n    }, options.throttleTimeout);\n\n    this._scrollListener();\n\n    if (options.scrollContainer && document.querySelector(options.scrollContainer)) {\n      document.querySelector(options.scrollContainer).addEventListener('scroll', this._scrollListener, false);\n      document.querySelector(options.scrollContainer).addEventListener('resize', this._scrollListener, false);\n    } else {\n      document.addEventListener('scroll', this._scrollListener, false);\n      document.addEventListener('resize', this._scrollListener, false);\n    } // Bind click listeners to disable animation.\n\n\n    var timeout = null;\n    this._clickListener = throttle(function (event) {\n      if (options.scrollSmooth) {\n        buildHtml.disableTocAnimation(event);\n      }\n\n      buildHtml.updateToc(headingsArray); // Timeout to re-enable the animation.\n\n      timeout && clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        buildHtml.enableTocAnimation();\n      }, options.scrollSmoothDuration);\n    }, options.throttleTimeout);\n\n    if (options.scrollContainer && document.querySelector(options.scrollContainer)) {\n      document.querySelector(options.scrollContainer).addEventListener('click', this._clickListener, false);\n    } else {\n      document.addEventListener('click', this._clickListener, false);\n    }\n\n    return this;\n  };\n  /**\n   * Refresh tocbot.\n   */\n\n\n  tocbot.refresh = function (customOptions) {\n    tocbot.destroy();\n    tocbot.init(customOptions || this.options);\n  }; // Make tocbot available globally.\n\n\n  root.tocbot = tocbot;\n  return tocbot;\n});","map":null,"metadata":{},"sourceType":"script"}