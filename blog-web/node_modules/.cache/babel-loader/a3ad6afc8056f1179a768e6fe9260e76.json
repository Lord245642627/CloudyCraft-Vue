{"ast":null,"code":"// Process *this* and _that_\n//\n'use strict'; // Insert each marker as a separate text token, and add it to delimiter list\n//\n\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i,\n      scanned,\n      token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) {\n    return false;\n  }\n\n  if (marker !== 0x5F\n  /* _ */\n  && marker !== 0x2A\n  /* * */\n  ) {\n    return false;\n  }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n  return true;\n};\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F\n    /* _ */\n    && startDelim.marker !== 0x2A\n    /* * */\n    ) {\n      continue;\n    } // Process only opening markers\n\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end]; // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n\n    isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && // check that first two markers match and adjacent\n    delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && // check that last two markers are adjacent (we can safely assume they match)\n    delimiters[startDelim.end + 1].token === endDelim.token + 1;\n    ch = String.fromCharCode(startDelim.marker);\n    token = state.tokens[startDelim.token];\n    token.type = isStrong ? 'strong_open' : 'em_open';\n    token.tag = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup = isStrong ? ch + ch : ch;\n    token.content = '';\n    token = state.tokens[endDelim.token];\n    token.type = isStrong ? 'strong_close' : 'em_close';\n    token.tag = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n} // Walk through delimiter list and replace text tokens with tags\n//\n\n\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};","map":{"version":3,"names":["module","exports","tokenize","emphasis","state","silent","i","scanned","token","start","pos","marker","src","charCodeAt","scanDelims","length","push","content","String","fromCharCode","delimiters","tokens","end","open","can_open","close","can_close","postProcess","startDelim","endDelim","ch","isStrong","max","type","tag","nesting","markup","curr","tokens_meta"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-web/node_modules/markdown-it/lib/rules_inline/emphasis.js"],"sourcesContent":["// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}