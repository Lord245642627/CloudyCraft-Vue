{"ast":null,"code":"import * as _ from 'lodash-es';\nexport { PriorityQueue };\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */\n\nclass PriorityQueue {\n  constructor() {\n    this._arr = [];\n    this._keyIndices = {};\n  }\n  /**\n   * Returns the number of elements in the queue. Takes `O(1)` time.\n   */\n\n\n  size() {\n    return this._arr.length;\n  }\n  /**\n   * Returns the keys that are in the queue. Takes `O(n)` time.\n   */\n\n\n  keys() {\n    return this._arr.map(function (x) {\n      return x.key;\n    });\n  }\n  /**\n   * Returns `true` if **key** is in the queue and `false` if not.\n   */\n\n\n  has(key) {\n    return _.has(this._keyIndices, key);\n  }\n  /**\n   * Returns the priority for **key**. If **key** is not present in the queue\n   * then this function returns `undefined`. Takes `O(1)` time.\n   *\n   * @param {Object} key\n   */\n\n\n  priority(key) {\n    var index = this._keyIndices[key];\n\n    if (index !== undefined) {\n      return this._arr[index].priority;\n    }\n  }\n  /**\n   * Returns the key for the minimum element in this queue. If the queue is\n   * empty this function throws an Error. Takes `O(1)` time.\n   */\n\n\n  min() {\n    if (this.size() === 0) {\n      throw new Error('Queue underflow');\n    }\n\n    return this._arr[0].key;\n  }\n  /**\n   * Inserts a new key into the priority queue. If the key already exists in\n   * the queue this function returns `false`; otherwise it will return `true`.\n   * Takes `O(n)` time.\n   *\n   * @param {Object} key the key to add\n   * @param {Number} priority the initial priority for the key\n   */\n\n\n  add(key, priority) {\n    var keyIndices = this._keyIndices;\n    key = String(key);\n\n    if (!_.has(keyIndices, key)) {\n      var arr = this._arr;\n      var index = arr.length;\n      keyIndices[key] = index;\n      arr.push({\n        key: key,\n        priority: priority\n      });\n\n      this._decrease(index);\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n   */\n\n\n  removeMin() {\n    this._swap(0, this._arr.length - 1);\n\n    var min = this._arr.pop();\n\n    delete this._keyIndices[min.key];\n\n    this._heapify(0);\n\n    return min.key;\n  }\n  /**\n   * Decreases the priority for **key** to **priority**. If the new priority is\n   * greater than the previous priority, this function will throw an Error.\n   *\n   * @param {Object} key the key for which to raise priority\n   * @param {Number} priority the new priority for the key\n   */\n\n\n  decrease(key, priority) {\n    var index = this._keyIndices[key];\n\n    if (priority > this._arr[index].priority) {\n      throw new Error('New priority is greater than current priority. ' + 'Key: ' + key + ' Old: ' + this._arr[index].priority + ' New: ' + priority);\n    }\n\n    this._arr[index].priority = priority;\n\n    this._decrease(index);\n  }\n\n  _heapify(i) {\n    var arr = this._arr;\n    var l = 2 * i;\n    var r = l + 1;\n    var largest = i;\n\n    if (l < arr.length) {\n      largest = arr[l].priority < arr[largest].priority ? l : largest;\n\n      if (r < arr.length) {\n        largest = arr[r].priority < arr[largest].priority ? r : largest;\n      }\n\n      if (largest !== i) {\n        this._swap(i, largest);\n\n        this._heapify(largest);\n      }\n    }\n  }\n\n  _decrease(index) {\n    var arr = this._arr;\n    var priority = arr[index].priority;\n    var parent;\n\n    while (index !== 0) {\n      parent = index >> 1;\n\n      if (arr[parent].priority < priority) {\n        break;\n      }\n\n      this._swap(index, parent);\n\n      index = parent;\n    }\n  }\n\n  _swap(i, j) {\n    var arr = this._arr;\n    var keyIndices = this._keyIndices;\n    var origArrI = arr[i];\n    var origArrJ = arr[j];\n    arr[i] = origArrJ;\n    arr[j] = origArrI;\n    keyIndices[origArrJ.key] = i;\n    keyIndices[origArrI.key] = j;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}