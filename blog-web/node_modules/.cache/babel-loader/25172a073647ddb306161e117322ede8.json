{"ast":null,"code":"import { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, unref, withDirectives, isRef, vModelCheckbox, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { checkboxProps, checkboxEmits, useCheckbox, useCheckboxGroup } from './checkbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst _hoisted_1 = [\"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nconst _hoisted_2 = [\"name\", \"tabindex\", \"disabled\", \"value\"];\nconst __default__ = {\n  name: \"ElCheckboxButton\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: checkboxProps,\n  emits: checkboxEmits,\n\n  setup(__props) {\n    const props = __props;\n    const slots = useSlots();\n    const {\n      focus,\n      isChecked,\n      isDisabled,\n      size,\n      model,\n      handleChange\n    } = useCheckbox(props, slots);\n    const {\n      checkboxGroup\n    } = useCheckboxGroup();\n    const ns = useNamespace(\"checkbox\");\n    const activeStyle = computed(() => {\n      var _a, _b, _c, _d;\n\n      const fillValue = (_b = (_a = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a.value) != null ? _b : \"\";\n      return {\n        backgroundColor: fillValue,\n        borderColor: fillValue,\n        color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : \"\",\n        boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : void 0\n      };\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"label\", {\n        class: normalizeClass([unref(ns).b(\"button\"), unref(ns).bm(\"button\", unref(size)), unref(ns).is(\"disabled\", unref(isDisabled)), unref(ns).is(\"checked\", unref(isChecked)), unref(ns).is(\"focus\", unref(focus))])\n      }, [_ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n        key: 0,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => isRef(model) ? model.value = $event : null),\n        class: normalizeClass(unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: unref(isDisabled),\n        \"true-value\": _ctx.trueLabel,\n        \"false-value\": _ctx.falseLabel,\n        onChange: _cache[1] || (_cache[1] = (...args) => unref(handleChange) && unref(handleChange)(...args)),\n        onFocus: _cache[2] || (_cache[2] = $event => focus.value = true),\n        onBlur: _cache[3] || (_cache[3] = $event => focus.value = false)\n      }, null, 42, _hoisted_1)), [[vModelCheckbox, unref(model)]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n        key: 1,\n        \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => isRef(model) ? model.value = $event : null),\n        class: normalizeClass(unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: unref(isDisabled),\n        value: _ctx.label,\n        onChange: _cache[5] || (_cache[5] = (...args) => unref(handleChange) && unref(handleChange)(...args)),\n        onFocus: _cache[6] || (_cache[6] = $event => focus.value = true),\n        onBlur: _cache[7] || (_cache[7] = $event => focus.value = false)\n      }, null, 42, _hoisted_2)), [[vModelCheckbox, unref(model)]]), _ctx.$slots.default || _ctx.label ? (openBlock(), createElementBlock(\"span\", {\n        key: 2,\n        class: normalizeClass(unref(ns).be(\"button\", \"inner\")),\n        style: normalizeStyle(unref(isChecked) ? unref(activeStyle) : void 0)\n      }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(_ctx.label), 1)])], 6)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n\n});\n\nvar CheckboxButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue\"]]);\n\nexport { CheckboxButton as default };","map":null,"metadata":{},"sourceType":"module"}