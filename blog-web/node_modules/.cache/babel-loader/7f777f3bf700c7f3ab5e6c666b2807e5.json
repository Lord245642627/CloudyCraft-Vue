{"ast":null,"code":"import { defineComponent, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, normalizeStyle, createElementVNode, toDisplayString } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport { useTree } from './composables/useTree.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { treeProps, treeEmits, ROOT_TREE_INJECTION_KEY } from './virtual-tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport { formItemContextKey } from '../../../tokens/form.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTreeV2\",\n  components: {\n    ElTreeNode,\n    FixedSizeList\n  },\n  props: treeProps,\n  emits: treeEmits,\n\n  setup(props, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance()\n    });\n    provide(formItemContextKey, void 0);\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"tree\");\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    } = useTree(props, ctx.emit);\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    });\n    return {\n      t,\n      ns,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  const _component_fixed_size_list = resolveComponent(\"fixed-size-list\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [_ctx.isNotEmpty ? (openBlock(), createBlock(_component_fixed_size_list, {\n    key: 0,\n    \"class-name\": _ctx.ns.b(\"virtual-list\"),\n    data: _ctx.flattenTree,\n    total: _ctx.flattenTree.length,\n    height: _ctx.height,\n    \"item-size\": _ctx.itemSize,\n    \"perf-mode\": _ctx.perfMode\n  }, {\n    default: withCtx(({\n      data,\n      index,\n      style\n    }) => [(openBlock(), createBlock(_component_el_tree_node, {\n      key: data[index].key,\n      style: normalizeStyle(style),\n      node: data[index],\n      expanded: _ctx.isExpanded(data[index]),\n      \"show-checkbox\": _ctx.showCheckbox,\n      checked: _ctx.isChecked(data[index]),\n      indeterminate: _ctx.isIndeterminate(data[index]),\n      disabled: _ctx.isDisabled(data[index]),\n      current: _ctx.isCurrent(data[index]),\n      \"hidden-expand-icon\": _ctx.isForceHiddenExpandIcon(data[index]),\n      onClick: _ctx.handleNodeClick,\n      onToggle: _ctx.toggleExpand,\n      onCheck: _ctx.handleNodeCheck\n    }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\"]))]),\n    _: 1\n  }, 8, [\"class-name\", \"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2))], 2);\n}\n\nvar TreeV2 = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree-v2/src/tree.vue\"]]);\n\nexport { TreeV2 as default };","map":null,"metadata":{},"sourceType":"module"}