{"ast":null,"code":"(function () {\n  if (typeof Prism === 'undefined' || typeof document === 'undefined') {\n    return;\n  }\n\n  if (!Prism.plugins.toolbar) {\n    console.warn('Copy to Clipboard plugin loaded before Toolbar plugin.');\n    return;\n  }\n  /**\n   * When the given elements is clicked by the user, the given text will be copied to clipboard.\n   *\n   * @param {HTMLElement} element\n   * @param {CopyInfo} copyInfo\n   *\n   * @typedef CopyInfo\n   * @property {() => string} getText\n   * @property {() => void} success\n   * @property {(reason: unknown) => void} error\n   */\n\n\n  function registerClipboard(element, copyInfo) {\n    element.addEventListener('click', function () {\n      copyTextToClipboard(copyInfo);\n    });\n  } // https://stackoverflow.com/a/30810322/7595472\n\n  /** @param {CopyInfo} copyInfo */\n\n\n  function fallbackCopyTextToClipboard(copyInfo) {\n    var textArea = document.createElement('textarea');\n    textArea.value = copyInfo.getText(); // Avoid scrolling to bottom\n\n    textArea.style.top = '0';\n    textArea.style.left = '0';\n    textArea.style.position = 'fixed';\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n\n    try {\n      var successful = document.execCommand('copy');\n      setTimeout(function () {\n        if (successful) {\n          copyInfo.success();\n        } else {\n          copyInfo.error();\n        }\n      }, 1);\n    } catch (err) {\n      setTimeout(function () {\n        copyInfo.error(err);\n      }, 1);\n    }\n\n    document.body.removeChild(textArea);\n  }\n  /** @param {CopyInfo} copyInfo */\n\n\n  function copyTextToClipboard(copyInfo) {\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(copyInfo.getText()).then(copyInfo.success, function () {\n        // try the fallback in case `writeText` didn't work\n        fallbackCopyTextToClipboard(copyInfo);\n      });\n    } else {\n      fallbackCopyTextToClipboard(copyInfo);\n    }\n  }\n  /**\n   * Selects the text content of the given element.\n   *\n   * @param {Element} element\n   */\n\n\n  function selectElementText(element) {\n    // https://stackoverflow.com/a/20079910/7595472\n    window.getSelection().selectAllChildren(element);\n  }\n  /**\n   * Traverses up the DOM tree to find data attributes that override the default plugin settings.\n   *\n   * @param {Element} startElement An element to start from.\n   * @returns {Settings} The plugin settings.\n   * @typedef {Record<\"copy\" | \"copy-error\" | \"copy-success\" | \"copy-timeout\", string | number>} Settings\n   */\n\n\n  function getSettings(startElement) {\n    /** @type {Settings} */\n    var settings = {\n      'copy': 'Copy',\n      'copy-error': 'Press Ctrl+C to copy',\n      'copy-success': 'Copied!',\n      'copy-timeout': 5000\n    };\n    var prefix = 'data-prismjs-';\n\n    for (var key in settings) {\n      var attr = prefix + key;\n      var element = startElement;\n\n      while (element && !element.hasAttribute(attr)) {\n        element = element.parentElement;\n      }\n\n      if (element) {\n        settings[key] = element.getAttribute(attr);\n      }\n    }\n\n    return settings;\n  }\n\n  Prism.plugins.toolbar.registerButton('copy-to-clipboard', function (env) {\n    var element = env.element;\n    var settings = getSettings(element);\n    var linkCopy = document.createElement('button');\n    linkCopy.className = 'copy-to-clipboard-button';\n    linkCopy.setAttribute('type', 'button');\n    var linkSpan = document.createElement('span');\n    linkCopy.appendChild(linkSpan);\n    setState('copy');\n    registerClipboard(linkCopy, {\n      getText: function () {\n        return element.textContent;\n      },\n      success: function () {\n        setState('copy-success');\n        resetText();\n      },\n      error: function () {\n        setState('copy-error');\n        setTimeout(function () {\n          selectElementText(element);\n        }, 1);\n        resetText();\n      }\n    });\n    return linkCopy;\n\n    function resetText() {\n      setTimeout(function () {\n        setState('copy');\n      }, settings['copy-timeout']);\n    }\n    /** @param {\"copy\" | \"copy-error\" | \"copy-success\"} state */\n\n\n    function setState(state) {\n      linkSpan.textContent = settings[state];\n      linkCopy.setAttribute('data-copy-state', state);\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}