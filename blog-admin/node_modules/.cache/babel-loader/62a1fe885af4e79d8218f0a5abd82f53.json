{"ast":null,"code":"import * as _ from 'lodash-es';\nimport * as util from './util.js';\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = {\n    width: 0,\n    height: 0,\n    rank: rank,\n    borderType: prop\n  };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n\n  if (prev) {\n    g.setEdge(prev, curr, {\n      weight: 1\n    });\n  }\n}","map":{"version":3,"names":["_","util","addBorderSegments","g","dfs","v","children","node","length","forEach","has","borderLeft","borderRight","rank","minRank","maxRank","addBorderNode","prop","prefix","sg","sgNode","label","width","height","borderType","prev","curr","addDummyNode","setParent","setEdge","weight"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-admin/node_modules/dagre-d3-es/src/dagre/add-border-segments.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,WAAnB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,SAASC,iBAAT;;AAEA,SAASA,iBAAT,CAA2BC,CAA3B,EAA8B;EAC5B,SAASC,GAAT,CAAaC,CAAb,EAAgB;IACd,IAAIC,QAAQ,GAAGH,CAAC,CAACG,QAAF,CAAWD,CAAX,CAAf;IACA,IAAIE,IAAI,GAAGJ,CAAC,CAACI,IAAF,CAAOF,CAAP,CAAX;;IACA,IAAIC,QAAQ,CAACE,MAAb,EAAqB;MACnBR,CAAC,CAACS,OAAF,CAAUH,QAAV,EAAoBF,GAApB;IACD;;IAED,IAAIJ,CAAC,CAACU,GAAF,CAAMH,IAAN,EAAY,SAAZ,CAAJ,EAA4B;MAC1BA,IAAI,CAACI,UAAL,GAAkB,EAAlB;MACAJ,IAAI,CAACK,WAAL,GAAmB,EAAnB;;MACA,KAAK,IAAIC,IAAI,GAAGN,IAAI,CAACO,OAAhB,EAAyBC,OAAO,GAAGR,IAAI,CAACQ,OAAL,GAAe,CAAvD,EAA0DF,IAAI,GAAGE,OAAjE,EAA0E,EAAEF,IAA5E,EAAkF;QAChFG,aAAa,CAACb,CAAD,EAAI,YAAJ,EAAkB,KAAlB,EAAyBE,CAAzB,EAA4BE,IAA5B,EAAkCM,IAAlC,CAAb;QACAG,aAAa,CAACb,CAAD,EAAI,aAAJ,EAAmB,KAAnB,EAA0BE,CAA1B,EAA6BE,IAA7B,EAAmCM,IAAnC,CAAb;MACD;IACF;EACF;;EAEDb,CAAC,CAACS,OAAF,CAAUN,CAAC,CAACG,QAAF,EAAV,EAAwBF,GAAxB;AACD;;AAED,SAASY,aAAT,CAAuBb,CAAvB,EAA0Bc,IAA1B,EAAgCC,MAAhC,EAAwCC,EAAxC,EAA4CC,MAA5C,EAAoDP,IAApD,EAA0D;EACxD,IAAIQ,KAAK,GAAG;IAAEC,KAAK,EAAE,CAAT;IAAYC,MAAM,EAAE,CAApB;IAAuBV,IAAI,EAAEA,IAA7B;IAAmCW,UAAU,EAAEP;EAA/C,CAAZ;EACA,IAAIQ,IAAI,GAAGL,MAAM,CAACH,IAAD,CAAN,CAAaJ,IAAI,GAAG,CAApB,CAAX;EACA,IAAIa,IAAI,GAAGzB,IAAI,CAAC0B,YAAL,CAAkBxB,CAAlB,EAAqB,QAArB,EAA+BkB,KAA/B,EAAsCH,MAAtC,CAAX;EACAE,MAAM,CAACH,IAAD,CAAN,CAAaJ,IAAb,IAAqBa,IAArB;EACAvB,CAAC,CAACyB,SAAF,CAAYF,IAAZ,EAAkBP,EAAlB;;EACA,IAAIM,IAAJ,EAAU;IACRtB,CAAC,CAAC0B,OAAF,CAAUJ,IAAV,EAAgBC,IAAhB,EAAsB;MAAEI,MAAM,EAAE;IAAV,CAAtB;EACD;AACF"},"metadata":{},"sourceType":"module"}