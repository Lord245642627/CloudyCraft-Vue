{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar IndicatorAxis = require(\"./IndicatorAxis\");\n\nvar IntervalScale = require(\"../../scale/Interval\");\n\nvar numberUtil = require(\"../../util/number\");\n\nvar _axisHelper = require(\"../axisHelper\");\n\nvar getScaleExtent = _axisHelper.getScaleExtent;\nvar niceScaleExtent = _axisHelper.niceScaleExtent;\n\nvar CoordinateSystem = require(\"../../CoordinateSystem\");\n\nvar LogScale = require(\"../../scale/Log\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO clockwise\n\n\nfunction Radar(radarModel, ecModel, api) {\n  this._model = radarModel;\n  /**\n   * Radar dimensions\n   * @type {Array.<string>}\n   */\n\n  this.dimensions = [];\n  this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {\n    var dim = 'indicator_' + idx;\n    var indicatorAxis = new IndicatorAxis(dim, indicatorModel.get('axisType') === 'log' ? new LogScale() : new IntervalScale());\n    indicatorAxis.name = indicatorModel.get('name'); // Inject model and axis\n\n    indicatorAxis.model = indicatorModel;\n    indicatorModel.axis = indicatorAxis;\n    this.dimensions.push(dim);\n    return indicatorAxis;\n  }, this);\n  this.resize(radarModel, api);\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.cx;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.cy;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.r;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.r0;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.startAngle;\n}\n\nRadar.prototype.getIndicatorAxes = function () {\n  return this._indicatorAxes;\n};\n\nRadar.prototype.dataToPoint = function (value, indicatorIndex) {\n  var indicatorAxis = this._indicatorAxes[indicatorIndex];\n  return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);\n};\n\nRadar.prototype.coordToPoint = function (coord, indicatorIndex) {\n  var indicatorAxis = this._indicatorAxes[indicatorIndex];\n  var angle = indicatorAxis.angle;\n  var x = this.cx + coord * Math.cos(angle);\n  var y = this.cy - coord * Math.sin(angle);\n  return [x, y];\n};\n\nRadar.prototype.pointToData = function (pt) {\n  var dx = pt[0] - this.cx;\n  var dy = pt[1] - this.cy;\n  var radius = Math.sqrt(dx * dx + dy * dy);\n  dx /= radius;\n  dy /= radius;\n  var radian = Math.atan2(-dy, dx); // Find the closest angle\n  // FIXME index can calculated directly\n\n  var minRadianDiff = Infinity;\n  var closestAxis;\n  var closestAxisIdx = -1;\n\n  for (var i = 0; i < this._indicatorAxes.length; i++) {\n    var indicatorAxis = this._indicatorAxes[i];\n    var diff = Math.abs(radian - indicatorAxis.angle);\n\n    if (diff < minRadianDiff) {\n      closestAxis = indicatorAxis;\n      closestAxisIdx = i;\n      minRadianDiff = diff;\n    }\n  }\n\n  return [closestAxisIdx, +(closestAxis && closestAxis.coordToData(radius))];\n};\n\nRadar.prototype.resize = function (radarModel, api) {\n  var center = radarModel.get('center');\n  var viewWidth = api.getWidth();\n  var viewHeight = api.getHeight();\n  var viewSize = Math.min(viewWidth, viewHeight) / 2;\n  this.cx = numberUtil.parsePercent(center[0], viewWidth);\n  this.cy = numberUtil.parsePercent(center[1], viewHeight);\n  this.startAngle = radarModel.get('startAngle') * Math.PI / 180; // radius may be single value like `20`, `'80%'`, or array like `[10, '80%']`\n\n  var radius = radarModel.get('radius');\n\n  if (typeof radius === 'string' || typeof radius === 'number') {\n    radius = [0, radius];\n  }\n\n  this.r0 = numberUtil.parsePercent(radius[0], viewSize);\n  this.r = numberUtil.parsePercent(radius[1], viewSize);\n  zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {\n    indicatorAxis.setExtent(this.r0, this.r);\n    var angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length; // Normalize to [-PI, PI]\n\n    angle = Math.atan2(Math.sin(angle), Math.cos(angle));\n    indicatorAxis.angle = angle;\n  }, this);\n};\n\nRadar.prototype.update = function (ecModel, api) {\n  var indicatorAxes = this._indicatorAxes;\n  var radarModel = this._model;\n  zrUtil.each(indicatorAxes, function (indicatorAxis) {\n    indicatorAxis.scale.setExtent(Infinity, -Infinity);\n  });\n  ecModel.eachSeriesByType('radar', function (radarSeries, idx) {\n    if (radarSeries.get('coordinateSystem') !== 'radar' || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel) {\n      return;\n    }\n\n    var data = radarSeries.getData();\n    zrUtil.each(indicatorAxes, function (indicatorAxis) {\n      indicatorAxis.scale.unionExtentFromData(data, data.mapDimension(indicatorAxis.dim));\n    });\n  }, this);\n  var splitNumber = radarModel.get('splitNumber');\n\n  function increaseInterval(interval) {\n    var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10)); // Increase interval\n\n    var f = interval / exp10;\n\n    if (f === 2) {\n      f = 5;\n    } else {\n      // f is 2 or 5\n      f *= 2;\n    }\n\n    return f * exp10;\n  } // Force all the axis fixing the maxSplitNumber.\n\n\n  zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {\n    var rawExtent = getScaleExtent(indicatorAxis.scale, indicatorAxis.model).extent;\n    niceScaleExtent(indicatorAxis.scale, indicatorAxis.model);\n    var axisModel = indicatorAxis.model;\n    var scale = indicatorAxis.scale;\n    var fixedMin = axisModel.getMin();\n    var fixedMax = axisModel.getMax();\n    var interval = scale.getInterval();\n\n    if (fixedMin != null && fixedMax != null) {\n      // User set min, max, divide to get new interval\n      scale.setExtent(+fixedMin, +fixedMax);\n      scale.setInterval((fixedMax - fixedMin) / splitNumber);\n    } else if (fixedMin != null) {\n      var max; // User set min, expand extent on the other side\n\n      do {\n        max = fixedMin + interval * splitNumber;\n        scale.setExtent(+fixedMin, max); // Interval must been set after extent\n        // FIXME\n\n        scale.setInterval(interval);\n        interval = increaseInterval(interval);\n      } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));\n    } else if (fixedMax != null) {\n      var min; // User set min, expand extent on the other side\n\n      do {\n        min = fixedMax - interval * splitNumber;\n        scale.setExtent(min, +fixedMax);\n        scale.setInterval(interval);\n        interval = increaseInterval(interval);\n      } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));\n    } else {\n      var nicedSplitNumber = scale.getTicks().length - 1;\n\n      if (nicedSplitNumber > splitNumber) {\n        interval = increaseInterval(interval);\n      } // TODO\n\n\n      var max = Math.ceil(rawExtent[1] / interval) * interval;\n      var min = numberUtil.round(max - interval * splitNumber);\n      scale.setExtent(min, max);\n      scale.setInterval(interval);\n    }\n  });\n};\n/**\n * Radar dimensions is based on the data\n * @type {Array}\n */\n\n\nRadar.dimensions = [];\n\nRadar.create = function (ecModel, api) {\n  var radarList = [];\n  ecModel.eachComponent('radar', function (radarModel) {\n    var radar = new Radar(radarModel, ecModel, api);\n    radarList.push(radar);\n    radarModel.coordinateSystem = radar;\n  });\n  ecModel.eachSeriesByType('radar', function (radarSeries) {\n    if (radarSeries.get('coordinateSystem') === 'radar') {\n      // Inject coordinate system\n      radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];\n    }\n  });\n  return radarList;\n};\n\nCoordinateSystem.register('radar', Radar);\nvar _default = Radar;\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","IndicatorAxis","IntervalScale","numberUtil","_axisHelper","getScaleExtent","niceScaleExtent","CoordinateSystem","LogScale","Radar","radarModel","ecModel","api","_model","dimensions","_indicatorAxes","map","getIndicatorModels","indicatorModel","idx","dim","indicatorAxis","get","name","model","axis","push","resize","cx","cy","r","r0","startAngle","prototype","getIndicatorAxes","dataToPoint","value","indicatorIndex","coordToPoint","dataToCoord","coord","angle","x","Math","cos","y","sin","pointToData","pt","dx","dy","radius","sqrt","radian","atan2","minRadianDiff","Infinity","closestAxis","closestAxisIdx","i","length","diff","abs","coordToData","center","viewWidth","getWidth","viewHeight","getHeight","viewSize","min","parsePercent","PI","each","setExtent","update","indicatorAxes","scale","eachSeriesByType","radarSeries","getComponent","data","getData","unionExtentFromData","mapDimension","splitNumber","increaseInterval","interval","exp10","pow","floor","log","LN10","f","rawExtent","extent","axisModel","fixedMin","getMin","fixedMax","getMax","getInterval","setInterval","max","isFinite","nicedSplitNumber","getTicks","ceil","round","create","radarList","eachComponent","radar","coordinateSystem","register","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/coord/radar/Radar.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar IndicatorAxis = require(\"./IndicatorAxis\");\n\nvar IntervalScale = require(\"../../scale/Interval\");\n\nvar numberUtil = require(\"../../util/number\");\n\nvar _axisHelper = require(\"../axisHelper\");\n\nvar getScaleExtent = _axisHelper.getScaleExtent;\nvar niceScaleExtent = _axisHelper.niceScaleExtent;\n\nvar CoordinateSystem = require(\"../../CoordinateSystem\");\n\nvar LogScale = require(\"../../scale/Log\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO clockwise\nfunction Radar(radarModel, ecModel, api) {\n  this._model = radarModel;\n  /**\n   * Radar dimensions\n   * @type {Array.<string>}\n   */\n\n  this.dimensions = [];\n  this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {\n    var dim = 'indicator_' + idx;\n    var indicatorAxis = new IndicatorAxis(dim, indicatorModel.get('axisType') === 'log' ? new LogScale() : new IntervalScale());\n    indicatorAxis.name = indicatorModel.get('name'); // Inject model and axis\n\n    indicatorAxis.model = indicatorModel;\n    indicatorModel.axis = indicatorAxis;\n    this.dimensions.push(dim);\n    return indicatorAxis;\n  }, this);\n  this.resize(radarModel, api);\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.cx;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.cy;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.r;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.r0;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.startAngle;\n}\n\nRadar.prototype.getIndicatorAxes = function () {\n  return this._indicatorAxes;\n};\n\nRadar.prototype.dataToPoint = function (value, indicatorIndex) {\n  var indicatorAxis = this._indicatorAxes[indicatorIndex];\n  return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);\n};\n\nRadar.prototype.coordToPoint = function (coord, indicatorIndex) {\n  var indicatorAxis = this._indicatorAxes[indicatorIndex];\n  var angle = indicatorAxis.angle;\n  var x = this.cx + coord * Math.cos(angle);\n  var y = this.cy - coord * Math.sin(angle);\n  return [x, y];\n};\n\nRadar.prototype.pointToData = function (pt) {\n  var dx = pt[0] - this.cx;\n  var dy = pt[1] - this.cy;\n  var radius = Math.sqrt(dx * dx + dy * dy);\n  dx /= radius;\n  dy /= radius;\n  var radian = Math.atan2(-dy, dx); // Find the closest angle\n  // FIXME index can calculated directly\n\n  var minRadianDiff = Infinity;\n  var closestAxis;\n  var closestAxisIdx = -1;\n\n  for (var i = 0; i < this._indicatorAxes.length; i++) {\n    var indicatorAxis = this._indicatorAxes[i];\n    var diff = Math.abs(radian - indicatorAxis.angle);\n\n    if (diff < minRadianDiff) {\n      closestAxis = indicatorAxis;\n      closestAxisIdx = i;\n      minRadianDiff = diff;\n    }\n  }\n\n  return [closestAxisIdx, +(closestAxis && closestAxis.coordToData(radius))];\n};\n\nRadar.prototype.resize = function (radarModel, api) {\n  var center = radarModel.get('center');\n  var viewWidth = api.getWidth();\n  var viewHeight = api.getHeight();\n  var viewSize = Math.min(viewWidth, viewHeight) / 2;\n  this.cx = numberUtil.parsePercent(center[0], viewWidth);\n  this.cy = numberUtil.parsePercent(center[1], viewHeight);\n  this.startAngle = radarModel.get('startAngle') * Math.PI / 180; // radius may be single value like `20`, `'80%'`, or array like `[10, '80%']`\n\n  var radius = radarModel.get('radius');\n\n  if (typeof radius === 'string' || typeof radius === 'number') {\n    radius = [0, radius];\n  }\n\n  this.r0 = numberUtil.parsePercent(radius[0], viewSize);\n  this.r = numberUtil.parsePercent(radius[1], viewSize);\n  zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {\n    indicatorAxis.setExtent(this.r0, this.r);\n    var angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length; // Normalize to [-PI, PI]\n\n    angle = Math.atan2(Math.sin(angle), Math.cos(angle));\n    indicatorAxis.angle = angle;\n  }, this);\n};\n\nRadar.prototype.update = function (ecModel, api) {\n  var indicatorAxes = this._indicatorAxes;\n  var radarModel = this._model;\n  zrUtil.each(indicatorAxes, function (indicatorAxis) {\n    indicatorAxis.scale.setExtent(Infinity, -Infinity);\n  });\n  ecModel.eachSeriesByType('radar', function (radarSeries, idx) {\n    if (radarSeries.get('coordinateSystem') !== 'radar' || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel) {\n      return;\n    }\n\n    var data = radarSeries.getData();\n    zrUtil.each(indicatorAxes, function (indicatorAxis) {\n      indicatorAxis.scale.unionExtentFromData(data, data.mapDimension(indicatorAxis.dim));\n    });\n  }, this);\n  var splitNumber = radarModel.get('splitNumber');\n\n  function increaseInterval(interval) {\n    var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10)); // Increase interval\n\n    var f = interval / exp10;\n\n    if (f === 2) {\n      f = 5;\n    } else {\n      // f is 2 or 5\n      f *= 2;\n    }\n\n    return f * exp10;\n  } // Force all the axis fixing the maxSplitNumber.\n\n\n  zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {\n    var rawExtent = getScaleExtent(indicatorAxis.scale, indicatorAxis.model).extent;\n    niceScaleExtent(indicatorAxis.scale, indicatorAxis.model);\n    var axisModel = indicatorAxis.model;\n    var scale = indicatorAxis.scale;\n    var fixedMin = axisModel.getMin();\n    var fixedMax = axisModel.getMax();\n    var interval = scale.getInterval();\n\n    if (fixedMin != null && fixedMax != null) {\n      // User set min, max, divide to get new interval\n      scale.setExtent(+fixedMin, +fixedMax);\n      scale.setInterval((fixedMax - fixedMin) / splitNumber);\n    } else if (fixedMin != null) {\n      var max; // User set min, expand extent on the other side\n\n      do {\n        max = fixedMin + interval * splitNumber;\n        scale.setExtent(+fixedMin, max); // Interval must been set after extent\n        // FIXME\n\n        scale.setInterval(interval);\n        interval = increaseInterval(interval);\n      } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));\n    } else if (fixedMax != null) {\n      var min; // User set min, expand extent on the other side\n\n      do {\n        min = fixedMax - interval * splitNumber;\n        scale.setExtent(min, +fixedMax);\n        scale.setInterval(interval);\n        interval = increaseInterval(interval);\n      } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));\n    } else {\n      var nicedSplitNumber = scale.getTicks().length - 1;\n\n      if (nicedSplitNumber > splitNumber) {\n        interval = increaseInterval(interval);\n      } // TODO\n\n\n      var max = Math.ceil(rawExtent[1] / interval) * interval;\n      var min = numberUtil.round(max - interval * splitNumber);\n      scale.setExtent(min, max);\n      scale.setInterval(interval);\n    }\n  });\n};\n/**\n * Radar dimensions is based on the data\n * @type {Array}\n */\n\n\nRadar.dimensions = [];\n\nRadar.create = function (ecModel, api) {\n  var radarList = [];\n  ecModel.eachComponent('radar', function (radarModel) {\n    var radar = new Radar(radarModel, ecModel, api);\n    radarList.push(radar);\n    radarModel.coordinateSystem = radar;\n  });\n  ecModel.eachSeriesByType('radar', function (radarSeries) {\n    if (radarSeries.get('coordinateSystem') === 'radar') {\n      // Inject coordinate system\n      radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];\n    }\n  });\n  return radarList;\n};\n\nCoordinateSystem.register('radar', Radar);\nvar _default = Radar;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}