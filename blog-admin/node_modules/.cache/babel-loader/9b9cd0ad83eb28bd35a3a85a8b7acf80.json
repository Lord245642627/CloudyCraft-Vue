{"ast":null,"code":"/**\n * Sub-pixel optimize for canvas rendering, prevent from blur\n * when rendering a thin vertical/horizontal line.\n */\nvar round = Math.round;\n/**\n * Sub pixel optimize line for canvas\n *\n * @param {Object} outputShape The modification will be performed on `outputShape`.\n *                 `outputShape` and `inputShape` can be the same object.\n *                 `outputShape` object can be used repeatly, because all of\n *                 the `x1`, `x2`, `y1`, `y2` will be assigned in this method.\n * @param {Object} [inputShape]\n * @param {number} [inputShape.x1]\n * @param {number} [inputShape.y1]\n * @param {number} [inputShape.x2]\n * @param {number} [inputShape.y2]\n * @param {Object} [style]\n * @param {number} [style.lineWidth] If `null`/`undefined`/`0`, do not optimize.\n */\n\nfunction subPixelOptimizeLine(outputShape, inputShape, style) {\n  if (!inputShape) {\n    return;\n  }\n\n  var x1 = inputShape.x1;\n  var x2 = inputShape.x2;\n  var y1 = inputShape.y1;\n  var y2 = inputShape.y2;\n  outputShape.x1 = x1;\n  outputShape.x2 = x2;\n  outputShape.y1 = y1;\n  outputShape.y2 = y2;\n  var lineWidth = style && style.lineWidth;\n\n  if (!lineWidth) {\n    return;\n  }\n\n  if (round(x1 * 2) === round(x2 * 2)) {\n    outputShape.x1 = outputShape.x2 = subPixelOptimize(x1, lineWidth, true);\n  }\n\n  if (round(y1 * 2) === round(y2 * 2)) {\n    outputShape.y1 = outputShape.y2 = subPixelOptimize(y1, lineWidth, true);\n  }\n}\n/**\n * Sub pixel optimize rect for canvas\n *\n * @param {Object} outputShape The modification will be performed on `outputShape`.\n *                 `outputShape` and `inputShape` can be the same object.\n *                 `outputShape` object can be used repeatly, because all of\n *                 the `x`, `y`, `width`, `height` will be assigned in this method.\n * @param {Object} [inputShape]\n * @param {number} [inputShape.x]\n * @param {number} [inputShape.y]\n * @param {number} [inputShape.width]\n * @param {number} [inputShape.height]\n * @param {Object} [style]\n * @param {number} [style.lineWidth] If `null`/`undefined`/`0`, do not optimize.\n */\n\n\nfunction subPixelOptimizeRect(outputShape, inputShape, style) {\n  if (!inputShape) {\n    return;\n  }\n\n  var originX = inputShape.x;\n  var originY = inputShape.y;\n  var originWidth = inputShape.width;\n  var originHeight = inputShape.height;\n  outputShape.x = originX;\n  outputShape.y = originY;\n  outputShape.width = originWidth;\n  outputShape.height = originHeight;\n  var lineWidth = style && style.lineWidth;\n\n  if (!lineWidth) {\n    return;\n  }\n\n  outputShape.x = subPixelOptimize(originX, lineWidth, true);\n  outputShape.y = subPixelOptimize(originY, lineWidth, true);\n  outputShape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - outputShape.x, originWidth === 0 ? 0 : 1);\n  outputShape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - outputShape.y, originHeight === 0 ? 0 : 1);\n}\n/**\n * Sub pixel optimize for canvas\n *\n * @param {number} position Coordinate, such as x, y\n * @param {number} lineWidth If `null`/`undefined`/`0`, do not optimize.\n * @param {boolean=} positiveOrNegative Default false (negative).\n * @return {number} Optimized position.\n */\n\n\nfunction subPixelOptimize(position, lineWidth, positiveOrNegative) {\n  if (!lineWidth) {\n    return position;\n  } // Assure that (position + lineWidth / 2) is near integer edge,\n  // otherwise line will be fuzzy in canvas.\n\n\n  var doubledPosition = round(position * 2);\n  return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n}\n\nexports.subPixelOptimizeLine = subPixelOptimizeLine;\nexports.subPixelOptimizeRect = subPixelOptimizeRect;\nexports.subPixelOptimize = subPixelOptimize;","map":{"version":3,"names":["round","Math","subPixelOptimizeLine","outputShape","inputShape","style","x1","x2","y1","y2","lineWidth","subPixelOptimize","subPixelOptimizeRect","originX","x","originY","y","originWidth","width","originHeight","height","max","position","positiveOrNegative","doubledPosition","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-admin/node_modules/zrender/lib/graphic/helper/subPixelOptimize.js"],"sourcesContent":["/**\n * Sub-pixel optimize for canvas rendering, prevent from blur\n * when rendering a thin vertical/horizontal line.\n */\nvar round = Math.round;\n/**\n * Sub pixel optimize line for canvas\n *\n * @param {Object} outputShape The modification will be performed on `outputShape`.\n *                 `outputShape` and `inputShape` can be the same object.\n *                 `outputShape` object can be used repeatly, because all of\n *                 the `x1`, `x2`, `y1`, `y2` will be assigned in this method.\n * @param {Object} [inputShape]\n * @param {number} [inputShape.x1]\n * @param {number} [inputShape.y1]\n * @param {number} [inputShape.x2]\n * @param {number} [inputShape.y2]\n * @param {Object} [style]\n * @param {number} [style.lineWidth] If `null`/`undefined`/`0`, do not optimize.\n */\n\nfunction subPixelOptimizeLine(outputShape, inputShape, style) {\n  if (!inputShape) {\n    return;\n  }\n\n  var x1 = inputShape.x1;\n  var x2 = inputShape.x2;\n  var y1 = inputShape.y1;\n  var y2 = inputShape.y2;\n  outputShape.x1 = x1;\n  outputShape.x2 = x2;\n  outputShape.y1 = y1;\n  outputShape.y2 = y2;\n  var lineWidth = style && style.lineWidth;\n\n  if (!lineWidth) {\n    return;\n  }\n\n  if (round(x1 * 2) === round(x2 * 2)) {\n    outputShape.x1 = outputShape.x2 = subPixelOptimize(x1, lineWidth, true);\n  }\n\n  if (round(y1 * 2) === round(y2 * 2)) {\n    outputShape.y1 = outputShape.y2 = subPixelOptimize(y1, lineWidth, true);\n  }\n}\n/**\n * Sub pixel optimize rect for canvas\n *\n * @param {Object} outputShape The modification will be performed on `outputShape`.\n *                 `outputShape` and `inputShape` can be the same object.\n *                 `outputShape` object can be used repeatly, because all of\n *                 the `x`, `y`, `width`, `height` will be assigned in this method.\n * @param {Object} [inputShape]\n * @param {number} [inputShape.x]\n * @param {number} [inputShape.y]\n * @param {number} [inputShape.width]\n * @param {number} [inputShape.height]\n * @param {Object} [style]\n * @param {number} [style.lineWidth] If `null`/`undefined`/`0`, do not optimize.\n */\n\n\nfunction subPixelOptimizeRect(outputShape, inputShape, style) {\n  if (!inputShape) {\n    return;\n  }\n\n  var originX = inputShape.x;\n  var originY = inputShape.y;\n  var originWidth = inputShape.width;\n  var originHeight = inputShape.height;\n  outputShape.x = originX;\n  outputShape.y = originY;\n  outputShape.width = originWidth;\n  outputShape.height = originHeight;\n  var lineWidth = style && style.lineWidth;\n\n  if (!lineWidth) {\n    return;\n  }\n\n  outputShape.x = subPixelOptimize(originX, lineWidth, true);\n  outputShape.y = subPixelOptimize(originY, lineWidth, true);\n  outputShape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - outputShape.x, originWidth === 0 ? 0 : 1);\n  outputShape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - outputShape.y, originHeight === 0 ? 0 : 1);\n}\n/**\n * Sub pixel optimize for canvas\n *\n * @param {number} position Coordinate, such as x, y\n * @param {number} lineWidth If `null`/`undefined`/`0`, do not optimize.\n * @param {boolean=} positiveOrNegative Default false (negative).\n * @return {number} Optimized position.\n */\n\n\nfunction subPixelOptimize(position, lineWidth, positiveOrNegative) {\n  if (!lineWidth) {\n    return position;\n  } // Assure that (position + lineWidth / 2) is near integer edge,\n  // otherwise line will be fuzzy in canvas.\n\n\n  var doubledPosition = round(position * 2);\n  return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n}\n\nexports.subPixelOptimizeLine = subPixelOptimizeLine;\nexports.subPixelOptimizeRect = subPixelOptimizeRect;\nexports.subPixelOptimize = subPixelOptimize;"],"mappings":"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"},"metadata":{},"sourceType":"script"}