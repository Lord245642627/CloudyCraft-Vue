{"ast":null,"code":"import * as _ from 'lodash-es';\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01'; // Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false; // Label for the graph itself\n\n    this._label = undefined; // Defaults to be set when creating a new node\n\n    this._defaultNodeLabelFn = _.constant(undefined); // Defaults to be set when creating a new edge\n\n    this._defaultEdgeLabelFn = _.constant(undefined); // v -> label\n\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {}; // v -> children\n\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    } // v -> edgeObj\n\n\n    this._in = {}; // u -> v -> Number\n\n    this._preds = {}; // v -> edgeObj\n\n    this._out = {}; // v -> w -> Number\n\n    this._sucs = {}; // e -> edgeObj\n\n    this._edgeObjs = {}; // e -> label\n\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n\n\n  isDirected() {\n    return this._isDirected;\n  }\n\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n\n  isCompound() {\n    return this._isCompound;\n  }\n\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n\n\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n\n  nodeCount() {\n    return this._nodeCount;\n  }\n\n  nodes() {\n    return _.keys(this._nodes);\n  }\n\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n\n    return this;\n  }\n\n  setNode(v, value) {\n    if (_.has(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n\n      return this;\n    } // @ts-expect-error\n\n\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n\n  node(v) {\n    return this._nodes[v];\n  }\n\n  hasNode(v) {\n    return _.has(this._nodes, v);\n  }\n\n  removeNode(v) {\n    var self = this;\n\n    if (_.has(this._nodes, v)) {\n      var removeEdge = function (e) {\n        self.removeEdge(self._edgeObjs[e]);\n      };\n\n      delete this._nodes[v];\n\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n\n        delete this._parent[v];\n\n        _.each(this.children(v), function (child) {\n          self.setParent(child);\n        });\n\n        delete this._children[v];\n      }\n\n      _.each(_.keys(this._in[v]), removeEdge);\n\n      delete this._in[v];\n      delete this._preds[v];\n\n      _.each(_.keys(this._out[v]), removeEdge);\n\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n\n    return this;\n  }\n\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n\n    this._removeFromParentsChildList(v);\n\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n\n  predecessors(v) {\n    var predsV = this._preds[v];\n\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n\n  successors(v) {\n    var sucsV = this._sucs[v];\n\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n\n  neighbors(v) {\n    var preds = this.predecessors(v);\n\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n\n  isLeaf(v) {\n    var neighbors;\n\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n\n    return neighbors.length === 0;\n  }\n\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound\n    });\n    copy.setGraph(this.graph());\n    var self = this;\n\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n\n    function findParent(v) {\n      var parent = self.parent(v);\n\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n\n\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n\n  edgeCount() {\n    return this._edgeCount;\n  }\n\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n\n      return w;\n    });\n\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n\n\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n\n    if (_.has(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    } // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n\n\n    this.setNode(v);\n    this.setNode(w); // @ts-expect-error\n\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name); // Ensure we add undirected edges in a consistent way.\n\n    v = edgeObj.v;\n    w = edgeObj.w;\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n\n  edge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n\n  hasEdge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n    return _.has(this._edgeLabels, e);\n  }\n\n  removeEdge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n\n    return this;\n  }\n\n  inEdges(v, u) {\n    var inV = this._in[v];\n\n    if (inV) {\n      var edges = _.values(inV);\n\n      if (!u) {\n        return edges;\n      }\n\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n\n  outEdges(v, w) {\n    var outV = this._out[v];\n\n    if (outV) {\n      var edges = _.values(outV);\n\n      if (!w) {\n        return edges;\n      }\n\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n\n}\n/* Number of nodes in the graph. Should only be changed by the implementation. */\n\nGraph.prototype._nodeCount = 0;\n/* Number of edges in the graph. Should only be changed by the implementation. */\n\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (! --map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var edgeObj = {\n    v: v,\n    w: w\n  };\n\n  if (name) {\n    edgeObj.name = name;\n  }\n\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}","map":{"version":3,"names":["_","DEFAULT_EDGE_NAME","GRAPH_NODE","EDGE_KEY_DELIM","Graph","constructor","opts","_isDirected","has","directed","_isMultigraph","multigraph","_isCompound","compound","_label","undefined","_defaultNodeLabelFn","constant","_defaultEdgeLabelFn","_nodes","_parent","_children","_in","_preds","_out","_sucs","_edgeObjs","_edgeLabels","isDirected","isMultigraph","isCompound","setGraph","label","graph","setDefaultNodeLabel","newDefault","isFunction","nodeCount","_nodeCount","nodes","keys","sources","self","filter","v","isEmpty","sinks","setNodes","vs","value","args","arguments","each","length","setNode","node","hasNode","removeNode","removeEdge","e","_removeFromParentsChildList","children","child","setParent","parent","Error","isUndefined","ancestor","predecessors","predsV","successors","sucsV","neighbors","preds","union","isLeaf","filterNodes","copy","w","setEdge","edge","parents","findParent","setDefaultEdgeLabel","edgeCount","_edgeCount","edges","values","setPath","reduce","name","valueSpecified","arg0","edgeArgsToId","edgeObj","edgeArgsToObj","Object","freeze","incrementOrInitEntry","edgeObjToId","hasEdge","decrementOrRemoveEntry","inEdges","u","inV","outEdges","outV","nodeEdges","concat","prototype","map","k","v_","w_","tmp"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/dagre-d3-es/src/graphlib/graph.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (_.has(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return _.has(this._nodes, v);\n  }\n  removeNode(v) {\n    var self = this;\n    if (_.has(this._nodes, v)) {\n      var removeEdge = function (e) {\n        self.removeEdge(self._edgeObjs[e]);\n      };\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), function (child) {\n          self.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound,\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (_.has(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return _.has(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}