{"ast":null,"code":"import * as _ from 'lodash-es';\nexport { longestPath, slack };\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\n\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n\n    visited[v] = true;\n\n    var rank = _.min(_.map(g.outEdges(v), function (e) {\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n    rank === undefined || // return value of _.map([]) for Lodash 4\n    rank === null) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return label.rank = rank;\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\n\n\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}","map":{"version":3,"names":["_","longestPath","slack","g","visited","dfs","v","label","node","has","rank","min","map","outEdges","e","w","edge","minlen","Number","POSITIVE_INFINITY","undefined","forEach","sources"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-admin/node_modules/dagre-d3-es/src/dagre/rank/util.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,WAAnB;AAEA,SAASC,WAAT,EAAsBC,KAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,WAAT,CAAqBE,CAArB,EAAwB;EACtB,IAAIC,OAAO,GAAG,EAAd;;EAEA,SAASC,GAAT,CAAaC,CAAb,EAAgB;IACd,IAAIC,KAAK,GAAGJ,CAAC,CAACK,IAAF,CAAOF,CAAP,CAAZ;;IACA,IAAIN,CAAC,CAACS,GAAF,CAAML,OAAN,EAAeE,CAAf,CAAJ,EAAuB;MACrB,OAAOC,KAAK,CAACG,IAAb;IACD;;IACDN,OAAO,CAACE,CAAD,CAAP,GAAa,IAAb;;IAEA,IAAII,IAAI,GAAGV,CAAC,CAACW,GAAF,CACTX,CAAC,CAACY,GAAF,CAAMT,CAAC,CAACU,QAAF,CAAWP,CAAX,CAAN,EAAqB,UAAUQ,CAAV,EAAa;MAChC,OAAOT,GAAG,CAACS,CAAC,CAACC,CAAH,CAAH,GAAWZ,CAAC,CAACa,IAAF,CAAOF,CAAP,EAAUG,MAA5B;IACD,CAFD,CADS,CAAX;;IAMA,IACEP,IAAI,KAAKQ,MAAM,CAACC,iBAAhB,IAAqC;IACrCT,IAAI,KAAKU,SADT,IACsB;IACtBV,IAAI,KAAK,IAHX,EAIE;MACA;MACAA,IAAI,GAAG,CAAP;IACD;;IAED,OAAQH,KAAK,CAACG,IAAN,GAAaA,IAArB;EACD;;EAEDV,CAAC,CAACqB,OAAF,CAAUlB,CAAC,CAACmB,OAAF,EAAV,EAAuBjB,GAAvB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASH,KAAT,CAAeC,CAAf,EAAkBW,CAAlB,EAAqB;EACnB,OAAOX,CAAC,CAACK,IAAF,CAAOM,CAAC,CAACC,CAAT,EAAYL,IAAZ,GAAmBP,CAAC,CAACK,IAAF,CAAOM,CAAC,CAACR,CAAT,EAAYI,IAA/B,GAAsCP,CAAC,CAACa,IAAF,CAAOF,CAAP,EAAUG,MAAvD;AACD"},"metadata":{},"sourceType":"module"}