{"ast":null,"code":"/* IMPORT */\nimport _ from '../utils/index.js';\nimport ChannelsReusable from '../channels/reusable.js';\n/* MAIN */\n\nconst RGB = {\n  /* VARIABLES */\n  re: /^rgba?\\(\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))(?:\\s*?(?:,|\\/)\\s*?\\+?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?)))?\\s*?\\)$/i,\n\n  /* API */\n  parse: color => {\n    const charCode = color.charCodeAt(0);\n    if (charCode !== 114 && charCode !== 82) return; // 'r'/'R'\n\n    const match = color.match(RGB.re);\n    if (!match) return;\n    const [, r, isRedPercentage, g, isGreenPercentage, b, isBluePercentage, a, isAlphaPercentage] = match;\n    return ChannelsReusable.set({\n      r: _.channel.clamp.r(isRedPercentage ? parseFloat(r) * 2.55 : parseFloat(r)),\n      g: _.channel.clamp.g(isGreenPercentage ? parseFloat(g) * 2.55 : parseFloat(g)),\n      b: _.channel.clamp.b(isBluePercentage ? parseFloat(b) * 2.55 : parseFloat(b)),\n      a: a ? _.channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1\n    }, color);\n  },\n  stringify: channels => {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = channels;\n\n    if (a < 1) {\n      // RGBA\n      return `rgba(${_.lang.round(r)}, ${_.lang.round(g)}, ${_.lang.round(b)}, ${_.lang.round(a)})`;\n    } else {\n      // RGB\n      return `rgb(${_.lang.round(r)}, ${_.lang.round(g)}, ${_.lang.round(b)})`;\n    }\n  }\n};\n/* EXPORT */\n\nexport default RGB;","map":{"version":3,"names":["_","ChannelsReusable","RGB","re","parse","color","charCode","charCodeAt","match","r","isRedPercentage","g","isGreenPercentage","b","isBluePercentage","a","isAlphaPercentage","set","channel","clamp","parseFloat","stringify","channels","lang","round"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-admin/node_modules/khroma/dist/color/rgb.js"],"sourcesContent":["/* IMPORT */\nimport _ from '../utils/index.js';\nimport ChannelsReusable from '../channels/reusable.js';\n/* MAIN */\nconst RGB = {\n    /* VARIABLES */\n    re: /^rgba?\\(\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))(?:\\s*?(?:,|\\/)\\s*?\\+?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?)))?\\s*?\\)$/i,\n    /* API */\n    parse: (color) => {\n        const charCode = color.charCodeAt(0);\n        if (charCode !== 114 && charCode !== 82)\n            return; // 'r'/'R'\n        const match = color.match(RGB.re);\n        if (!match)\n            return;\n        const [, r, isRedPercentage, g, isGreenPercentage, b, isBluePercentage, a, isAlphaPercentage] = match;\n        return ChannelsReusable.set({\n            r: _.channel.clamp.r(isRedPercentage ? parseFloat(r) * 2.55 : parseFloat(r)),\n            g: _.channel.clamp.g(isGreenPercentage ? parseFloat(g) * 2.55 : parseFloat(g)),\n            b: _.channel.clamp.b(isBluePercentage ? parseFloat(b) * 2.55 : parseFloat(b)),\n            a: a ? _.channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1\n        }, color);\n    },\n    stringify: (channels) => {\n        const { r, g, b, a } = channels;\n        if (a < 1) { // RGBA\n            return `rgba(${_.lang.round(r)}, ${_.lang.round(g)}, ${_.lang.round(b)}, ${_.lang.round(a)})`;\n        }\n        else { // RGB\n            return `rgb(${_.lang.round(r)}, ${_.lang.round(g)}, ${_.lang.round(b)})`;\n        }\n    }\n};\n/* EXPORT */\nexport default RGB;\n"],"mappings":"AAAA;AACA,OAAOA,CAAP,MAAc,mBAAd;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA;;AACA,MAAMC,GAAG,GAAG;EACR;EACAC,EAAE,EAAE,8PAFI;;EAGR;EACAC,KAAK,EAAGC,KAAD,IAAW;IACd,MAAMC,QAAQ,GAAGD,KAAK,CAACE,UAAN,CAAiB,CAAjB,CAAjB;IACA,IAAID,QAAQ,KAAK,GAAb,IAAoBA,QAAQ,KAAK,EAArC,EACI,OAHU,CAGF;;IACZ,MAAME,KAAK,GAAGH,KAAK,CAACG,KAAN,CAAYN,GAAG,CAACC,EAAhB,CAAd;IACA,IAAI,CAACK,KAAL,EACI;IACJ,MAAM,GAAGC,CAAH,EAAMC,eAAN,EAAuBC,CAAvB,EAA0BC,iBAA1B,EAA6CC,CAA7C,EAAgDC,gBAAhD,EAAkEC,CAAlE,EAAqEC,iBAArE,IAA0FR,KAAhG;IACA,OAAOP,gBAAgB,CAACgB,GAAjB,CAAqB;MACxBR,CAAC,EAAET,CAAC,CAACkB,OAAF,CAAUC,KAAV,CAAgBV,CAAhB,CAAkBC,eAAe,GAAGU,UAAU,CAACX,CAAD,CAAV,GAAgB,IAAnB,GAA0BW,UAAU,CAACX,CAAD,CAArE,CADqB;MAExBE,CAAC,EAAEX,CAAC,CAACkB,OAAF,CAAUC,KAAV,CAAgBR,CAAhB,CAAkBC,iBAAiB,GAAGQ,UAAU,CAACT,CAAD,CAAV,GAAgB,IAAnB,GAA0BS,UAAU,CAACT,CAAD,CAAvE,CAFqB;MAGxBE,CAAC,EAAEb,CAAC,CAACkB,OAAF,CAAUC,KAAV,CAAgBN,CAAhB,CAAkBC,gBAAgB,GAAGM,UAAU,CAACP,CAAD,CAAV,GAAgB,IAAnB,GAA0BO,UAAU,CAACP,CAAD,CAAtE,CAHqB;MAIxBE,CAAC,EAAEA,CAAC,GAAGf,CAAC,CAACkB,OAAF,CAAUC,KAAV,CAAgBJ,CAAhB,CAAkBC,iBAAiB,GAAGI,UAAU,CAACL,CAAD,CAAV,GAAgB,GAAnB,GAAyBK,UAAU,CAACL,CAAD,CAAtE,CAAH,GAAgF;IAJ5D,CAArB,EAKJV,KALI,CAAP;EAMH,CAlBO;EAmBRgB,SAAS,EAAGC,QAAD,IAAc;IACrB,MAAM;MAAEb,CAAF;MAAKE,CAAL;MAAQE,CAAR;MAAWE;IAAX,IAAiBO,QAAvB;;IACA,IAAIP,CAAC,GAAG,CAAR,EAAW;MAAE;MACT,OAAQ,QAAOf,CAAC,CAACuB,IAAF,CAAOC,KAAP,CAAaf,CAAb,CAAgB,KAAIT,CAAC,CAACuB,IAAF,CAAOC,KAAP,CAAab,CAAb,CAAgB,KAAIX,CAAC,CAACuB,IAAF,CAAOC,KAAP,CAAaX,CAAb,CAAgB,KAAIb,CAAC,CAACuB,IAAF,CAAOC,KAAP,CAAaT,CAAb,CAAgB,GAA3F;IACH,CAFD,MAGK;MAAE;MACH,OAAQ,OAAMf,CAAC,CAACuB,IAAF,CAAOC,KAAP,CAAaf,CAAb,CAAgB,KAAIT,CAAC,CAACuB,IAAF,CAAOC,KAAP,CAAab,CAAb,CAAgB,KAAIX,CAAC,CAACuB,IAAF,CAAOC,KAAP,CAAaX,CAAb,CAAgB,GAAtE;IACH;EACJ;AA3BO,CAAZ;AA6BA;;AACA,eAAeX,GAAf"},"metadata":{},"sourceType":"module"}