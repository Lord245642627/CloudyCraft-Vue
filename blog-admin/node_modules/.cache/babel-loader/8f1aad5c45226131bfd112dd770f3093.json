{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar modelUtil = require(\"../../util/model\");\n\nvar brushHelper = require(\"./brushHelper\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar each = zrUtil.each;\nvar indexOf = zrUtil.indexOf;\nvar curry = zrUtil.curry;\nvar COORD_CONVERTS = ['dataToPoint', 'pointToData']; // FIXME\n// how to genarialize to more coordinate systems.\n\nvar INCLUDE_FINDER_MAIN_TYPES = ['grid', 'xAxis', 'yAxis', 'geo', 'graph', 'polar', 'radiusAxis', 'angleAxis', 'bmap'];\n/**\n * [option in constructor]:\n * {\n *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n * }\n *\n *\n * [targetInfo]:\n *\n * There can be multiple axes in a single targetInfo. Consider the case\n * of `grid` component, a targetInfo represents a grid which contains one or more\n * cartesian and one or more axes. And consider the case of parallel system,\n * which has multiple axes in a coordinate system.\n * Can be {\n *     panelId: ...,\n *     coordSys: <a representitive cartesian in grid (first cartesian by default)>,\n *     coordSyses: all cartesians.\n *     gridModel: <grid component>\n *     xAxes: correspond to coordSyses on index\n *     yAxes: correspond to coordSyses on index\n * }\n * or {\n *     panelId: ...,\n *     coordSys: <geo coord sys>\n *     coordSyses: [<geo coord sys>]\n *     geoModel: <geo component>\n * }\n *\n *\n * [panelOpt]:\n *\n * Make from targetInfo. Input to BrushController.\n * {\n *     panelId: ...,\n *     rect: ...\n * }\n *\n *\n * [area]:\n *\n * Generated by BrushController or user input.\n * {\n *     panelId: Used to locate coordInfo directly. If user inpput, no panelId.\n *     brushType: determine how to convert to/from coord('rect' or 'polygon' or 'lineX/Y').\n *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n *     range: pixel range.\n *     coordRange: representitive coord range (the first one of coordRanges).\n *     coordRanges: <Array> coord ranges, used in multiple cartesian in one grid.\n * }\n */\n\n/**\n * @param {Object} option contains Index/Id/Name of xAxis/yAxis/geo/grid\n *        Each can be {number|Array.<number>}. like: {xAxisIndex: [3, 4]}\n * @param {module:echarts/model/Global} ecModel\n * @param {Object} [opt]\n * @param {Array.<string>} [opt.include] include coordinate system types.\n */\n\nfunction BrushTargetManager(option, ecModel, opt) {\n  /**\n   * @private\n   * @type {Array.<Object>}\n   */\n  var targetInfoList = this._targetInfoList = [];\n  var info = {};\n  var foundCpts = parseFinder(ecModel, option);\n  each(targetInfoBuilders, function (builder, type) {\n    if (!opt || !opt.include || indexOf(opt.include, type) >= 0) {\n      builder(foundCpts, targetInfoList, info);\n    }\n  });\n}\n\nvar proto = BrushTargetManager.prototype;\n\nproto.setOutputRanges = function (areas, ecModel) {\n  this.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n    (area.coordRanges || (area.coordRanges = [])).push(coordRange); // area.coordRange is the first of area.coordRanges\n\n    if (!area.coordRange) {\n      area.coordRange = coordRange; // In 'category' axis, coord to pixel is not reversible, so we can not\n      // rebuild range by coordRange accrately, which may bring trouble when\n      // brushing only one item. So we use __rangeOffset to rebuilding range\n      // by coordRange. And this it only used in brush component so it is no\n      // need to be adapted to coordRanges.\n\n      var result = coordConvert[area.brushType](0, coordSys, coordRange);\n      area.__rangeOffset = {\n        offset: diffProcessor[area.brushType](result.values, area.range, [1, 1]),\n        xyMinMax: result.xyMinMax\n      };\n    }\n  });\n};\n\nproto.matchOutputRanges = function (areas, ecModel, cb) {\n  each(areas, function (area) {\n    var targetInfo = this.findTargetInfo(area, ecModel);\n\n    if (targetInfo && targetInfo !== true) {\n      zrUtil.each(targetInfo.coordSyses, function (coordSys) {\n        var result = coordConvert[area.brushType](1, coordSys, area.range);\n        cb(area, result.values, coordSys, ecModel);\n      });\n    }\n  }, this);\n};\n\nproto.setInputRanges = function (areas, ecModel) {\n  each(areas, function (area) {\n    var targetInfo = this.findTargetInfo(area, ecModel);\n    area.range = area.range || []; // convert coordRange to global range and set panelId.\n\n    if (targetInfo && targetInfo !== true) {\n      area.panelId = targetInfo.panelId; // (1) area.range shoule always be calculate from coordRange but does\n      // not keep its original value, for the sake of the dataZoom scenario,\n      // where area.coordRange remains unchanged but area.range may be changed.\n      // (2) Only support converting one coordRange to pixel range in brush\n      // component. So do not consider `coordRanges`.\n      // (3) About __rangeOffset, see comment above.\n\n      var result = coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);\n      var rangeOffset = area.__rangeOffset;\n      area.range = rangeOffset ? diffProcessor[area.brushType](result.values, rangeOffset.offset, getScales(result.xyMinMax, rangeOffset.xyMinMax)) : result.values;\n    }\n  }, this);\n};\n\nproto.makePanelOpts = function (api, getDefaultBrushType) {\n  return zrUtil.map(this._targetInfoList, function (targetInfo) {\n    var rect = targetInfo.getPanelRect();\n    return {\n      panelId: targetInfo.panelId,\n      defaultBrushType: getDefaultBrushType && getDefaultBrushType(targetInfo),\n      clipPath: brushHelper.makeRectPanelClipPath(rect),\n      isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, targetInfo.coordSysModel),\n      getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect)\n    };\n  });\n};\n\nproto.controlSeries = function (area, seriesModel, ecModel) {\n  // Check whether area is bound in coord, and series do not belong to that coord.\n  // If do not do this check, some brush (like lineX) will controll all axes.\n  var targetInfo = this.findTargetInfo(area, ecModel);\n  return targetInfo === true || targetInfo && indexOf(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0;\n};\n/**\n * If return Object, a coord found.\n * If reutrn true, global found.\n * Otherwise nothing found.\n *\n * @param {Object} area\n * @param {Array} targetInfoList\n * @return {Object|boolean}\n */\n\n\nproto.findTargetInfo = function (area, ecModel) {\n  var targetInfoList = this._targetInfoList;\n  var foundCpts = parseFinder(ecModel, area);\n\n  for (var i = 0; i < targetInfoList.length; i++) {\n    var targetInfo = targetInfoList[i];\n    var areaPanelId = area.panelId;\n\n    if (areaPanelId) {\n      if (targetInfo.panelId === areaPanelId) {\n        return targetInfo;\n      }\n    } else {\n      for (var i = 0; i < targetInfoMatchers.length; i++) {\n        if (targetInfoMatchers[i](foundCpts, targetInfo)) {\n          return targetInfo;\n        }\n      }\n    }\n  }\n\n  return true;\n};\n\nfunction formatMinMax(minMax) {\n  minMax[0] > minMax[1] && minMax.reverse();\n  return minMax;\n}\n\nfunction parseFinder(ecModel, option) {\n  return modelUtil.parseFinder(ecModel, option, {\n    includeMainTypes: INCLUDE_FINDER_MAIN_TYPES\n  });\n}\n\nvar targetInfoBuilders = {\n  grid: function (foundCpts, targetInfoList) {\n    var xAxisModels = foundCpts.xAxisModels;\n    var yAxisModels = foundCpts.yAxisModels;\n    var gridModels = foundCpts.gridModels; // Remove duplicated.\n\n    var gridModelMap = zrUtil.createHashMap();\n    var xAxesHas = {};\n    var yAxesHas = {};\n\n    if (!xAxisModels && !yAxisModels && !gridModels) {\n      return;\n    }\n\n    each(xAxisModels, function (axisModel) {\n      var gridModel = axisModel.axis.grid.model;\n      gridModelMap.set(gridModel.id, gridModel);\n      xAxesHas[gridModel.id] = true;\n    });\n    each(yAxisModels, function (axisModel) {\n      var gridModel = axisModel.axis.grid.model;\n      gridModelMap.set(gridModel.id, gridModel);\n      yAxesHas[gridModel.id] = true;\n    });\n    each(gridModels, function (gridModel) {\n      gridModelMap.set(gridModel.id, gridModel);\n      xAxesHas[gridModel.id] = true;\n      yAxesHas[gridModel.id] = true;\n    });\n    gridModelMap.each(function (gridModel) {\n      var grid = gridModel.coordinateSystem;\n      var cartesians = [];\n      each(grid.getCartesians(), function (cartesian, index) {\n        if (indexOf(xAxisModels, cartesian.getAxis('x').model) >= 0 || indexOf(yAxisModels, cartesian.getAxis('y').model) >= 0) {\n          cartesians.push(cartesian);\n        }\n      });\n      targetInfoList.push({\n        panelId: 'grid--' + gridModel.id,\n        gridModel: gridModel,\n        coordSysModel: gridModel,\n        // Use the first one as the representitive coordSys.\n        coordSys: cartesians[0],\n        coordSyses: cartesians,\n        getPanelRect: panelRectBuilder.grid,\n        xAxisDeclared: xAxesHas[gridModel.id],\n        yAxisDeclared: yAxesHas[gridModel.id]\n      });\n    });\n  },\n  geo: function (foundCpts, targetInfoList) {\n    each(foundCpts.geoModels, function (geoModel) {\n      var coordSys = geoModel.coordinateSystem;\n      targetInfoList.push({\n        panelId: 'geo--' + geoModel.id,\n        geoModel: geoModel,\n        coordSysModel: geoModel,\n        coordSys: coordSys,\n        coordSyses: [coordSys],\n        getPanelRect: panelRectBuilder.geo\n      });\n    });\n  }\n};\nvar targetInfoMatchers = [// grid\nfunction (foundCpts, targetInfo) {\n  var xAxisModel = foundCpts.xAxisModel;\n  var yAxisModel = foundCpts.yAxisModel;\n  var gridModel = foundCpts.gridModel;\n  !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);\n  !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);\n  return gridModel && gridModel === targetInfo.gridModel;\n}, // geo\nfunction (foundCpts, targetInfo) {\n  var geoModel = foundCpts.geoModel;\n  return geoModel && geoModel === targetInfo.geoModel;\n}];\nvar panelRectBuilder = {\n  grid: function () {\n    // grid is not Transformable.\n    return this.coordSys.grid.getRect().clone();\n  },\n  geo: function () {\n    var coordSys = this.coordSys;\n    var rect = coordSys.getBoundingRect().clone(); // geo roam and zoom transform\n\n    rect.applyTransform(graphic.getTransform(coordSys));\n    return rect;\n  }\n};\nvar coordConvert = {\n  lineX: curry(axisConvert, 0),\n  lineY: curry(axisConvert, 1),\n  rect: function (to, coordSys, rangeOrCoordRange) {\n    var xminymin = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][0], rangeOrCoordRange[1][0]]);\n    var xmaxymax = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][1], rangeOrCoordRange[1][1]]);\n    var values = [formatMinMax([xminymin[0], xmaxymax[0]]), formatMinMax([xminymin[1], xmaxymax[1]])];\n    return {\n      values: values,\n      xyMinMax: values\n    };\n  },\n  polygon: function (to, coordSys, rangeOrCoordRange) {\n    var xyMinMax = [[Infinity, -Infinity], [Infinity, -Infinity]];\n    var values = zrUtil.map(rangeOrCoordRange, function (item) {\n      var p = coordSys[COORD_CONVERTS[to]](item);\n      xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);\n      xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);\n      xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);\n      xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);\n      return p;\n    });\n    return {\n      values: values,\n      xyMinMax: xyMinMax\n    };\n  }\n};\n\nfunction axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {\n  var axis = coordSys.getAxis(['x', 'y'][axisNameIndex]);\n  var values = formatMinMax(zrUtil.map([0, 1], function (i) {\n    return to ? axis.coordToData(axis.toLocalCoord(rangeOrCoordRange[i])) : axis.toGlobalCoord(axis.dataToCoord(rangeOrCoordRange[i]));\n  }));\n  var xyMinMax = [];\n  xyMinMax[axisNameIndex] = values;\n  xyMinMax[1 - axisNameIndex] = [NaN, NaN];\n  return {\n    values: values,\n    xyMinMax: xyMinMax\n  };\n}\n\nvar diffProcessor = {\n  lineX: curry(axisDiffProcessor, 0),\n  lineY: curry(axisDiffProcessor, 1),\n  rect: function (values, refer, scales) {\n    return [[values[0][0] - scales[0] * refer[0][0], values[0][1] - scales[0] * refer[0][1]], [values[1][0] - scales[1] * refer[1][0], values[1][1] - scales[1] * refer[1][1]]];\n  },\n  polygon: function (values, refer, scales) {\n    return zrUtil.map(values, function (item, idx) {\n      return [item[0] - scales[0] * refer[idx][0], item[1] - scales[1] * refer[idx][1]];\n    });\n  }\n};\n\nfunction axisDiffProcessor(axisNameIndex, values, refer, scales) {\n  return [values[0] - scales[axisNameIndex] * refer[0], values[1] - scales[axisNameIndex] * refer[1]];\n} // We have to process scale caused by dataZoom manually,\n// although it might be not accurate.\n\n\nfunction getScales(xyMinMaxCurr, xyMinMaxOrigin) {\n  var sizeCurr = getSize(xyMinMaxCurr);\n  var sizeOrigin = getSize(xyMinMaxOrigin);\n  var scales = [sizeCurr[0] / sizeOrigin[0], sizeCurr[1] / sizeOrigin[1]];\n  isNaN(scales[0]) && (scales[0] = 1);\n  isNaN(scales[1]) && (scales[1] = 1);\n  return scales;\n}\n\nfunction getSize(xyMinMax) {\n  return xyMinMax ? [xyMinMax[0][1] - xyMinMax[0][0], xyMinMax[1][1] - xyMinMax[1][0]] : [NaN, NaN];\n}\n\nvar _default = BrushTargetManager;\nmodule.exports = _default;","map":{"version":3,"names":["_config","require","__DEV__","zrUtil","graphic","modelUtil","brushHelper","each","indexOf","curry","COORD_CONVERTS","INCLUDE_FINDER_MAIN_TYPES","BrushTargetManager","option","ecModel","opt","targetInfoList","_targetInfoList","info","foundCpts","parseFinder","targetInfoBuilders","builder","type","include","proto","prototype","setOutputRanges","areas","matchOutputRanges","area","coordRange","coordSys","coordRanges","push","result","coordConvert","brushType","__rangeOffset","offset","diffProcessor","values","range","xyMinMax","cb","targetInfo","findTargetInfo","coordSyses","setInputRanges","panelId","rangeOffset","getScales","makePanelOpts","api","getDefaultBrushType","map","rect","getPanelRect","defaultBrushType","clipPath","makeRectPanelClipPath","isTargetByCursor","makeRectIsTargetByCursor","coordSysModel","getLinearBrushOtherExtent","makeLinearBrushOtherExtent","controlSeries","seriesModel","coordinateSystem","i","length","areaPanelId","targetInfoMatchers","formatMinMax","minMax","reverse","includeMainTypes","grid","xAxisModels","yAxisModels","gridModels","gridModelMap","createHashMap","xAxesHas","yAxesHas","axisModel","gridModel","axis","model","set","id","cartesians","getCartesians","cartesian","index","getAxis","panelRectBuilder","xAxisDeclared","yAxisDeclared","geo","geoModels","geoModel","xAxisModel","yAxisModel","getRect","clone","getBoundingRect","applyTransform","getTransform","lineX","axisConvert","lineY","to","rangeOrCoordRange","xminymin","xmaxymax","polygon","Infinity","item","p","Math","min","max","axisNameIndex","coordToData","toLocalCoord","toGlobalCoord","dataToCoord","NaN","axisDiffProcessor","refer","scales","idx","xyMinMaxCurr","xyMinMaxOrigin","sizeCurr","getSize","sizeOrigin","isNaN","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/component/helper/BrushTargetManager.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar modelUtil = require(\"../../util/model\");\n\nvar brushHelper = require(\"./brushHelper\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar each = zrUtil.each;\nvar indexOf = zrUtil.indexOf;\nvar curry = zrUtil.curry;\nvar COORD_CONVERTS = ['dataToPoint', 'pointToData']; // FIXME\n// how to genarialize to more coordinate systems.\n\nvar INCLUDE_FINDER_MAIN_TYPES = ['grid', 'xAxis', 'yAxis', 'geo', 'graph', 'polar', 'radiusAxis', 'angleAxis', 'bmap'];\n/**\n * [option in constructor]:\n * {\n *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n * }\n *\n *\n * [targetInfo]:\n *\n * There can be multiple axes in a single targetInfo. Consider the case\n * of `grid` component, a targetInfo represents a grid which contains one or more\n * cartesian and one or more axes. And consider the case of parallel system,\n * which has multiple axes in a coordinate system.\n * Can be {\n *     panelId: ...,\n *     coordSys: <a representitive cartesian in grid (first cartesian by default)>,\n *     coordSyses: all cartesians.\n *     gridModel: <grid component>\n *     xAxes: correspond to coordSyses on index\n *     yAxes: correspond to coordSyses on index\n * }\n * or {\n *     panelId: ...,\n *     coordSys: <geo coord sys>\n *     coordSyses: [<geo coord sys>]\n *     geoModel: <geo component>\n * }\n *\n *\n * [panelOpt]:\n *\n * Make from targetInfo. Input to BrushController.\n * {\n *     panelId: ...,\n *     rect: ...\n * }\n *\n *\n * [area]:\n *\n * Generated by BrushController or user input.\n * {\n *     panelId: Used to locate coordInfo directly. If user inpput, no panelId.\n *     brushType: determine how to convert to/from coord('rect' or 'polygon' or 'lineX/Y').\n *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.\n *     range: pixel range.\n *     coordRange: representitive coord range (the first one of coordRanges).\n *     coordRanges: <Array> coord ranges, used in multiple cartesian in one grid.\n * }\n */\n\n/**\n * @param {Object} option contains Index/Id/Name of xAxis/yAxis/geo/grid\n *        Each can be {number|Array.<number>}. like: {xAxisIndex: [3, 4]}\n * @param {module:echarts/model/Global} ecModel\n * @param {Object} [opt]\n * @param {Array.<string>} [opt.include] include coordinate system types.\n */\n\nfunction BrushTargetManager(option, ecModel, opt) {\n  /**\n   * @private\n   * @type {Array.<Object>}\n   */\n  var targetInfoList = this._targetInfoList = [];\n  var info = {};\n  var foundCpts = parseFinder(ecModel, option);\n  each(targetInfoBuilders, function (builder, type) {\n    if (!opt || !opt.include || indexOf(opt.include, type) >= 0) {\n      builder(foundCpts, targetInfoList, info);\n    }\n  });\n}\n\nvar proto = BrushTargetManager.prototype;\n\nproto.setOutputRanges = function (areas, ecModel) {\n  this.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {\n    (area.coordRanges || (area.coordRanges = [])).push(coordRange); // area.coordRange is the first of area.coordRanges\n\n    if (!area.coordRange) {\n      area.coordRange = coordRange; // In 'category' axis, coord to pixel is not reversible, so we can not\n      // rebuild range by coordRange accrately, which may bring trouble when\n      // brushing only one item. So we use __rangeOffset to rebuilding range\n      // by coordRange. And this it only used in brush component so it is no\n      // need to be adapted to coordRanges.\n\n      var result = coordConvert[area.brushType](0, coordSys, coordRange);\n      area.__rangeOffset = {\n        offset: diffProcessor[area.brushType](result.values, area.range, [1, 1]),\n        xyMinMax: result.xyMinMax\n      };\n    }\n  });\n};\n\nproto.matchOutputRanges = function (areas, ecModel, cb) {\n  each(areas, function (area) {\n    var targetInfo = this.findTargetInfo(area, ecModel);\n\n    if (targetInfo && targetInfo !== true) {\n      zrUtil.each(targetInfo.coordSyses, function (coordSys) {\n        var result = coordConvert[area.brushType](1, coordSys, area.range);\n        cb(area, result.values, coordSys, ecModel);\n      });\n    }\n  }, this);\n};\n\nproto.setInputRanges = function (areas, ecModel) {\n  each(areas, function (area) {\n    var targetInfo = this.findTargetInfo(area, ecModel);\n    area.range = area.range || []; // convert coordRange to global range and set panelId.\n\n    if (targetInfo && targetInfo !== true) {\n      area.panelId = targetInfo.panelId; // (1) area.range shoule always be calculate from coordRange but does\n      // not keep its original value, for the sake of the dataZoom scenario,\n      // where area.coordRange remains unchanged but area.range may be changed.\n      // (2) Only support converting one coordRange to pixel range in brush\n      // component. So do not consider `coordRanges`.\n      // (3) About __rangeOffset, see comment above.\n\n      var result = coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);\n      var rangeOffset = area.__rangeOffset;\n      area.range = rangeOffset ? diffProcessor[area.brushType](result.values, rangeOffset.offset, getScales(result.xyMinMax, rangeOffset.xyMinMax)) : result.values;\n    }\n  }, this);\n};\n\nproto.makePanelOpts = function (api, getDefaultBrushType) {\n  return zrUtil.map(this._targetInfoList, function (targetInfo) {\n    var rect = targetInfo.getPanelRect();\n    return {\n      panelId: targetInfo.panelId,\n      defaultBrushType: getDefaultBrushType && getDefaultBrushType(targetInfo),\n      clipPath: brushHelper.makeRectPanelClipPath(rect),\n      isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, targetInfo.coordSysModel),\n      getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect)\n    };\n  });\n};\n\nproto.controlSeries = function (area, seriesModel, ecModel) {\n  // Check whether area is bound in coord, and series do not belong to that coord.\n  // If do not do this check, some brush (like lineX) will controll all axes.\n  var targetInfo = this.findTargetInfo(area, ecModel);\n  return targetInfo === true || targetInfo && indexOf(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0;\n};\n/**\n * If return Object, a coord found.\n * If reutrn true, global found.\n * Otherwise nothing found.\n *\n * @param {Object} area\n * @param {Array} targetInfoList\n * @return {Object|boolean}\n */\n\n\nproto.findTargetInfo = function (area, ecModel) {\n  var targetInfoList = this._targetInfoList;\n  var foundCpts = parseFinder(ecModel, area);\n\n  for (var i = 0; i < targetInfoList.length; i++) {\n    var targetInfo = targetInfoList[i];\n    var areaPanelId = area.panelId;\n\n    if (areaPanelId) {\n      if (targetInfo.panelId === areaPanelId) {\n        return targetInfo;\n      }\n    } else {\n      for (var i = 0; i < targetInfoMatchers.length; i++) {\n        if (targetInfoMatchers[i](foundCpts, targetInfo)) {\n          return targetInfo;\n        }\n      }\n    }\n  }\n\n  return true;\n};\n\nfunction formatMinMax(minMax) {\n  minMax[0] > minMax[1] && minMax.reverse();\n  return minMax;\n}\n\nfunction parseFinder(ecModel, option) {\n  return modelUtil.parseFinder(ecModel, option, {\n    includeMainTypes: INCLUDE_FINDER_MAIN_TYPES\n  });\n}\n\nvar targetInfoBuilders = {\n  grid: function (foundCpts, targetInfoList) {\n    var xAxisModels = foundCpts.xAxisModels;\n    var yAxisModels = foundCpts.yAxisModels;\n    var gridModels = foundCpts.gridModels; // Remove duplicated.\n\n    var gridModelMap = zrUtil.createHashMap();\n    var xAxesHas = {};\n    var yAxesHas = {};\n\n    if (!xAxisModels && !yAxisModels && !gridModels) {\n      return;\n    }\n\n    each(xAxisModels, function (axisModel) {\n      var gridModel = axisModel.axis.grid.model;\n      gridModelMap.set(gridModel.id, gridModel);\n      xAxesHas[gridModel.id] = true;\n    });\n    each(yAxisModels, function (axisModel) {\n      var gridModel = axisModel.axis.grid.model;\n      gridModelMap.set(gridModel.id, gridModel);\n      yAxesHas[gridModel.id] = true;\n    });\n    each(gridModels, function (gridModel) {\n      gridModelMap.set(gridModel.id, gridModel);\n      xAxesHas[gridModel.id] = true;\n      yAxesHas[gridModel.id] = true;\n    });\n    gridModelMap.each(function (gridModel) {\n      var grid = gridModel.coordinateSystem;\n      var cartesians = [];\n      each(grid.getCartesians(), function (cartesian, index) {\n        if (indexOf(xAxisModels, cartesian.getAxis('x').model) >= 0 || indexOf(yAxisModels, cartesian.getAxis('y').model) >= 0) {\n          cartesians.push(cartesian);\n        }\n      });\n      targetInfoList.push({\n        panelId: 'grid--' + gridModel.id,\n        gridModel: gridModel,\n        coordSysModel: gridModel,\n        // Use the first one as the representitive coordSys.\n        coordSys: cartesians[0],\n        coordSyses: cartesians,\n        getPanelRect: panelRectBuilder.grid,\n        xAxisDeclared: xAxesHas[gridModel.id],\n        yAxisDeclared: yAxesHas[gridModel.id]\n      });\n    });\n  },\n  geo: function (foundCpts, targetInfoList) {\n    each(foundCpts.geoModels, function (geoModel) {\n      var coordSys = geoModel.coordinateSystem;\n      targetInfoList.push({\n        panelId: 'geo--' + geoModel.id,\n        geoModel: geoModel,\n        coordSysModel: geoModel,\n        coordSys: coordSys,\n        coordSyses: [coordSys],\n        getPanelRect: panelRectBuilder.geo\n      });\n    });\n  }\n};\nvar targetInfoMatchers = [// grid\nfunction (foundCpts, targetInfo) {\n  var xAxisModel = foundCpts.xAxisModel;\n  var yAxisModel = foundCpts.yAxisModel;\n  var gridModel = foundCpts.gridModel;\n  !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);\n  !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);\n  return gridModel && gridModel === targetInfo.gridModel;\n}, // geo\nfunction (foundCpts, targetInfo) {\n  var geoModel = foundCpts.geoModel;\n  return geoModel && geoModel === targetInfo.geoModel;\n}];\nvar panelRectBuilder = {\n  grid: function () {\n    // grid is not Transformable.\n    return this.coordSys.grid.getRect().clone();\n  },\n  geo: function () {\n    var coordSys = this.coordSys;\n    var rect = coordSys.getBoundingRect().clone(); // geo roam and zoom transform\n\n    rect.applyTransform(graphic.getTransform(coordSys));\n    return rect;\n  }\n};\nvar coordConvert = {\n  lineX: curry(axisConvert, 0),\n  lineY: curry(axisConvert, 1),\n  rect: function (to, coordSys, rangeOrCoordRange) {\n    var xminymin = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][0], rangeOrCoordRange[1][0]]);\n    var xmaxymax = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][1], rangeOrCoordRange[1][1]]);\n    var values = [formatMinMax([xminymin[0], xmaxymax[0]]), formatMinMax([xminymin[1], xmaxymax[1]])];\n    return {\n      values: values,\n      xyMinMax: values\n    };\n  },\n  polygon: function (to, coordSys, rangeOrCoordRange) {\n    var xyMinMax = [[Infinity, -Infinity], [Infinity, -Infinity]];\n    var values = zrUtil.map(rangeOrCoordRange, function (item) {\n      var p = coordSys[COORD_CONVERTS[to]](item);\n      xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);\n      xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);\n      xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);\n      xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);\n      return p;\n    });\n    return {\n      values: values,\n      xyMinMax: xyMinMax\n    };\n  }\n};\n\nfunction axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {\n  var axis = coordSys.getAxis(['x', 'y'][axisNameIndex]);\n  var values = formatMinMax(zrUtil.map([0, 1], function (i) {\n    return to ? axis.coordToData(axis.toLocalCoord(rangeOrCoordRange[i])) : axis.toGlobalCoord(axis.dataToCoord(rangeOrCoordRange[i]));\n  }));\n  var xyMinMax = [];\n  xyMinMax[axisNameIndex] = values;\n  xyMinMax[1 - axisNameIndex] = [NaN, NaN];\n  return {\n    values: values,\n    xyMinMax: xyMinMax\n  };\n}\n\nvar diffProcessor = {\n  lineX: curry(axisDiffProcessor, 0),\n  lineY: curry(axisDiffProcessor, 1),\n  rect: function (values, refer, scales) {\n    return [[values[0][0] - scales[0] * refer[0][0], values[0][1] - scales[0] * refer[0][1]], [values[1][0] - scales[1] * refer[1][0], values[1][1] - scales[1] * refer[1][1]]];\n  },\n  polygon: function (values, refer, scales) {\n    return zrUtil.map(values, function (item, idx) {\n      return [item[0] - scales[0] * refer[idx][0], item[1] - scales[1] * refer[idx][1]];\n    });\n  }\n};\n\nfunction axisDiffProcessor(axisNameIndex, values, refer, scales) {\n  return [values[0] - scales[axisNameIndex] * refer[0], values[1] - scales[axisNameIndex] * refer[1]];\n} // We have to process scale caused by dataZoom manually,\n// although it might be not accurate.\n\n\nfunction getScales(xyMinMaxCurr, xyMinMaxOrigin) {\n  var sizeCurr = getSize(xyMinMaxCurr);\n  var sizeOrigin = getSize(xyMinMaxOrigin);\n  var scales = [sizeCurr[0] / sizeOrigin[0], sizeCurr[1] / sizeOrigin[1]];\n  isNaN(scales[0]) && (scales[0] = 1);\n  isNaN(scales[1]) && (scales[1] = 1);\n  return scales;\n}\n\nfunction getSize(xyMinMax) {\n  return xyMinMax ? [xyMinMax[0][1] - xyMinMax[0][0], xyMinMax[1][1] - xyMinMax[1][0]] : [NaN, NaN];\n}\n\nvar _default = BrushTargetManager;\nmodule.exports = _default;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,OAAO,GAAGF,OAAO,CAACE,OAAtB;;AAEA,IAAIC,MAAM,GAAGF,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIG,OAAO,GAAGH,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAII,SAAS,GAAGJ,OAAO,CAAC,kBAAD,CAAvB;;AAEA,IAAIK,WAAW,GAAGL,OAAO,CAAC,eAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIM,IAAI,GAAGJ,MAAM,CAACI,IAAlB;AACA,IAAIC,OAAO,GAAGL,MAAM,CAACK,OAArB;AACA,IAAIC,KAAK,GAAGN,MAAM,CAACM,KAAnB;AACA,IAAIC,cAAc,GAAG,CAAC,aAAD,EAAgB,aAAhB,CAArB,C,CAAqD;AACrD;;AAEA,IAAIC,yBAAyB,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,KAA3B,EAAkC,OAAlC,EAA2C,OAA3C,EAAoD,YAApD,EAAkE,WAAlE,EAA+E,MAA/E,CAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,OAApC,EAA6CC,GAA7C,EAAkD;EAChD;AACF;AACA;AACA;EACE,IAAIC,cAAc,GAAG,KAAKC,eAAL,GAAuB,EAA5C;EACA,IAAIC,IAAI,GAAG,EAAX;EA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"},"metadata":{},"sourceType":"script"}