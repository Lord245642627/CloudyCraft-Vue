{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\nvar createHashMap = _util.createHashMap;\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar createListFromArray = require(\"../helper/createListFromArray\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar _default = SeriesModel.extend({\n  type: 'series.parallel',\n  dependencies: ['parallel'],\n  visualColorAccessPath: 'lineStyle.color',\n  getInitialData: function (option, ecModel) {\n    var source = this.getSource();\n    setEncodeAndDimensions(source, this);\n    return createListFromArray(source, this);\n  },\n\n  /**\n   * User can get data raw indices on 'axisAreaSelected' event received.\n   *\n   * @public\n   * @param {string} activeState 'active' or 'inactive' or 'normal'\n   * @return {Array.<number>} Raw indices\n   */\n  getRawIndicesByActiveState: function (activeState) {\n    var coordSys = this.coordinateSystem;\n    var data = this.getData();\n    var indices = [];\n    coordSys.eachActiveState(data, function (theActiveState, dataIndex) {\n      if (activeState === theActiveState) {\n        indices.push(data.getRawIndex(dataIndex));\n      }\n    });\n    return indices;\n  },\n  defaultOption: {\n    zlevel: 0,\n    // 一级层叠\n    z: 2,\n    // 二级层叠\n    coordinateSystem: 'parallel',\n    parallelIndex: 0,\n    label: {\n      show: false\n    },\n    inactiveOpacity: 0.05,\n    activeOpacity: 1,\n    lineStyle: {\n      width: 1,\n      opacity: 0.45,\n      type: 'solid'\n    },\n    emphasis: {\n      label: {\n        show: false\n      }\n    },\n    progressive: 500,\n    smooth: false,\n    // true | false | number\n    animationEasing: 'linear'\n  }\n});\n\nfunction setEncodeAndDimensions(source, seriesModel) {\n  // The mapping of parallelAxis dimension to data dimension can\n  // be specified in parallelAxis.option.dim. For example, if\n  // parallelAxis.option.dim is 'dim3', it mapping to the third\n  // dimension of data. But `data.encode` has higher priority.\n  // Moreover, parallelModel.dimension should not be regarded as data\n  // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];\n  if (source.encodeDefine) {\n    return;\n  }\n\n  var parallelModel = seriesModel.ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n\n  if (!parallelModel) {\n    return;\n  }\n\n  var encodeDefine = source.encodeDefine = createHashMap();\n  each(parallelModel.dimensions, function (axisDim) {\n    var dataDimIndex = convertDimNameToNumber(axisDim);\n    encodeDefine.set(axisDim, dataDimIndex);\n  });\n}\n\nfunction convertDimNameToNumber(dimName) {\n  return +dimName.replace('dim', '');\n}\n\nmodule.exports = _default;","map":{"version":3,"names":["_util","require","each","createHashMap","SeriesModel","createListFromArray","_default","extend","type","dependencies","visualColorAccessPath","getInitialData","option","ecModel","source","getSource","setEncodeAndDimensions","getRawIndicesByActiveState","activeState","coordSys","coordinateSystem","data","getData","indices","eachActiveState","theActiveState","dataIndex","push","getRawIndex","defaultOption","zlevel","z","parallelIndex","label","show","inactiveOpacity","activeOpacity","lineStyle","width","opacity","emphasis","progressive","smooth","animationEasing","seriesModel","encodeDefine","parallelModel","getComponent","get","dimensions","axisDim","dataDimIndex","convertDimNameToNumber","set","dimName","replace","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/chart/parallel/ParallelSeries.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\nvar createHashMap = _util.createHashMap;\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar createListFromArray = require(\"../helper/createListFromArray\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = SeriesModel.extend({\n  type: 'series.parallel',\n  dependencies: ['parallel'],\n  visualColorAccessPath: 'lineStyle.color',\n  getInitialData: function (option, ecModel) {\n    var source = this.getSource();\n    setEncodeAndDimensions(source, this);\n    return createListFromArray(source, this);\n  },\n\n  /**\n   * User can get data raw indices on 'axisAreaSelected' event received.\n   *\n   * @public\n   * @param {string} activeState 'active' or 'inactive' or 'normal'\n   * @return {Array.<number>} Raw indices\n   */\n  getRawIndicesByActiveState: function (activeState) {\n    var coordSys = this.coordinateSystem;\n    var data = this.getData();\n    var indices = [];\n    coordSys.eachActiveState(data, function (theActiveState, dataIndex) {\n      if (activeState === theActiveState) {\n        indices.push(data.getRawIndex(dataIndex));\n      }\n    });\n    return indices;\n  },\n  defaultOption: {\n    zlevel: 0,\n    // 一级层叠\n    z: 2,\n    // 二级层叠\n    coordinateSystem: 'parallel',\n    parallelIndex: 0,\n    label: {\n      show: false\n    },\n    inactiveOpacity: 0.05,\n    activeOpacity: 1,\n    lineStyle: {\n      width: 1,\n      opacity: 0.45,\n      type: 'solid'\n    },\n    emphasis: {\n      label: {\n        show: false\n      }\n    },\n    progressive: 500,\n    smooth: false,\n    // true | false | number\n    animationEasing: 'linear'\n  }\n});\n\nfunction setEncodeAndDimensions(source, seriesModel) {\n  // The mapping of parallelAxis dimension to data dimension can\n  // be specified in parallelAxis.option.dim. For example, if\n  // parallelAxis.option.dim is 'dim3', it mapping to the third\n  // dimension of data. But `data.encode` has higher priority.\n  // Moreover, parallelModel.dimension should not be regarded as data\n  // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];\n  if (source.encodeDefine) {\n    return;\n  }\n\n  var parallelModel = seriesModel.ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n\n  if (!parallelModel) {\n    return;\n  }\n\n  var encodeDefine = source.encodeDefine = createHashMap();\n  each(parallelModel.dimensions, function (axisDim) {\n    var dataDimIndex = convertDimNameToNumber(axisDim);\n    encodeDefine.set(axisDim, dataDimIndex);\n  });\n}\n\nfunction convertDimNameToNumber(dimName) {\n  return +dimName.replace('dim', '');\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}