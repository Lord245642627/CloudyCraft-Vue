{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction defaultKeyGetter(item) {\n  return item;\n}\n/**\n * @param {Array} oldArr\n * @param {Array} newArr\n * @param {Function} oldKeyGetter\n * @param {Function} newKeyGetter\n * @param {Object} [context] Can be visited by this.context in callback.\n */\n\n\nfunction DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {\n  this._old = oldArr;\n  this._new = newArr;\n  this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n  this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n  this.context = context;\n}\n\nDataDiffer.prototype = {\n  constructor: DataDiffer,\n\n  /**\n   * Callback function when add a data\n   */\n  add: function (func) {\n    this._add = func;\n    return this;\n  },\n\n  /**\n   * Callback function when update a data\n   */\n  update: function (func) {\n    this._update = func;\n    return this;\n  },\n\n  /**\n   * Callback function when remove a data\n   */\n  remove: function (func) {\n    this._remove = func;\n    return this;\n  },\n  execute: function () {\n    var oldArr = this._old;\n    var newArr = this._new;\n    var oldDataIndexMap = {};\n    var newDataIndexMap = {};\n    var oldDataKeyArr = [];\n    var newDataKeyArr = [];\n    var i;\n    initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);\n    initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this);\n\n    for (i = 0; i < oldArr.length; i++) {\n      var key = oldDataKeyArr[i];\n      var idx = newDataIndexMap[key]; // idx can never be empty array here. see 'set null' logic below.\n\n      if (idx != null) {\n        // Consider there is duplicate key (for example, use dataItem.name as key).\n        // We should make sure every item in newArr and oldArr can be visited.\n        var len = idx.length;\n\n        if (len) {\n          len === 1 && (newDataIndexMap[key] = null);\n          idx = idx.shift();\n        } else {\n          newDataIndexMap[key] = null;\n        }\n\n        this._update && this._update(idx, i);\n      } else {\n        this._remove && this._remove(i);\n      }\n    }\n\n    for (var i = 0; i < newDataKeyArr.length; i++) {\n      var key = newDataKeyArr[i];\n\n      if (newDataIndexMap.hasOwnProperty(key)) {\n        var idx = newDataIndexMap[key];\n\n        if (idx == null) {\n          continue;\n        } // idx can never be empty array here. see 'set null' logic above.\n\n\n        if (!idx.length) {\n          this._add && this._add(idx);\n        } else {\n          for (var j = 0, len = idx.length; j < len; j++) {\n            this._add && this._add(idx[j]);\n          }\n        }\n      }\n    }\n  }\n};\n\nfunction initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {\n  for (var i = 0; i < arr.length; i++) {\n    // Add prefix to avoid conflict with Object.prototype.\n    var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);\n    var existence = map[key];\n\n    if (existence == null) {\n      keyArr.push(key);\n      map[key] = i;\n    } else {\n      if (!existence.length) {\n        map[key] = existence = [existence];\n      }\n\n      existence.push(i);\n    }\n  }\n}\n\nvar _default = DataDiffer;\nmodule.exports = _default;","map":{"version":3,"names":["defaultKeyGetter","item","DataDiffer","oldArr","newArr","oldKeyGetter","newKeyGetter","context","_old","_new","_oldKeyGetter","_newKeyGetter","prototype","constructor","add","func","_add","update","_update","remove","_remove","execute","oldDataIndexMap","newDataIndexMap","oldDataKeyArr","newDataKeyArr","i","initIndexMap","length","key","idx","len","shift","hasOwnProperty","j","arr","map","keyArr","keyGetterName","dataDiffer","existence","push","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/data/DataDiffer.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction defaultKeyGetter(item) {\n  return item;\n}\n/**\n * @param {Array} oldArr\n * @param {Array} newArr\n * @param {Function} oldKeyGetter\n * @param {Function} newKeyGetter\n * @param {Object} [context] Can be visited by this.context in callback.\n */\n\n\nfunction DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {\n  this._old = oldArr;\n  this._new = newArr;\n  this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n  this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n  this.context = context;\n}\n\nDataDiffer.prototype = {\n  constructor: DataDiffer,\n\n  /**\n   * Callback function when add a data\n   */\n  add: function (func) {\n    this._add = func;\n    return this;\n  },\n\n  /**\n   * Callback function when update a data\n   */\n  update: function (func) {\n    this._update = func;\n    return this;\n  },\n\n  /**\n   * Callback function when remove a data\n   */\n  remove: function (func) {\n    this._remove = func;\n    return this;\n  },\n  execute: function () {\n    var oldArr = this._old;\n    var newArr = this._new;\n    var oldDataIndexMap = {};\n    var newDataIndexMap = {};\n    var oldDataKeyArr = [];\n    var newDataKeyArr = [];\n    var i;\n    initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);\n    initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this);\n\n    for (i = 0; i < oldArr.length; i++) {\n      var key = oldDataKeyArr[i];\n      var idx = newDataIndexMap[key]; // idx can never be empty array here. see 'set null' logic below.\n\n      if (idx != null) {\n        // Consider there is duplicate key (for example, use dataItem.name as key).\n        // We should make sure every item in newArr and oldArr can be visited.\n        var len = idx.length;\n\n        if (len) {\n          len === 1 && (newDataIndexMap[key] = null);\n          idx = idx.shift();\n        } else {\n          newDataIndexMap[key] = null;\n        }\n\n        this._update && this._update(idx, i);\n      } else {\n        this._remove && this._remove(i);\n      }\n    }\n\n    for (var i = 0; i < newDataKeyArr.length; i++) {\n      var key = newDataKeyArr[i];\n\n      if (newDataIndexMap.hasOwnProperty(key)) {\n        var idx = newDataIndexMap[key];\n\n        if (idx == null) {\n          continue;\n        } // idx can never be empty array here. see 'set null' logic above.\n\n\n        if (!idx.length) {\n          this._add && this._add(idx);\n        } else {\n          for (var j = 0, len = idx.length; j < len; j++) {\n            this._add && this._add(idx[j]);\n          }\n        }\n      }\n    }\n  }\n};\n\nfunction initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {\n  for (var i = 0; i < arr.length; i++) {\n    // Add prefix to avoid conflict with Object.prototype.\n    var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);\n    var existence = map[key];\n\n    if (existence == null) {\n      keyArr.push(key);\n      map[key] = i;\n    } else {\n      if (!existence.length) {\n        map[key] = existence = [existence];\n      }\n\n      existence.push(i);\n    }\n  }\n}\n\nvar _default = DataDiffer;\nmodule.exports = _default;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;EAC9B,OAAOA,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,YAApC,EAAkDC,YAAlD,EAAgEC,OAAhE,EAAyE;EACvE,KAAKC,IAAL,GAAYL,MAAZ;EACA,KAAKM,IAAL,GAAYL,MAAZ;EACA,KAAKM,aAAL,GAAqBL,YAAY,IAAIL,gBAArC;EACA,KAAKW,aAAL,GAAqBL,YAAY,IAAIN,gBAArC;EACA,KAAKO,OAAL,GAAeA,OAAf;AACD;;AAEDL,UAAU,CAACU,SAAX,GAAuB;EACrBC,WAAW,EAAEX,UADQ;;EAGrB;AACF;AACA;EACEY,GAAG,EAAE,UAAUC,IAAV,EAAgB;IACnB,KAAKC,IAAL,GAAYD,IAAZ;IACA,OAAO,IAAP;EACD,CAToB;;EAWrB;AACF;AACA;EACEE,MAAM,EAAE,UAAUF,IAAV,EAAgB;IACtB,KAAKG,OAAL,GAAeH,IAAf;IACA,OAAO,IAAP;EACD,CAjBoB;;EAmBrB;AACF;AACA;EACEI,MAAM,EAAE,UAAUJ,IAAV,EAAgB;IACtB,KAAKK,OAAL,GAAeL,IAAf;IACA,OAAO,IAAP;EACD,CAzBoB;EA0BrBM,OAAO,EAAE,YAAY;IACnB,IAAIlB,MAAM,GAAG,KAAKK,IAAlB;IACA,IAAIJ,MAAM,GAAG,KAAKK,IAAlB;IACA,IAAIa,eAAe,GAAG,EAAtB;IACA,IAAIC,eAAe,GAAG,EAAtB;IACA,IAAIC,aAAa,GAAG,EAApB;IACA,IAAIC,aAAa,GAAG,EAApB;IACA,IAAIC,CAAJ;IACAC,YAAY,CAACxB,MAAD,EAASmB,eAAT,EAA0BE,aAA1B,EAAyC,eAAzC,EAA0D,IAA1D,CAAZ;IACAG,YAAY,CAACvB,MAAD,EAASmB,eAAT,EAA0BE,aAA1B,EAAyC,eAAzC,EAA0D,IAA1D,CAAZ;;IAEA,KAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGvB,MAAM,CAACyB,MAAvB,EAA+BF,CAAC,EAAhC,EAAoC;MAClC,IAAIG,GAAG,GAAGL,aAAa,CAACE,CAAD,CAAvB;MACA,IAAII,GAAG,GAAGP,eAAe,CAACM,GAAD,CAAzB,CAFkC,CAEF;;MAEhC,IAAIC,GAAG,IAAI,IAAX,EAAiB;QACf;QACA;QACA,IAAIC,GAAG,GAAGD,GAAG,CAACF,MAAd;;QAEA,IAAIG,GAAJ,EAAS;UACPA,GAAG,KAAK,CAAR,KAAcR,eAAe,CAACM,GAAD,CAAf,GAAuB,IAArC;UACAC,GAAG,GAAGA,GAAG,CAACE,KAAJ,EAAN;QACD,CAHD,MAGO;UACLT,eAAe,CAACM,GAAD,CAAf,GAAuB,IAAvB;QACD;;QAED,KAAKX,OAAL,IAAgB,KAAKA,OAAL,CAAaY,GAAb,EAAkBJ,CAAlB,CAAhB;MACD,CAbD,MAaO;QACL,KAAKN,OAAL,IAAgB,KAAKA,OAAL,CAAaM,CAAb,CAAhB;MACD;IACF;;IAED,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACG,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;MAC7C,IAAIG,GAAG,GAAGJ,aAAa,CAACC,CAAD,CAAvB;;MAEA,IAAIH,eAAe,CAACU,cAAhB,CAA+BJ,GAA/B,CAAJ,EAAyC;QACvC,IAAIC,GAAG,GAAGP,eAAe,CAACM,GAAD,CAAzB;;QAEA,IAAIC,GAAG,IAAI,IAAX,EAAiB;UACf;QACD,CALsC,CAKrC;;;QAGF,IAAI,CAACA,GAAG,CAACF,MAAT,EAAiB;UACf,KAAKZ,IAAL,IAAa,KAAKA,IAAL,CAAUc,GAAV,CAAb;QACD,CAFD,MAEO;UACL,KAAK,IAAII,CAAC,GAAG,CAAR,EAAWH,GAAG,GAAGD,GAAG,CAACF,MAA1B,EAAkCM,CAAC,GAAGH,GAAtC,EAA2CG,CAAC,EAA5C,EAAgD;YAC9C,KAAKlB,IAAL,IAAa,KAAKA,IAAL,CAAUc,GAAG,CAACI,CAAD,CAAb,CAAb;UACD;QACF;MACF;IACF;EACF;AA/EoB,CAAvB;;AAkFA,SAASP,YAAT,CAAsBQ,GAAtB,EAA2BC,GAA3B,EAAgCC,MAAhC,EAAwCC,aAAxC,EAAuDC,UAAvD,EAAmE;EACjE,KAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,GAAG,CAACP,MAAxB,EAAgCF,CAAC,EAAjC,EAAqC;IACnC;IACA,IAAIG,GAAG,GAAG,SAASU,UAAU,CAACD,aAAD,CAAV,CAA0BH,GAAG,CAACT,CAAD,CAA7B,EAAkCA,CAAlC,CAAnB;IACA,IAAIc,SAAS,GAAGJ,GAAG,CAACP,GAAD,CAAnB;;IAEA,IAAIW,SAAS,IAAI,IAAjB,EAAuB;MACrBH,MAAM,CAACI,IAAP,CAAYZ,GAAZ;MACAO,GAAG,CAACP,GAAD,CAAH,GAAWH,CAAX;IACD,CAHD,MAGO;MACL,IAAI,CAACc,SAAS,CAACZ,MAAf,EAAuB;QACrBQ,GAAG,CAACP,GAAD,CAAH,GAAWW,SAAS,GAAG,CAACA,SAAD,CAAvB;MACD;;MAEDA,SAAS,CAACC,IAAV,CAAef,CAAf;IACD;EACF;AACF;;AAED,IAAIgB,QAAQ,GAAGxC,UAAf;AACAyC,MAAM,CAACC,OAAP,GAAiBF,QAAjB"},"metadata":{},"sourceType":"script"}