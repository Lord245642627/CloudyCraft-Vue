{"ast":null,"code":"import { resetRouter } from '@/router';\nexport default {\n  created() {\n    let matched = this.$route.matched.filter(item => item.name);\n    const first = matched[0];\n\n    if (first && first.name !== '扶뒬못') {\n      matched = [{\n        path: '/',\n        name: '扶뒬못'\n      }].concat(matched);\n    }\n\n    this.breadcrumbs = matched;\n    this.$store.commit('saveTab', this.$route);\n  },\n\n  data: function () {\n    return {\n      isSearch: false,\n      fullscreen: false,\n      breadcrumbs: []\n    };\n  },\n  methods: {\n    goTo(tab) {\n      this.$router.push({\n        path: tab.path\n      });\n    },\n\n    removeTab(tab) {\n      this.$store.commit('removeTab', tab);\n\n      if (tab.path == this.$route.path) {\n        var tabList = this.$store.state.tabList;\n        this.$router.push({\n          path: tabList[tabList.length - 1].path\n        });\n      }\n    },\n\n    trigger() {\n      this.$store.commit('trigger');\n    },\n\n    handleCommand(command) {\n      if (command == 'setting') {\n        this.$router.push({\n          path: '/setting'\n        });\n      }\n\n      if (command == 'logout') {\n        this.axios.post('/api/users/logout').then(({\n          data\n        }) => {\n          this.$store.commit('logout');\n          this.$store.commit('resetTab');\n          resetRouter();\n          this.$router.push({\n            path: '/login'\n          });\n        });\n      }\n    },\n\n    closeAllTab() {\n      this.$store.commit('resetTab');\n      this.$router.push({\n        path: '/'\n      });\n    },\n\n    fullScreen() {\n      let element = document.documentElement;\n\n      if (this.fullscreen) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitCancelFullScreen) {\n          document.webkitCancelFullScreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        }\n      } else {\n        if (element.requestFullscreen) {\n          element.requestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n          element.webkitRequestFullScreen();\n        } else if (element.mozRequestFullScreen) {\n          element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n          element.msRequestFullscreen();\n        }\n      }\n\n      this.fullscreen = !this.fullscreen;\n    }\n\n  },\n  computed: {\n    isActive() {\n      return function (tab) {\n        if (tab.path == this.$route.path) {\n          return 'tabs-view-item-active';\n        }\n\n        return 'tabs-view-item';\n      };\n    },\n\n    isFold() {\n      return this.$store.state.collapse ? 'el-icon-s-unfold' : 'el-icon-s-fold';\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}