{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar each = zrUtil.each;\nvar isObject = zrUtil.isObject;\nvar isArray = zrUtil.isArray;\n/**\n * Make the name displayable. But we should\n * make sure it is not duplicated with user\n * specified name, so use '\\0';\n */\n\nvar DUMMY_COMPONENT_NAME_PREFIX = 'series\\0';\n/**\n * If value is not array, then translate it to array.\n * @param  {*} value\n * @return {Array} [value] or value\n */\n\nfunction normalizeToArray(value) {\n  return value instanceof Array ? value : value == null ? [] : [value];\n}\n/**\n * Sync default option between normal and emphasis like `position` and `show`\n * In case some one will write code like\n *     label: {\n *          show: false,\n *          position: 'outside',\n *          fontSize: 18\n *     },\n *     emphasis: {\n *          label: { show: true }\n *     }\n * @param {Object} opt\n * @param {string} key\n * @param {Array.<string>} subOpts\n */\n\n\nfunction defaultEmphasis(opt, key, subOpts) {\n  // Caution: performance sensitive.\n  if (opt) {\n    opt[key] = opt[key] || {};\n    opt.emphasis = opt.emphasis || {};\n    opt.emphasis[key] = opt.emphasis[key] || {}; // Default emphasis option from normal\n\n    for (var i = 0, len = subOpts.length; i < len; i++) {\n      var subOptName = subOpts[i];\n\n      if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) {\n        opt.emphasis[key][subOptName] = opt[key][subOptName];\n      }\n    }\n  }\n}\n\nvar TEXT_STYLE_OPTIONS = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth', 'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding']; // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([\n//     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',\n//     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',\n//     // FIXME: deprecated, check and remove it.\n//     'textStyle'\n// ]);\n\n/**\n * The method do not ensure performance.\n * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n * This helper method retieves value from data.\n * @param {string|number|Date|Array|Object} dataItem\n * @return {number|string|Date|Array.<number|string|Date>}\n */\n\nfunction getDataItemValue(dataItem) {\n  return isObject(dataItem) && !isArray(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;\n}\n/**\n * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n * This helper method determine if dataItem has extra option besides value\n * @param {string|number|Date|Array|Object} dataItem\n */\n\n\nfunction isDataItemOption(dataItem) {\n  return isObject(dataItem) && !(dataItem instanceof Array); // // markLine data can be array\n  // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n}\n/**\n * Mapping to exists for merge.\n *\n * @public\n * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n * @param {Object|Array.<Object>} newCptOptions\n * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n *                          index of which is the same as exists.\n */\n\n\nfunction mappingToExists(exists, newCptOptions) {\n  // Mapping by the order by original option (but not order of\n  // new option) in merge mode. Because we should ensure\n  // some specified index (like xAxisIndex) is consistent with\n  // original option, which is easy to understand, espatially in\n  // media query. And in most case, merge option is used to\n  // update partial option but not be expected to change order.\n  newCptOptions = (newCptOptions || []).slice();\n  var result = zrUtil.map(exists || [], function (obj, index) {\n    return {\n      exist: obj\n    };\n  }); // Mapping by id or name if specified.\n\n  each(newCptOptions, function (cptOption, index) {\n    if (!isObject(cptOption)) {\n      return;\n    } // id has highest priority.\n\n\n    for (var i = 0; i < result.length; i++) {\n      if (!result[i].option // Consider name: two map to one.\n      && cptOption.id != null && result[i].exist.id === cptOption.id + '') {\n        result[i].option = cptOption;\n        newCptOptions[index] = null;\n        return;\n      }\n    }\n\n    for (var i = 0; i < result.length; i++) {\n      var exist = result[i].exist;\n\n      if (!result[i].option // Consider name: two map to one.\n      // Can not match when both ids exist but different.\n      && (exist.id == null || cptOption.id == null) && cptOption.name != null && !isIdInner(cptOption) && !isIdInner(exist) && exist.name === cptOption.name + '') {\n        result[i].option = cptOption;\n        newCptOptions[index] = null;\n        return;\n      }\n    }\n  }); // Otherwise mapping by index.\n\n  each(newCptOptions, function (cptOption, index) {\n    if (!isObject(cptOption)) {\n      return;\n    }\n\n    var i = 0;\n\n    for (; i < result.length; i++) {\n      var exist = result[i].exist;\n\n      if (!result[i].option // Existing model that already has id should be able to\n      // mapped to (because after mapping performed model may\n      // be assigned with a id, whish should not affect next\n      // mapping), except those has inner id.\n      && !isIdInner(exist) // Caution:\n      // Do not overwrite id. But name can be overwritten,\n      // because axis use name as 'show label text'.\n      // 'exist' always has id and name and we dont\n      // need to check it.\n      && cptOption.id == null) {\n        result[i].option = cptOption;\n        break;\n      }\n    }\n\n    if (i >= result.length) {\n      result.push({\n        option: cptOption\n      });\n    }\n  });\n  return result;\n}\n/**\n * Make id and name for mapping result (result of mappingToExists)\n * into `keyInfo` field.\n *\n * @public\n * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n *                          which order is the same as exists.\n * @return {Array.<Object>} The input.\n */\n\n\nfunction makeIdAndName(mapResult) {\n  // We use this id to hash component models and view instances\n  // in echarts. id can be specified by user, or auto generated.\n  // The id generation rule ensures new view instance are able\n  // to mapped to old instance when setOption are called in\n  // no-merge mode. So we generate model id by name and plus\n  // type in view id.\n  // name can be duplicated among components, which is convenient\n  // to specify multi components (like series) by one name.\n  // Ensure that each id is distinct.\n  var idMap = zrUtil.createHashMap();\n  each(mapResult, function (item, index) {\n    var existCpt = item.exist;\n    existCpt && idMap.set(existCpt.id, item);\n  });\n  each(mapResult, function (item, index) {\n    var opt = item.option;\n    zrUtil.assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, 'id duplicates: ' + (opt && opt.id));\n    opt && opt.id != null && idMap.set(opt.id, item);\n    !item.keyInfo && (item.keyInfo = {});\n  }); // Make name and id.\n\n  each(mapResult, function (item, index) {\n    var existCpt = item.exist;\n    var opt = item.option;\n    var keyInfo = item.keyInfo;\n\n    if (!isObject(opt)) {\n      return;\n    } // name can be overwitten. Consider case: axis.name = '20km'.\n    // But id generated by name will not be changed, which affect\n    // only in that case: setOption with 'not merge mode' and view\n    // instance will be recreated, which can be accepted.\n\n\n    keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name // Avoid diffferent series has the same name,\n    // because name may be used like in color pallet.\n    : DUMMY_COMPONENT_NAME_PREFIX + index;\n\n    if (existCpt) {\n      keyInfo.id = existCpt.id;\n    } else if (opt.id != null) {\n      keyInfo.id = opt.id + '';\n    } else {\n      // Consider this situatoin:\n      //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n      //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n      // Series with the same name between optionA and optionB\n      // should be mapped.\n      var idNum = 0;\n\n      do {\n        keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n      } while (idMap.get(keyInfo.id));\n    }\n\n    idMap.set(keyInfo.id, item);\n  });\n}\n\nfunction isNameSpecified(componentModel) {\n  var name = componentModel.name; // Is specified when `indexOf` get -1 or > 0.\n\n  return !!(name && name.indexOf(DUMMY_COMPONENT_NAME_PREFIX));\n}\n/**\n * @public\n * @param {Object} cptOption\n * @return {boolean}\n */\n\n\nfunction isIdInner(cptOption) {\n  return isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n}\n/**\n * A helper for removing duplicate items between batchA and batchB,\n * and in themselves, and categorize by series.\n *\n * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n */\n\n\nfunction compressBatches(batchA, batchB) {\n  var mapA = {};\n  var mapB = {};\n  makeMap(batchA || [], mapA);\n  makeMap(batchB || [], mapB, mapA);\n  return [mapToArray(mapA), mapToArray(mapB)];\n\n  function makeMap(sourceBatch, map, otherMap) {\n    for (var i = 0, len = sourceBatch.length; i < len; i++) {\n      var seriesId = sourceBatch[i].seriesId;\n      var dataIndices = normalizeToArray(sourceBatch[i].dataIndex);\n      var otherDataIndices = otherMap && otherMap[seriesId];\n\n      for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n        var dataIndex = dataIndices[j];\n\n        if (otherDataIndices && otherDataIndices[dataIndex]) {\n          otherDataIndices[dataIndex] = null;\n        } else {\n          (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n        }\n      }\n    }\n  }\n\n  function mapToArray(map, isData) {\n    var result = [];\n\n    for (var i in map) {\n      if (map.hasOwnProperty(i) && map[i] != null) {\n        if (isData) {\n          result.push(+i);\n        } else {\n          var dataIndices = mapToArray(map[i], true);\n          dataIndices.length && result.push({\n            seriesId: i,\n            dataIndex: dataIndices\n          });\n        }\n      }\n    }\n\n    return result;\n  }\n}\n/**\n * @param {module:echarts/data/List} data\n * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n *                         each of which can be Array or primary type.\n * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n */\n\n\nfunction queryDataIndex(data, payload) {\n  if (payload.dataIndexInside != null) {\n    return payload.dataIndexInside;\n  } else if (payload.dataIndex != null) {\n    return zrUtil.isArray(payload.dataIndex) ? zrUtil.map(payload.dataIndex, function (value) {\n      return data.indexOfRawIndex(value);\n    }) : data.indexOfRawIndex(payload.dataIndex);\n  } else if (payload.name != null) {\n    return zrUtil.isArray(payload.name) ? zrUtil.map(payload.name, function (value) {\n      return data.indexOfName(value);\n    }) : data.indexOfName(payload.name);\n  }\n}\n/**\n * Enable property storage to any host object.\n * Notice: Serialization is not supported.\n *\n * For example:\n * var inner = zrUitl.makeInner();\n *\n * function some1(hostObj) {\n *      inner(hostObj).someProperty = 1212;\n *      ...\n * }\n * function some2() {\n *      var fields = inner(this);\n *      fields.someProperty1 = 1212;\n *      fields.someProperty2 = 'xx';\n *      ...\n * }\n *\n * @return {Function}\n */\n\n\nfunction makeInner() {\n  // Consider different scope by es module import.\n  var key = '__\\0ec_inner_' + innerUniqueIndex++ + '_' + Math.random().toFixed(5);\n  return function (hostObj) {\n    return hostObj[key] || (hostObj[key] = {});\n  };\n}\n\nvar innerUniqueIndex = 0;\n/**\n * @param {module:echarts/model/Global} ecModel\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex, seriesId, seriesName,\n *            geoIndex, geoId, geoName,\n *            bmapIndex, bmapId, bmapName,\n *            xAxisIndex, xAxisId, xAxisName,\n *            yAxisIndex, yAxisId, yAxisName,\n *            gridIndex, gridId, gridName,\n *            ... (can be extended)\n *        }\n *        Each properties can be number|string|Array.<number>|Array.<string>\n *        For example, a finder could be\n *        {\n *            seriesIndex: 3,\n *            geoId: ['aa', 'cc'],\n *            gridName: ['xx', 'rr']\n *        }\n *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)\n *        If nothing or null/undefined specified, return nothing.\n * @param {Object} [opt]\n * @param {string} [opt.defaultMainType]\n * @param {Array.<string>} [opt.includeMainTypes]\n * @return {Object} result like:\n *        {\n *            seriesModels: [seriesModel1, seriesModel2],\n *            seriesModel: seriesModel1, // The first model\n *            geoModels: [geoModel1, geoModel2],\n *            geoModel: geoModel1, // The first model\n *            ...\n *        }\n */\n\nfunction parseFinder(ecModel, finder, opt) {\n  if (zrUtil.isString(finder)) {\n    var obj = {};\n    obj[finder + 'Index'] = 0;\n    finder = obj;\n  }\n\n  var defaultMainType = opt && opt.defaultMainType;\n\n  if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {\n    finder[defaultMainType + 'Index'] = 0;\n  }\n\n  var result = {};\n  each(finder, function (value, key) {\n    var value = finder[key]; // Exclude 'dataIndex' and other illgal keys.\n\n    if (key === 'dataIndex' || key === 'dataIndexInside') {\n      result[key] = value;\n      return;\n    }\n\n    var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n    var mainType = parsedKey[1];\n    var queryType = (parsedKey[2] || '').toLowerCase();\n\n    if (!mainType || !queryType || value == null || queryType === 'index' && value === 'none' || opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0) {\n      return;\n    }\n\n    var queryParam = {\n      mainType: mainType\n    };\n\n    if (queryType !== 'index' || value !== 'all') {\n      queryParam[queryType] = value;\n    }\n\n    var models = ecModel.queryComponents(queryParam);\n    result[mainType + 'Models'] = models;\n    result[mainType + 'Model'] = models[0];\n  });\n  return result;\n}\n\nfunction has(obj, prop) {\n  return obj && obj.hasOwnProperty(prop);\n}\n\nfunction setAttribute(dom, key, value) {\n  dom.setAttribute ? dom.setAttribute(key, value) : dom[key] = value;\n}\n\nfunction getAttribute(dom, key) {\n  return dom.getAttribute ? dom.getAttribute(key) : dom[key];\n}\n\nfunction getTooltipRenderMode(renderModeOption) {\n  if (renderModeOption === 'auto') {\n    // Using html when `document` exists, use richText otherwise\n    return env.domSupported ? 'html' : 'richText';\n  } else {\n    return renderModeOption || 'html';\n  }\n}\n/**\n * Group a list by key.\n *\n * @param {Array} array\n * @param {Function} getKey\n *        param {*} Array item\n *        return {string} key\n * @return {Object} Result\n *        {Array}: keys,\n *        {module:zrender/core/util/HashMap} buckets: {key -> Array}\n */\n\n\nfunction groupData(array, getKey) {\n  var buckets = zrUtil.createHashMap();\n  var keys = [];\n  zrUtil.each(array, function (item) {\n    var key = getKey(item);\n    (buckets.get(key) || (keys.push(key), buckets.set(key, []))).push(item);\n  });\n  return {\n    keys: keys,\n    buckets: buckets\n  };\n}\n\nexports.normalizeToArray = normalizeToArray;\nexports.defaultEmphasis = defaultEmphasis;\nexports.TEXT_STYLE_OPTIONS = TEXT_STYLE_OPTIONS;\nexports.getDataItemValue = getDataItemValue;\nexports.isDataItemOption = isDataItemOption;\nexports.mappingToExists = mappingToExists;\nexports.makeIdAndName = makeIdAndName;\nexports.isNameSpecified = isNameSpecified;\nexports.isIdInner = isIdInner;\nexports.compressBatches = compressBatches;\nexports.queryDataIndex = queryDataIndex;\nexports.makeInner = makeInner;\nexports.parseFinder = parseFinder;\nexports.setAttribute = setAttribute;\nexports.getAttribute = getAttribute;\nexports.getTooltipRenderMode = getTooltipRenderMode;\nexports.groupData = groupData;","map":{"version":3,"names":["zrUtil","require","env","each","isObject","isArray","DUMMY_COMPONENT_NAME_PREFIX","normalizeToArray","value","Array","defaultEmphasis","opt","key","subOpts","emphasis","i","len","length","subOptName","hasOwnProperty","TEXT_STYLE_OPTIONS","getDataItemValue","dataItem","Date","isDataItemOption","mappingToExists","exists","newCptOptions","slice","result","map","obj","index","exist","cptOption","option","id","name","isIdInner","push","makeIdAndName","mapResult","idMap","createHashMap","item","existCpt","set","assert","get","keyInfo","idNum","isNameSpecified","componentModel","indexOf","compressBatches","batchA","batchB","mapA","mapB","makeMap","mapToArray","sourceBatch","otherMap","seriesId","dataIndices","dataIndex","otherDataIndices","j","lenj","isData","queryDataIndex","data","payload","dataIndexInside","indexOfRawIndex","indexOfName","makeInner","innerUniqueIndex","Math","random","toFixed","hostObj","parseFinder","ecModel","finder","isString","defaultMainType","has","parsedKey","match","mainType","queryType","toLowerCase","includeMainTypes","queryParam","models","queryComponents","prop","setAttribute","dom","getAttribute","getTooltipRenderMode","renderModeOption","domSupported","groupData","array","getKey","buckets","keys","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/util/model.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar each = zrUtil.each;\nvar isObject = zrUtil.isObject;\nvar isArray = zrUtil.isArray;\n/**\n * Make the name displayable. But we should\n * make sure it is not duplicated with user\n * specified name, so use '\\0';\n */\n\nvar DUMMY_COMPONENT_NAME_PREFIX = 'series\\0';\n/**\n * If value is not array, then translate it to array.\n * @param  {*} value\n * @return {Array} [value] or value\n */\n\nfunction normalizeToArray(value) {\n  return value instanceof Array ? value : value == null ? [] : [value];\n}\n/**\n * Sync default option between normal and emphasis like `position` and `show`\n * In case some one will write code like\n *     label: {\n *          show: false,\n *          position: 'outside',\n *          fontSize: 18\n *     },\n *     emphasis: {\n *          label: { show: true }\n *     }\n * @param {Object} opt\n * @param {string} key\n * @param {Array.<string>} subOpts\n */\n\n\nfunction defaultEmphasis(opt, key, subOpts) {\n  // Caution: performance sensitive.\n  if (opt) {\n    opt[key] = opt[key] || {};\n    opt.emphasis = opt.emphasis || {};\n    opt.emphasis[key] = opt.emphasis[key] || {}; // Default emphasis option from normal\n\n    for (var i = 0, len = subOpts.length; i < len; i++) {\n      var subOptName = subOpts[i];\n\n      if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) {\n        opt.emphasis[key][subOptName] = opt[key][subOptName];\n      }\n    }\n  }\n}\n\nvar TEXT_STYLE_OPTIONS = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth', 'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding']; // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([\n//     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',\n//     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',\n//     // FIXME: deprecated, check and remove it.\n//     'textStyle'\n// ]);\n\n/**\n * The method do not ensure performance.\n * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n * This helper method retieves value from data.\n * @param {string|number|Date|Array|Object} dataItem\n * @return {number|string|Date|Array.<number|string|Date>}\n */\n\nfunction getDataItemValue(dataItem) {\n  return isObject(dataItem) && !isArray(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;\n}\n/**\n * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n * This helper method determine if dataItem has extra option besides value\n * @param {string|number|Date|Array|Object} dataItem\n */\n\n\nfunction isDataItemOption(dataItem) {\n  return isObject(dataItem) && !(dataItem instanceof Array); // // markLine data can be array\n  // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n}\n/**\n * Mapping to exists for merge.\n *\n * @public\n * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n * @param {Object|Array.<Object>} newCptOptions\n * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n *                          index of which is the same as exists.\n */\n\n\nfunction mappingToExists(exists, newCptOptions) {\n  // Mapping by the order by original option (but not order of\n  // new option) in merge mode. Because we should ensure\n  // some specified index (like xAxisIndex) is consistent with\n  // original option, which is easy to understand, espatially in\n  // media query. And in most case, merge option is used to\n  // update partial option but not be expected to change order.\n  newCptOptions = (newCptOptions || []).slice();\n  var result = zrUtil.map(exists || [], function (obj, index) {\n    return {\n      exist: obj\n    };\n  }); // Mapping by id or name if specified.\n\n  each(newCptOptions, function (cptOption, index) {\n    if (!isObject(cptOption)) {\n      return;\n    } // id has highest priority.\n\n\n    for (var i = 0; i < result.length; i++) {\n      if (!result[i].option // Consider name: two map to one.\n      && cptOption.id != null && result[i].exist.id === cptOption.id + '') {\n        result[i].option = cptOption;\n        newCptOptions[index] = null;\n        return;\n      }\n    }\n\n    for (var i = 0; i < result.length; i++) {\n      var exist = result[i].exist;\n\n      if (!result[i].option // Consider name: two map to one.\n      // Can not match when both ids exist but different.\n      && (exist.id == null || cptOption.id == null) && cptOption.name != null && !isIdInner(cptOption) && !isIdInner(exist) && exist.name === cptOption.name + '') {\n        result[i].option = cptOption;\n        newCptOptions[index] = null;\n        return;\n      }\n    }\n  }); // Otherwise mapping by index.\n\n  each(newCptOptions, function (cptOption, index) {\n    if (!isObject(cptOption)) {\n      return;\n    }\n\n    var i = 0;\n\n    for (; i < result.length; i++) {\n      var exist = result[i].exist;\n\n      if (!result[i].option // Existing model that already has id should be able to\n      // mapped to (because after mapping performed model may\n      // be assigned with a id, whish should not affect next\n      // mapping), except those has inner id.\n      && !isIdInner(exist) // Caution:\n      // Do not overwrite id. But name can be overwritten,\n      // because axis use name as 'show label text'.\n      // 'exist' always has id and name and we dont\n      // need to check it.\n      && cptOption.id == null) {\n        result[i].option = cptOption;\n        break;\n      }\n    }\n\n    if (i >= result.length) {\n      result.push({\n        option: cptOption\n      });\n    }\n  });\n  return result;\n}\n/**\n * Make id and name for mapping result (result of mappingToExists)\n * into `keyInfo` field.\n *\n * @public\n * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n *                          which order is the same as exists.\n * @return {Array.<Object>} The input.\n */\n\n\nfunction makeIdAndName(mapResult) {\n  // We use this id to hash component models and view instances\n  // in echarts. id can be specified by user, or auto generated.\n  // The id generation rule ensures new view instance are able\n  // to mapped to old instance when setOption are called in\n  // no-merge mode. So we generate model id by name and plus\n  // type in view id.\n  // name can be duplicated among components, which is convenient\n  // to specify multi components (like series) by one name.\n  // Ensure that each id is distinct.\n  var idMap = zrUtil.createHashMap();\n  each(mapResult, function (item, index) {\n    var existCpt = item.exist;\n    existCpt && idMap.set(existCpt.id, item);\n  });\n  each(mapResult, function (item, index) {\n    var opt = item.option;\n    zrUtil.assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, 'id duplicates: ' + (opt && opt.id));\n    opt && opt.id != null && idMap.set(opt.id, item);\n    !item.keyInfo && (item.keyInfo = {});\n  }); // Make name and id.\n\n  each(mapResult, function (item, index) {\n    var existCpt = item.exist;\n    var opt = item.option;\n    var keyInfo = item.keyInfo;\n\n    if (!isObject(opt)) {\n      return;\n    } // name can be overwitten. Consider case: axis.name = '20km'.\n    // But id generated by name will not be changed, which affect\n    // only in that case: setOption with 'not merge mode' and view\n    // instance will be recreated, which can be accepted.\n\n\n    keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name // Avoid diffferent series has the same name,\n    // because name may be used like in color pallet.\n    : DUMMY_COMPONENT_NAME_PREFIX + index;\n\n    if (existCpt) {\n      keyInfo.id = existCpt.id;\n    } else if (opt.id != null) {\n      keyInfo.id = opt.id + '';\n    } else {\n      // Consider this situatoin:\n      //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n      //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n      // Series with the same name between optionA and optionB\n      // should be mapped.\n      var idNum = 0;\n\n      do {\n        keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n      } while (idMap.get(keyInfo.id));\n    }\n\n    idMap.set(keyInfo.id, item);\n  });\n}\n\nfunction isNameSpecified(componentModel) {\n  var name = componentModel.name; // Is specified when `indexOf` get -1 or > 0.\n\n  return !!(name && name.indexOf(DUMMY_COMPONENT_NAME_PREFIX));\n}\n/**\n * @public\n * @param {Object} cptOption\n * @return {boolean}\n */\n\n\nfunction isIdInner(cptOption) {\n  return isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n}\n/**\n * A helper for removing duplicate items between batchA and batchB,\n * and in themselves, and categorize by series.\n *\n * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n */\n\n\nfunction compressBatches(batchA, batchB) {\n  var mapA = {};\n  var mapB = {};\n  makeMap(batchA || [], mapA);\n  makeMap(batchB || [], mapB, mapA);\n  return [mapToArray(mapA), mapToArray(mapB)];\n\n  function makeMap(sourceBatch, map, otherMap) {\n    for (var i = 0, len = sourceBatch.length; i < len; i++) {\n      var seriesId = sourceBatch[i].seriesId;\n      var dataIndices = normalizeToArray(sourceBatch[i].dataIndex);\n      var otherDataIndices = otherMap && otherMap[seriesId];\n\n      for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n        var dataIndex = dataIndices[j];\n\n        if (otherDataIndices && otherDataIndices[dataIndex]) {\n          otherDataIndices[dataIndex] = null;\n        } else {\n          (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n        }\n      }\n    }\n  }\n\n  function mapToArray(map, isData) {\n    var result = [];\n\n    for (var i in map) {\n      if (map.hasOwnProperty(i) && map[i] != null) {\n        if (isData) {\n          result.push(+i);\n        } else {\n          var dataIndices = mapToArray(map[i], true);\n          dataIndices.length && result.push({\n            seriesId: i,\n            dataIndex: dataIndices\n          });\n        }\n      }\n    }\n\n    return result;\n  }\n}\n/**\n * @param {module:echarts/data/List} data\n * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n *                         each of which can be Array or primary type.\n * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n */\n\n\nfunction queryDataIndex(data, payload) {\n  if (payload.dataIndexInside != null) {\n    return payload.dataIndexInside;\n  } else if (payload.dataIndex != null) {\n    return zrUtil.isArray(payload.dataIndex) ? zrUtil.map(payload.dataIndex, function (value) {\n      return data.indexOfRawIndex(value);\n    }) : data.indexOfRawIndex(payload.dataIndex);\n  } else if (payload.name != null) {\n    return zrUtil.isArray(payload.name) ? zrUtil.map(payload.name, function (value) {\n      return data.indexOfName(value);\n    }) : data.indexOfName(payload.name);\n  }\n}\n/**\n * Enable property storage to any host object.\n * Notice: Serialization is not supported.\n *\n * For example:\n * var inner = zrUitl.makeInner();\n *\n * function some1(hostObj) {\n *      inner(hostObj).someProperty = 1212;\n *      ...\n * }\n * function some2() {\n *      var fields = inner(this);\n *      fields.someProperty1 = 1212;\n *      fields.someProperty2 = 'xx';\n *      ...\n * }\n *\n * @return {Function}\n */\n\n\nfunction makeInner() {\n  // Consider different scope by es module import.\n  var key = '__\\0ec_inner_' + innerUniqueIndex++ + '_' + Math.random().toFixed(5);\n  return function (hostObj) {\n    return hostObj[key] || (hostObj[key] = {});\n  };\n}\n\nvar innerUniqueIndex = 0;\n/**\n * @param {module:echarts/model/Global} ecModel\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex, seriesId, seriesName,\n *            geoIndex, geoId, geoName,\n *            bmapIndex, bmapId, bmapName,\n *            xAxisIndex, xAxisId, xAxisName,\n *            yAxisIndex, yAxisId, yAxisName,\n *            gridIndex, gridId, gridName,\n *            ... (can be extended)\n *        }\n *        Each properties can be number|string|Array.<number>|Array.<string>\n *        For example, a finder could be\n *        {\n *            seriesIndex: 3,\n *            geoId: ['aa', 'cc'],\n *            gridName: ['xx', 'rr']\n *        }\n *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)\n *        If nothing or null/undefined specified, return nothing.\n * @param {Object} [opt]\n * @param {string} [opt.defaultMainType]\n * @param {Array.<string>} [opt.includeMainTypes]\n * @return {Object} result like:\n *        {\n *            seriesModels: [seriesModel1, seriesModel2],\n *            seriesModel: seriesModel1, // The first model\n *            geoModels: [geoModel1, geoModel2],\n *            geoModel: geoModel1, // The first model\n *            ...\n *        }\n */\n\nfunction parseFinder(ecModel, finder, opt) {\n  if (zrUtil.isString(finder)) {\n    var obj = {};\n    obj[finder + 'Index'] = 0;\n    finder = obj;\n  }\n\n  var defaultMainType = opt && opt.defaultMainType;\n\n  if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {\n    finder[defaultMainType + 'Index'] = 0;\n  }\n\n  var result = {};\n  each(finder, function (value, key) {\n    var value = finder[key]; // Exclude 'dataIndex' and other illgal keys.\n\n    if (key === 'dataIndex' || key === 'dataIndexInside') {\n      result[key] = value;\n      return;\n    }\n\n    var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n    var mainType = parsedKey[1];\n    var queryType = (parsedKey[2] || '').toLowerCase();\n\n    if (!mainType || !queryType || value == null || queryType === 'index' && value === 'none' || opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0) {\n      return;\n    }\n\n    var queryParam = {\n      mainType: mainType\n    };\n\n    if (queryType !== 'index' || value !== 'all') {\n      queryParam[queryType] = value;\n    }\n\n    var models = ecModel.queryComponents(queryParam);\n    result[mainType + 'Models'] = models;\n    result[mainType + 'Model'] = models[0];\n  });\n  return result;\n}\n\nfunction has(obj, prop) {\n  return obj && obj.hasOwnProperty(prop);\n}\n\nfunction setAttribute(dom, key, value) {\n  dom.setAttribute ? dom.setAttribute(key, value) : dom[key] = value;\n}\n\nfunction getAttribute(dom, key) {\n  return dom.getAttribute ? dom.getAttribute(key) : dom[key];\n}\n\nfunction getTooltipRenderMode(renderModeOption) {\n  if (renderModeOption === 'auto') {\n    // Using html when `document` exists, use richText otherwise\n    return env.domSupported ? 'html' : 'richText';\n  } else {\n    return renderModeOption || 'html';\n  }\n}\n/**\n * Group a list by key.\n *\n * @param {Array} array\n * @param {Function} getKey\n *        param {*} Array item\n *        return {string} key\n * @return {Object} Result\n *        {Array}: keys,\n *        {module:zrender/core/util/HashMap} buckets: {key -> Array}\n */\n\n\nfunction groupData(array, getKey) {\n  var buckets = zrUtil.createHashMap();\n  var keys = [];\n  zrUtil.each(array, function (item) {\n    var key = getKey(item);\n    (buckets.get(key) || (keys.push(key), buckets.set(key, []))).push(item);\n  });\n  return {\n    keys: keys,\n    buckets: buckets\n  };\n}\n\nexports.normalizeToArray = normalizeToArray;\nexports.defaultEmphasis = defaultEmphasis;\nexports.TEXT_STYLE_OPTIONS = TEXT_STYLE_OPTIONS;\nexports.getDataItemValue = getDataItemValue;\nexports.isDataItemOption = isDataItemOption;\nexports.mappingToExists = mappingToExists;\nexports.makeIdAndName = makeIdAndName;\nexports.isNameSpecified = isNameSpecified;\nexports.isIdInner = isIdInner;\nexports.compressBatches = compressBatches;\nexports.queryDataIndex = queryDataIndex;\nexports.makeInner = makeInner;\nexports.parseFinder = parseFinder;\nexports.setAttribute = setAttribute;\nexports.getAttribute = getAttribute;\nexports.getTooltipRenderMode = getTooltipRenderMode;\nexports.groupData = groupData;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,sBAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,IAAI,GAAGH,MAAM,CAACG,IAAlB;AACA,IAAIC,QAAQ,GAAGJ,MAAM,CAACI,QAAtB;AACA,IAAIC,OAAO,GAAGL,MAAM,CAACK,OAArB;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,2BAA2B,GAAG,UAAlC;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;EAC/B,OAAOA,KAAK,YAAYC,KAAjB,GAAyBD,KAAzB,GAAiCA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqB,CAACA,KAAD,CAA7D;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,OAAnC,EAA4C;EAC1C;EACA,IAAIF,GAAJ,EAAS;IACPA,GAAG,CAACC,GAAD,CAAH,GAAWD,GAAG,CAACC,GAAD,CAAH,IAAY,EAAvB;IACAD,GAAG,CAACG,QAAJ,GAAeH,GAAG,CAACG,QAAJ,IAAgB,EAA/B;IACAH,GAAG,CAACG,QAAJ,CAAaF,GAAb,IAAoBD,GAAG,CAACG,QAAJ,CAAaF,GAAb,KAAqB,EAAzC,CAHO,CAGsC;;IAE7C,KAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,OAAO,CAACI,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;MAClD,IAAIG,UAAU,GAAGL,OAAO,CAACE,CAAD,CAAxB;;MAEA,IAAI,CAACJ,GAAG,CAACG,QAAJ,CAAaF,GAAb,EAAkBO,cAAlB,CAAiCD,UAAjC,CAAD,IAAiDP,GAAG,CAACC,GAAD,CAAH,CAASO,cAAT,CAAwBD,UAAxB,CAArD,EAA0F;QACxFP,GAAG,CAACG,QAAJ,CAAaF,GAAb,EAAkBM,UAAlB,IAAgCP,GAAG,CAACC,GAAD,CAAH,CAASM,UAAT,CAAhC;MACD;IACF;EACF;AACF;;AAED,IAAIE,kBAAkB,GAAG,CAAC,WAAD,EAAc,YAAd,EAA4B,UAA5B,EAAwC,YAAxC,EAAsD,MAAtD,EAA8D,KAA9D,EAAqE,OAArE,EAA8E,iBAA9E,EAAiG,iBAAjG,EAAoH,OAApH,EAA6H,QAA7H,EAAuI,YAAvI,EAAqJ,OAArJ,EAA8J,eAA9J,EAA+K,UAA/K,EAA2L,aAA3L,EAA0M,YAA1M,EAAwN,eAAxN,EAAyO,eAAzO,EAA0P,iBAA1P,EAA6Q,gBAA7Q,EAA+R,mBAA/R,EAAoT,mBAApT,EAAyU,iBAAzU,EAA4V,aAA5V,EAA2W,aAA3W,EAA0X,cAA1X,EAA0Y,SAA1Y,CAAzB,C,CAA+a;AAC/a;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;EAClC,OAAOlB,QAAQ,CAACkB,QAAD,CAAR,IAAsB,CAACjB,OAAO,CAACiB,QAAD,CAA9B,IAA4C,EAAEA,QAAQ,YAAYC,IAAtB,CAA5C,GAA0ED,QAAQ,CAACd,KAAnF,GAA2Fc,QAAlG;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASE,gBAAT,CAA0BF,QAA1B,EAAoC;EAClC,OAAOlB,QAAQ,CAACkB,QAAD,CAAR,IAAsB,EAAEA,QAAQ,YAAYb,KAAtB,CAA7B,CADkC,CACyB;EAC3D;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASgB,eAAT,CAAyBC,MAAzB,EAAiCC,aAAjC,EAAgD;EAC9C;EACA;EACA;EACA;EACA;EACA;EACAA,aAAa,GAAG,CAACA,aAAa,IAAI,EAAlB,EAAsBC,KAAtB,EAAhB;EACA,IAAIC,MAAM,GAAG7B,MAAM,CAAC8B,GAAP,CAAWJ,MAAM,IAAI,EAArB,EAAyB,UAAUK,GAAV,EAAeC,KAAf,EAAsB;IAC1D,OAAO;MACLC,KAAK,EAAEF;IADF,CAAP;EAGD,CAJY,CAAb,CAR8C,CAY1C;;EAEJ5B,IAAI,CAACwB,aAAD,EAAgB,UAAUO,SAAV,EAAqBF,KAArB,EAA4B;IAC9C,IAAI,CAAC5B,QAAQ,CAAC8B,SAAD,CAAb,EAA0B;MACxB;IACD,CAH6C,CAG5C;;;IAGF,KAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,MAAM,CAACZ,MAA3B,EAAmCF,CAAC,EAApC,EAAwC;MACtC,IAAI,CAACc,MAAM,CAACd,CAAD,CAAN,CAAUoB,MAAX,CAAkB;MAAlB,GACDD,SAAS,CAACE,EAAV,IAAgB,IADf,IACuBP,MAAM,CAACd,CAAD,CAAN,CAAUkB,KAAV,CAAgBG,EAAhB,KAAuBF,SAAS,CAACE,EAAV,GAAe,EADjE,EACqE;QACnEP,MAAM,CAACd,CAAD,CAAN,CAAUoB,MAAV,GAAmBD,SAAnB;QACAP,aAAa,CAACK,KAAD,CAAb,GAAuB,IAAvB;QACA;MACD;IACF;;IAED,KAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,MAAM,CAACZ,MAA3B,EAAmCF,CAAC,EAApC,EAAwC;MACtC,IAAIkB,KAAK,GAAGJ,MAAM,CAACd,CAAD,CAAN,CAAUkB,KAAtB;;MAEA,IAAI,CAACJ,MAAM,CAACd,CAAD,CAAN,CAAUoB,MAAX,CAAkB;MACtB;MADI,IAEAF,KAAK,CAACG,EAAN,IAAY,IAAZ,IAAoBF,SAAS,CAACE,EAAV,IAAgB,IAFpC,KAE6CF,SAAS,CAACG,IAAV,IAAkB,IAF/D,IAEuE,CAACC,SAAS,CAACJ,SAAD,CAFjF,IAEgG,CAACI,SAAS,CAACL,KAAD,CAF1G,IAEqHA,KAAK,CAACI,IAAN,KAAeH,SAAS,CAACG,IAAV,GAAiB,EAFzJ,EAE6J;QAC3JR,MAAM,CAACd,CAAD,CAAN,CAAUoB,MAAV,GAAmBD,SAAnB;QACAP,aAAa,CAACK,KAAD,CAAb,GAAuB,IAAvB;QACA;MACD;IACF;EACF,CA1BG,CAAJ,CAd8C,CAwC1C;;EAEJ7B,IAAI,CAACwB,aAAD,EAAgB,UAAUO,SAAV,EAAqBF,KAArB,EAA4B;IAC9C,IAAI,CAAC5B,QAAQ,CAAC8B,SAAD,CAAb,EAA0B;MACxB;IACD;;IAED,IAAInB,CAAC,GAAG,CAAR;;IAEA,OAAOA,CAAC,GAAGc,MAAM,CAACZ,MAAlB,EAA0BF,CAAC,EAA3B,EAA+B;MAC7B,IAAIkB,KAAK,GAAGJ,MAAM,CAACd,CAAD,CAAN,CAAUkB,KAAtB;;MAEA,IAAI,CAACJ,MAAM,CAACd,CAAD,CAAN,CAAUoB,MAAX,CAAkB;MACtB;MACA;MACA;MAHI,GAID,CAACG,SAAS,CAACL,KAAD,CAJT,CAIiB;MACrB;MACA;MACA;MACA;MARI,GASDC,SAAS,CAACE,EAAV,IAAgB,IATnB,EASyB;QACvBP,MAAM,CAACd,CAAD,CAAN,CAAUoB,MAAV,GAAmBD,SAAnB;QACA;MACD;IACF;;IAED,IAAInB,CAAC,IAAIc,MAAM,CAACZ,MAAhB,EAAwB;MACtBY,MAAM,CAACU,IAAP,CAAY;QACVJ,MAAM,EAAED;MADE,CAAZ;IAGD;EACF,CA9BG,CAAJ;EA+BA,OAAOL,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASW,aAAT,CAAuBC,SAAvB,EAAkC;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,KAAK,GAAG1C,MAAM,CAAC2C,aAAP,EAAZ;EACAxC,IAAI,CAACsC,SAAD,EAAY,UAAUG,IAAV,EAAgBZ,KAAhB,EAAuB;IACrC,IAAIa,QAAQ,GAAGD,IAAI,CAACX,KAApB;IACAY,QAAQ,IAAIH,KAAK,CAACI,GAAN,CAAUD,QAAQ,CAACT,EAAnB,EAAuBQ,IAAvB,CAAZ;EACD,CAHG,CAAJ;EAIAzC,IAAI,CAACsC,SAAD,EAAY,UAAUG,IAAV,EAAgBZ,KAAhB,EAAuB;IACrC,IAAIrB,GAAG,GAAGiC,IAAI,CAACT,MAAf;IACAnC,MAAM,CAAC+C,MAAP,CAAc,CAACpC,GAAD,IAAQA,GAAG,CAACyB,EAAJ,IAAU,IAAlB,IAA0B,CAACM,KAAK,CAACM,GAAN,CAAUrC,GAAG,CAACyB,EAAd,CAA3B,IAAgDM,KAAK,CAACM,GAAN,CAAUrC,GAAG,CAACyB,EAAd,MAAsBQ,IAApF,EAA0F,qBAAqBjC,GAAG,IAAIA,GAAG,CAACyB,EAAhC,CAA1F;IACAzB,GAAG,IAAIA,GAAG,CAACyB,EAAJ,IAAU,IAAjB,IAAyBM,KAAK,CAACI,GAAN,CAAUnC,GAAG,CAACyB,EAAd,EAAkBQ,IAAlB,CAAzB;IACA,CAACA,IAAI,CAACK,OAAN,KAAkBL,IAAI,CAACK,OAAL,GAAe,EAAjC;EACD,CALG,CAAJ,CAfgC,CAoB5B;;EAEJ9C,IAAI,CAACsC,SAAD,EAAY,UAAUG,IAAV,EAAgBZ,KAAhB,EAAuB;IACrC,IAAIa,QAAQ,GAAGD,IAAI,CAACX,KAApB;IACA,IAAItB,GAAG,GAAGiC,IAAI,CAACT,MAAf;IACA,IAAIc,OAAO,GAAGL,IAAI,CAACK,OAAnB;;IAEA,IAAI,CAAC7C,QAAQ,CAACO,GAAD,CAAb,EAAoB;MAClB;IACD,CAPoC,CAOnC;IACF;IACA;IACA;;;IAGAsC,OAAO,CAACZ,IAAR,GAAe1B,GAAG,CAAC0B,IAAJ,IAAY,IAAZ,GAAmB1B,GAAG,CAAC0B,IAAJ,GAAW,EAA9B,GAAmCQ,QAAQ,GAAGA,QAAQ,CAACR,IAAZ,CAAiB;IAC3E;IAD0D,EAExD/B,2BAA2B,GAAG0B,KAFhC;;IAIA,IAAIa,QAAJ,EAAc;MACZI,OAAO,CAACb,EAAR,GAAaS,QAAQ,CAACT,EAAtB;IACD,CAFD,MAEO,IAAIzB,GAAG,CAACyB,EAAJ,IAAU,IAAd,EAAoB;MACzBa,OAAO,CAACb,EAAR,GAAazB,GAAG,CAACyB,EAAJ,GAAS,EAAtB;IACD,CAFM,MAEA;MACL;MACA;MACA;MACA;MACA;MACA,IAAIc,KAAK,GAAG,CAAZ;;MAEA,GAAG;QACDD,OAAO,CAACb,EAAR,GAAa,OAAOa,OAAO,CAACZ,IAAf,GAAsB,IAAtB,GAA6Ba,KAAK,EAA/C;MACD,CAFD,QAESR,KAAK,CAACM,GAAN,CAAUC,OAAO,CAACb,EAAlB,CAFT;IAGD;;IAEDM,KAAK,CAACI,GAAN,CAAUG,OAAO,CAACb,EAAlB,EAAsBQ,IAAtB;EACD,CAnCG,CAAJ;AAoCD;;AAED,SAASO,eAAT,CAAyBC,cAAzB,EAAyC;EACvC,IAAIf,IAAI,GAAGe,cAAc,CAACf,IAA1B,CADuC,CACP;;EAEhC,OAAO,CAAC,EAAEA,IAAI,IAAIA,IAAI,CAACgB,OAAL,CAAa/C,2BAAb,CAAV,CAAR;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASgC,SAAT,CAAmBJ,SAAnB,EAA8B;EAC5B,OAAO9B,QAAQ,CAAC8B,SAAD,CAAR,IAAuBA,SAAS,CAACE,EAAjC,IAAuC,CAACF,SAAS,CAACE,EAAV,GAAe,EAAhB,EAAoBiB,OAApB,CAA4B,UAA5B,MAA4C,CAA1F;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;EACvC,IAAIC,IAAI,GAAG,EAAX;EACA,IAAIC,IAAI,GAAG,EAAX;EACAC,OAAO,CAACJ,MAAM,IAAI,EAAX,EAAeE,IAAf,CAAP;EACAE,OAAO,CAACH,MAAM,IAAI,EAAX,EAAeE,IAAf,EAAqBD,IAArB,CAAP;EACA,OAAO,CAACG,UAAU,CAACH,IAAD,CAAX,EAAmBG,UAAU,CAACF,IAAD,CAA7B,CAAP;;EAEA,SAASC,OAAT,CAAiBE,WAAjB,EAA8B/B,GAA9B,EAAmCgC,QAAnC,EAA6C;IAC3C,KAAK,IAAI/C,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG6C,WAAW,CAAC5C,MAAlC,EAA0CF,CAAC,GAAGC,GAA9C,EAAmDD,CAAC,EAApD,EAAwD;MACtD,IAAIgD,QAAQ,GAAGF,WAAW,CAAC9C,CAAD,CAAX,CAAegD,QAA9B;MACA,IAAIC,WAAW,GAAGzD,gBAAgB,CAACsD,WAAW,CAAC9C,CAAD,CAAX,CAAekD,SAAhB,CAAlC;MACA,IAAIC,gBAAgB,GAAGJ,QAAQ,IAAIA,QAAQ,CAACC,QAAD,CAA3C;;MAEA,KAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGJ,WAAW,CAAC/C,MAAnC,EAA2CkD,CAAC,GAAGC,IAA/C,EAAqDD,CAAC,EAAtD,EAA0D;QACxD,IAAIF,SAAS,GAAGD,WAAW,CAACG,CAAD,CAA3B;;QAEA,IAAID,gBAAgB,IAAIA,gBAAgB,CAACD,SAAD,CAAxC,EAAqD;UACnDC,gBAAgB,CAACD,SAAD,CAAhB,GAA8B,IAA9B;QACD,CAFD,MAEO;UACL,CAACnC,GAAG,CAACiC,QAAD,CAAH,KAAkBjC,GAAG,CAACiC,QAAD,CAAH,GAAgB,EAAlC,CAAD,EAAwCE,SAAxC,IAAqD,CAArD;QACD;MACF;IACF;EACF;;EAED,SAASL,UAAT,CAAoB9B,GAApB,EAAyBuC,MAAzB,EAAiC;IAC/B,IAAIxC,MAAM,GAAG,EAAb;;IAEA,KAAK,IAAId,CAAT,IAAce,GAAd,EAAmB;MACjB,IAAIA,GAAG,CAACX,cAAJ,CAAmBJ,CAAnB,KAAyBe,GAAG,CAACf,CAAD,CAAH,IAAU,IAAvC,EAA6C;QAC3C,IAAIsD,MAAJ,EAAY;UACVxC,MAAM,CAACU,IAAP,CAAY,CAACxB,CAAb;QACD,CAFD,MAEO;UACL,IAAIiD,WAAW,GAAGJ,UAAU,CAAC9B,GAAG,CAACf,CAAD,CAAJ,EAAS,IAAT,CAA5B;UACAiD,WAAW,CAAC/C,MAAZ,IAAsBY,MAAM,CAACU,IAAP,CAAY;YAChCwB,QAAQ,EAAEhD,CADsB;YAEhCkD,SAAS,EAAED;UAFqB,CAAZ,CAAtB;QAID;MACF;IACF;;IAED,OAAOnC,MAAP;EACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASyC,cAAT,CAAwBC,IAAxB,EAA8BC,OAA9B,EAAuC;EACrC,IAAIA,OAAO,CAACC,eAAR,IAA2B,IAA/B,EAAqC;IACnC,OAAOD,OAAO,CAACC,eAAf;EACD,CAFD,MAEO,IAAID,OAAO,CAACP,SAAR,IAAqB,IAAzB,EAA+B;IACpC,OAAOjE,MAAM,CAACK,OAAP,CAAemE,OAAO,CAACP,SAAvB,IAAoCjE,MAAM,CAAC8B,GAAP,CAAW0C,OAAO,CAACP,SAAnB,EAA8B,UAAUzD,KAAV,EAAiB;MACxF,OAAO+D,IAAI,CAACG,eAAL,CAAqBlE,KAArB,CAAP;IACD,CAF0C,CAApC,GAEF+D,IAAI,CAACG,eAAL,CAAqBF,OAAO,CAACP,SAA7B,CAFL;EAGD,CAJM,MAIA,IAAIO,OAAO,CAACnC,IAAR,IAAgB,IAApB,EAA0B;IAC/B,OAAOrC,MAAM,CAACK,OAAP,CAAemE,OAAO,CAACnC,IAAvB,IAA+BrC,MAAM,CAAC8B,GAAP,CAAW0C,OAAO,CAACnC,IAAnB,EAAyB,UAAU7B,KAAV,EAAiB;MAC9E,OAAO+D,IAAI,CAACI,WAAL,CAAiBnE,KAAjB,CAAP;IACD,CAFqC,CAA/B,GAEF+D,IAAI,CAACI,WAAL,CAAiBH,OAAO,CAACnC,IAAzB,CAFL;EAGD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASuC,SAAT,GAAqB;EACnB;EACA,IAAIhE,GAAG,GAAG,kBAAkBiE,gBAAgB,EAAlC,GAAuC,GAAvC,GAA6CC,IAAI,CAACC,MAAL,GAAcC,OAAd,CAAsB,CAAtB,CAAvD;EACA,OAAO,UAAUC,OAAV,EAAmB;IACxB,OAAOA,OAAO,CAACrE,GAAD,CAAP,KAAiBqE,OAAO,CAACrE,GAAD,CAAP,GAAe,EAAhC,CAAP;EACD,CAFD;AAGD;;AAED,IAAIiE,gBAAgB,GAAG,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASK,WAAT,CAAqBC,OAArB,EAA8BC,MAA9B,EAAsCzE,GAAtC,EAA2C;EACzC,IAAIX,MAAM,CAACqF,QAAP,CAAgBD,MAAhB,CAAJ,EAA6B;IAC3B,IAAIrD,GAAG,GAAG,EAAV;IACAA,GAAG,CAACqD,MAAM,GAAG,OAAV,CAAH,GAAwB,CAAxB;IACAA,MAAM,GAAGrD,GAAT;EACD;;EAED,IAAIuD,eAAe,GAAG3E,GAAG,IAAIA,GAAG,CAAC2E,eAAjC;;EAEA,IAAIA,eAAe,IAAI,CAACC,GAAG,CAACH,MAAD,EAASE,eAAe,GAAG,OAA3B,CAAvB,IAA8D,CAACC,GAAG,CAACH,MAAD,EAASE,eAAe,GAAG,IAA3B,CAAlE,IAAsG,CAACC,GAAG,CAACH,MAAD,EAASE,eAAe,GAAG,MAA3B,CAA9G,EAAkJ;IAChJF,MAAM,CAACE,eAAe,GAAG,OAAnB,CAAN,GAAoC,CAApC;EACD;;EAED,IAAIzD,MAAM,GAAG,EAAb;EACA1B,IAAI,CAACiF,MAAD,EAAS,UAAU5E,KAAV,EAAiBI,GAAjB,EAAsB;IACjC,IAAIJ,KAAK,GAAG4E,MAAM,CAACxE,GAAD,CAAlB,CADiC,CACR;;IAEzB,IAAIA,GAAG,KAAK,WAAR,IAAuBA,GAAG,KAAK,iBAAnC,EAAsD;MACpDiB,MAAM,CAACjB,GAAD,CAAN,GAAcJ,KAAd;MACA;IACD;;IAED,IAAIgF,SAAS,GAAG5E,GAAG,CAAC6E,KAAJ,CAAU,wBAAV,KAAuC,EAAvD;IACA,IAAIC,QAAQ,GAAGF,SAAS,CAAC,CAAD,CAAxB;IACA,IAAIG,SAAS,GAAG,CAACH,SAAS,CAAC,CAAD,CAAT,IAAgB,EAAjB,EAAqBI,WAArB,EAAhB;;IAEA,IAAI,CAACF,QAAD,IAAa,CAACC,SAAd,IAA2BnF,KAAK,IAAI,IAApC,IAA4CmF,SAAS,KAAK,OAAd,IAAyBnF,KAAK,KAAK,MAA/E,IAAyFG,GAAG,IAAIA,GAAG,CAACkF,gBAAX,IAA+B7F,MAAM,CAACqD,OAAP,CAAe1C,GAAG,CAACkF,gBAAnB,EAAqCH,QAArC,IAAiD,CAA7K,EAAgL;MAC9K;IACD;;IAED,IAAII,UAAU,GAAG;MACfJ,QAAQ,EAAEA;IADK,CAAjB;;IAIA,IAAIC,SAAS,KAAK,OAAd,IAAyBnF,KAAK,KAAK,KAAvC,EAA8C;MAC5CsF,UAAU,CAACH,SAAD,CAAV,GAAwBnF,KAAxB;IACD;;IAED,IAAIuF,MAAM,GAAGZ,OAAO,CAACa,eAAR,CAAwBF,UAAxB,CAAb;IACAjE,MAAM,CAAC6D,QAAQ,GAAG,QAAZ,CAAN,GAA8BK,MAA9B;IACAlE,MAAM,CAAC6D,QAAQ,GAAG,OAAZ,CAAN,GAA6BK,MAAM,CAAC,CAAD,CAAnC;EACD,CA3BG,CAAJ;EA4BA,OAAOlE,MAAP;AACD;;AAED,SAAS0D,GAAT,CAAaxD,GAAb,EAAkBkE,IAAlB,EAAwB;EACtB,OAAOlE,GAAG,IAAIA,GAAG,CAACZ,cAAJ,CAAmB8E,IAAnB,CAAd;AACD;;AAED,SAASC,YAAT,CAAsBC,GAAtB,EAA2BvF,GAA3B,EAAgCJ,KAAhC,EAAuC;EACrC2F,GAAG,CAACD,YAAJ,GAAmBC,GAAG,CAACD,YAAJ,CAAiBtF,GAAjB,EAAsBJ,KAAtB,CAAnB,GAAkD2F,GAAG,CAACvF,GAAD,CAAH,GAAWJ,KAA7D;AACD;;AAED,SAAS4F,YAAT,CAAsBD,GAAtB,EAA2BvF,GAA3B,EAAgC;EAC9B,OAAOuF,GAAG,CAACC,YAAJ,GAAmBD,GAAG,CAACC,YAAJ,CAAiBxF,GAAjB,CAAnB,GAA2CuF,GAAG,CAACvF,GAAD,CAArD;AACD;;AAED,SAASyF,oBAAT,CAA8BC,gBAA9B,EAAgD;EAC9C,IAAIA,gBAAgB,KAAK,MAAzB,EAAiC;IAC/B;IACA,OAAOpG,GAAG,CAACqG,YAAJ,GAAmB,MAAnB,GAA4B,UAAnC;EACD,CAHD,MAGO;IACL,OAAOD,gBAAgB,IAAI,MAA3B;EACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,SAAT,CAAmBC,KAAnB,EAA0BC,MAA1B,EAAkC;EAChC,IAAIC,OAAO,GAAG3G,MAAM,CAAC2C,aAAP,EAAd;EACA,IAAIiE,IAAI,GAAG,EAAX;EACA5G,MAAM,CAACG,IAAP,CAAYsG,KAAZ,EAAmB,UAAU7D,IAAV,EAAgB;IACjC,IAAIhC,GAAG,GAAG8F,MAAM,CAAC9D,IAAD,CAAhB;IACA,CAAC+D,OAAO,CAAC3D,GAAR,CAAYpC,GAAZ,MAAqBgG,IAAI,CAACrE,IAAL,CAAU3B,GAAV,GAAgB+F,OAAO,CAAC7D,GAAR,CAAYlC,GAAZ,EAAiB,EAAjB,CAArC,CAAD,EAA6D2B,IAA7D,CAAkEK,IAAlE;EACD,CAHD;EAIA,OAAO;IACLgE,IAAI,EAAEA,IADD;IAELD,OAAO,EAAEA;EAFJ,CAAP;AAID;;AAEDE,OAAO,CAACtG,gBAAR,GAA2BA,gBAA3B;AACAsG,OAAO,CAACnG,eAAR,GAA0BA,eAA1B;AACAmG,OAAO,CAACzF,kBAAR,GAA6BA,kBAA7B;AACAyF,OAAO,CAACxF,gBAAR,GAA2BA,gBAA3B;AACAwF,OAAO,CAACrF,gBAAR,GAA2BA,gBAA3B;AACAqF,OAAO,CAACpF,eAAR,GAA0BA,eAA1B;AACAoF,OAAO,CAACrE,aAAR,GAAwBA,aAAxB;AACAqE,OAAO,CAAC1D,eAAR,GAA0BA,eAA1B;AACA0D,OAAO,CAACvE,SAAR,GAAoBA,SAApB;AACAuE,OAAO,CAACvD,eAAR,GAA0BA,eAA1B;AACAuD,OAAO,CAACvC,cAAR,GAAyBA,cAAzB;AACAuC,OAAO,CAACjC,SAAR,GAAoBA,SAApB;AACAiC,OAAO,CAAC3B,WAAR,GAAsBA,WAAtB;AACA2B,OAAO,CAACX,YAAR,GAAuBA,YAAvB;AACAW,OAAO,CAACT,YAAR,GAAuBA,YAAvB;AACAS,OAAO,CAACR,oBAAR,GAA+BA,oBAA/B;AACAQ,OAAO,CAACL,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}