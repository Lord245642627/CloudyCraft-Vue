{"ast":null,"code":"import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\nexport { networkSimplex }; // Expose some internals for testing purposes\n\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\n\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n  var e, f;\n\n  while (e = leaveEdge(t)) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n/*\n * Initializes cut values for all edges in the tree.\n */\n\n\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\n\n\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent; // True if the child is on the tail end of the edge in the directed graph\n\n  var childIsTail = true; // The graph's view of the tree edge we're inspecting\n\n  var graphEdge = g.edge(child, parent); // The accumulated cut value for the edge between this node and its parent\n\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n        other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n          otherWeight = g.edge(e).weight;\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n  visited[v] = true;\n\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w; // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false; // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return flip === isDescendant(t, t.node(edge.v), tailLabel) && flip !== isDescendant(t, t.node(edge.w), tailLabel);\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n        edge = g.edge(v, parent),\n        flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n/*\n * Returns true if the edge is in the tree.\n */\n\n\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\n\n\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}","map":{"version":3,"names":["_","alg","simplify","feasibleTree","longestPath","slack","networkSimplex","initLowLimValues","initCutValues","calcCutValue","leaveEdge","enterEdge","exchangeEdges","g","t","e","f","vs","postorder","nodes","slice","length","forEach","v","assignCutValue","child","childLab","node","parent","edge","cutvalue","childIsTail","graphEdge","cutValue","weight","nodeEdges","isOutEdge","other","w","pointsToHead","otherWeight","isTreeEdge","otherCutValue","tree","root","arguments","dfsAssignLowLim","visited","nextLim","low","label","neighbors","has","lim","find","edges","hasEdge","vLabel","wLabel","tailLabel","flip","candidates","filter","isDescendant","minBy","removeEdge","setEdge","updateRanks","preorder","flipped","rank","minlen","u","rootLabel"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}