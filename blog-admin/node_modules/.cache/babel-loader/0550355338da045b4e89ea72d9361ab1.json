{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The method \"quantile\" was copied from \"d3.js\".\n* (See more details in the comment of the method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the license of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\n\n\nvar RADIAN_EPSILON = 1e-4;\n\nfunction _trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n/**\n * Linear mapping a value from domain to range\n * @memberOf module:echarts/util/number\n * @param  {(number|Array.<number>)} val\n * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n * @param  {boolean} clamp\n * @return {(number|Array.<number>}\n */\n\n\nfunction linearMap(val, domain, range, clamp) {\n  var subDomain = domain[1] - domain[0];\n  var subRange = range[1] - range[0];\n\n  if (subDomain === 0) {\n    return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;\n  } // Avoid accuracy problem in edge, such as\n  // 146.39 - 62.83 === 83.55999999999999.\n  // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n  // It is a little verbose for efficiency considering this method\n  // is a hotspot.\n\n\n  if (clamp) {\n    if (subDomain > 0) {\n      if (val <= domain[0]) {\n        return range[0];\n      } else if (val >= domain[1]) {\n        return range[1];\n      }\n    } else {\n      if (val >= domain[0]) {\n        return range[0];\n      } else if (val <= domain[1]) {\n        return range[1];\n      }\n    }\n  } else {\n    if (val === domain[0]) {\n      return range[0];\n    }\n\n    if (val === domain[1]) {\n      return range[1];\n    }\n  }\n\n  return (val - domain[0]) / subDomain * subRange + range[0];\n}\n/**\n * Convert a percent string to absolute number.\n * Returns NaN if percent is not a valid string or number\n * @memberOf module:echarts/util/number\n * @param {string|number} percent\n * @param {number} all\n * @return {number}\n */\n\n\nfunction parsePercent(percent, all) {\n  switch (percent) {\n    case 'center':\n    case 'middle':\n      percent = '50%';\n      break;\n\n    case 'left':\n    case 'top':\n      percent = '0%';\n      break;\n\n    case 'right':\n    case 'bottom':\n      percent = '100%';\n      break;\n  }\n\n  if (typeof percent === 'string') {\n    if (_trim(percent).match(/%$/)) {\n      return parseFloat(percent) / 100 * all;\n    }\n\n    return parseFloat(percent);\n  }\n\n  return percent == null ? NaN : +percent;\n}\n/**\n * (1) Fix rounding error of float numbers.\n * (2) Support return string to avoid scientific notation like '3.5e-7'.\n *\n * @param {number} x\n * @param {number} [precision]\n * @param {boolean} [returnStr]\n * @return {number|string}\n */\n\n\nfunction round(x, precision, returnStr) {\n  if (precision == null) {\n    precision = 10;\n  } // Avoid range error\n\n\n  precision = Math.min(Math.max(0, precision), 20);\n  x = (+x).toFixed(precision);\n  return returnStr ? x : +x;\n}\n/**\n * asc sort arr.\n * The input arr will be modified.\n *\n * @param {Array} arr\n * @return {Array} The input arr.\n */\n\n\nfunction asc(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  return arr;\n}\n/**\n * Get precision\n * @param {number} val\n */\n\n\nfunction getPrecision(val) {\n  val = +val;\n\n  if (isNaN(val)) {\n    return 0;\n  } // It is much faster than methods converting number to string as follows\n  //      var tmp = val.toString();\n  //      return tmp.length - 1 - tmp.indexOf('.');\n  // especially when precision is low\n\n\n  var e = 1;\n  var count = 0;\n\n  while (Math.round(val * e) / e !== val) {\n    e *= 10;\n    count++;\n  }\n\n  return count;\n}\n/**\n * @param {string|number} val\n * @return {number}\n */\n\n\nfunction getPrecisionSafe(val) {\n  var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'\n\n  var eIndex = str.indexOf('e');\n\n  if (eIndex > 0) {\n    var precision = +str.slice(eIndex + 1);\n    return precision < 0 ? -precision : 0;\n  } else {\n    var dotIndex = str.indexOf('.');\n    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n  }\n}\n/**\n * Minimal dicernible data precisioin according to a single pixel.\n *\n * @param {Array.<number>} dataExtent\n * @param {Array.<number>} pixelExtent\n * @return {number} precision\n */\n\n\nfunction getPixelPrecision(dataExtent, pixelExtent) {\n  var log = Math.log;\n  var LN10 = Math.LN10;\n  var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n  var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.\n\n  var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n  return !isFinite(precision) ? 20 : precision;\n}\n/**\n * Get a data of given precision, assuring the sum of percentages\n * in valueList is 1.\n * The largest remainer method is used.\n * https://en.wikipedia.org/wiki/Largest_remainder_method\n *\n * @param {Array.<number>} valueList a list of all data\n * @param {number} idx index of the data to be processed in valueList\n * @param {number} precision integer number showing digits of precision\n * @return {number} percent ranging from 0 to 100\n */\n\n\nfunction getPercentWithPrecision(valueList, idx, precision) {\n  if (!valueList[idx]) {\n    return 0;\n  }\n\n  var sum = zrUtil.reduce(valueList, function (acc, val) {\n    return acc + (isNaN(val) ? 0 : val);\n  }, 0);\n\n  if (sum === 0) {\n    return 0;\n  }\n\n  var digits = Math.pow(10, precision);\n  var votesPerQuota = zrUtil.map(valueList, function (val) {\n    return (isNaN(val) ? 0 : val) / sum * digits * 100;\n  });\n  var targetSeats = digits * 100;\n  var seats = zrUtil.map(votesPerQuota, function (votes) {\n    // Assign automatic seats.\n    return Math.floor(votes);\n  });\n  var currentSum = zrUtil.reduce(seats, function (acc, val) {\n    return acc + val;\n  }, 0);\n  var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {\n    return votes - seats[idx];\n  }); // Has remainding votes.\n\n  while (currentSum < targetSeats) {\n    // Find next largest remainder.\n    var max = Number.NEGATIVE_INFINITY;\n    var maxId = null;\n\n    for (var i = 0, len = remainder.length; i < len; ++i) {\n      if (remainder[i] > max) {\n        max = remainder[i];\n        maxId = i;\n      }\n    } // Add a vote to max remainder.\n\n\n    ++seats[maxId];\n    remainder[maxId] = 0;\n    ++currentSum;\n  }\n\n  return seats[idx] / digits;\n} // Number.MAX_SAFE_INTEGER, ie do not support.\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * To 0 - 2 * PI, considering negative radian.\n * @param {number} radian\n * @return {number}\n */\n\nfunction remRadian(radian) {\n  var pi2 = Math.PI * 2;\n  return (radian % pi2 + pi2) % pi2;\n}\n/**\n * @param {type} radian\n * @return {boolean}\n */\n\n\nfunction isRadianAroundZero(val) {\n  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n}\n/* eslint-disable */\n\n\nvar TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n/* eslint-enable */\n\n/**\n * @param {string|Date|number} value These values can be accepted:\n *   + An instance of Date, represent a time in its own time zone.\n *   + Or string in a subset of ISO 8601, only including:\n *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n *     all of which will be treated as local time if time zone is not specified\n *     (see <https://momentjs.com/>).\n *   + Or other string format, including (all of which will be treated as loacal time):\n *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n *   + a timestamp, which represent a time in UTC.\n * @return {Date} date\n */\n\nfunction parseDate(value) {\n  if (value instanceof Date) {\n    return value;\n  } else if (typeof value === 'string') {\n    // Different browsers parse date in different way, so we parse it manually.\n    // Some other issues:\n    // new Date('1970-01-01') is UTC,\n    // new Date('1970/01/01') and new Date('1970-1-01') is local.\n    // See issue #3623\n    var match = TIME_REG.exec(value);\n\n    if (!match) {\n      // return Invalid Date.\n      return new Date(NaN);\n    } // Use local time when no timezone offset specifed.\n\n\n    if (!match[8]) {\n      // match[n] can only be string or undefined.\n      // But take care of '12' + 1 => '121'.\n      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);\n    } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,\n    // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).\n    // For example, system timezone is set as \"Time Zone: America/Toronto\",\n    // then these code will get different result:\n    // `new Date(1478411999999).getTimezoneOffset();  // get 240`\n    // `new Date(1478412000000).getTimezoneOffset();  // get 300`\n    // So we should not use `new Date`, but use `Date.UTC`.\n    else {\n      var hour = +match[4] || 0;\n\n      if (match[8].toUpperCase() !== 'Z') {\n        hour -= match[8].slice(0, 3);\n      }\n\n      return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));\n    }\n  } else if (value == null) {\n    return new Date(NaN);\n  }\n\n  return new Date(Math.round(value));\n}\n/**\n * Quantity of a number. e.g. 0.1, 1, 10, 100\n *\n * @param  {number} val\n * @return {number}\n */\n\n\nfunction quantity(val) {\n  return Math.pow(10, quantityExponent(val));\n}\n/**\n * Exponent of the quantity of a number\n * e.g., 1234 equals to 1.234*10^3, so quantityExponent(1234) is 3\n *\n * @param  {number} val non-negative value\n * @return {number}\n */\n\n\nfunction quantityExponent(val) {\n  if (val === 0) {\n    return 0;\n  }\n\n  var exp = Math.floor(Math.log(val) / Math.LN10);\n  /**\n   * exp is expected to be the rounded-down result of the base-10 log of val.\n   * But due to the precision loss with Math.log(val), we need to restore it\n   * using 10^exp to make sure we can get val back from exp. #11249\n   */\n\n  if (val / Math.pow(10, exp) >= 10) {\n    exp++;\n  }\n\n  return exp;\n}\n/**\n * find a “nice” number approximately equal to x. Round the number if round = true,\n * take ceiling if round = false. The primary observation is that the “nicest”\n * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n *\n * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n *\n * @param  {number} val Non-negative value.\n * @param  {boolean} round\n * @return {number}\n */\n\n\nfunction nice(val, round) {\n  var exponent = quantityExponent(val);\n  var exp10 = Math.pow(10, exponent);\n  var f = val / exp10; // 1 <= f < 10\n\n  var nf;\n\n  if (round) {\n    if (f < 1.5) {\n      nf = 1;\n    } else if (f < 2.5) {\n      nf = 2;\n    } else if (f < 4) {\n      nf = 3;\n    } else if (f < 7) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  } else {\n    if (f < 1) {\n      nf = 1;\n    } else if (f < 2) {\n      nf = 2;\n    } else if (f < 3) {\n      nf = 3;\n    } else if (f < 5) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  }\n\n  val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n  // 20 is the uppper bound of toFixed.\n\n  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n}\n/**\n * This code was copied from \"d3.js\"\n * <https://github.com/d3/d3/blob/9cc9a875e636a1dcf36cc1e07bdf77e1ad6e2c74/src/arrays/quantile.js>.\n * See the license statement at the head of this file.\n * @param {Array.<number>} ascArr\n */\n\n\nfunction quantile(ascArr, p) {\n  var H = (ascArr.length - 1) * p + 1;\n  var h = Math.floor(H);\n  var v = +ascArr[h - 1];\n  var e = H - h;\n  return e ? v + e * (ascArr[h] - v) : v;\n}\n/**\n * Order intervals asc, and split them when overlap.\n * expect(numberUtil.reformIntervals([\n *     {interval: [18, 62], close: [1, 1]},\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [1, 1]},\n *     {interval: [62, 150], close: [1, 1]},\n *     {interval: [106, 150], close: [1, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ])).toEqual([\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [0, 1]},\n *     {interval: [18, 62], close: [0, 1]},\n *     {interval: [62, 150], close: [0, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ]);\n * @param {Array.<Object>} list, where `close` mean open or close\n *        of the interval, and Infinity can be used.\n * @return {Array.<Object>} The origin list, which has been reformed.\n */\n\n\nfunction reformIntervals(list) {\n  list.sort(function (a, b) {\n    return littleThan(a, b, 0) ? -1 : 1;\n  });\n  var curr = -Infinity;\n  var currClose = 1;\n\n  for (var i = 0; i < list.length;) {\n    var interval = list[i].interval;\n    var close = list[i].close;\n\n    for (var lg = 0; lg < 2; lg++) {\n      if (interval[lg] <= curr) {\n        interval[lg] = curr;\n        close[lg] = !lg ? 1 - currClose : 1;\n      }\n\n      curr = interval[lg];\n      currClose = close[lg];\n    }\n\n    if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n      list.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n\n  return list;\n\n  function littleThan(a, b, lg) {\n    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));\n  }\n}\n/**\n * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n * subtraction forces infinities to NaN\n *\n * @param {*} v\n * @return {boolean}\n */\n\n\nfunction isNumeric(v) {\n  return v - parseFloat(v) >= 0;\n}\n\nexports.linearMap = linearMap;\nexports.parsePercent = parsePercent;\nexports.round = round;\nexports.asc = asc;\nexports.getPrecision = getPrecision;\nexports.getPrecisionSafe = getPrecisionSafe;\nexports.getPixelPrecision = getPixelPrecision;\nexports.getPercentWithPrecision = getPercentWithPrecision;\nexports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nexports.remRadian = remRadian;\nexports.isRadianAroundZero = isRadianAroundZero;\nexports.parseDate = parseDate;\nexports.quantity = quantity;\nexports.quantityExponent = quantityExponent;\nexports.nice = nice;\nexports.quantile = quantile;\nexports.reformIntervals = reformIntervals;\nexports.isNumeric = isNumeric;","map":{"version":3,"names":["zrUtil","require","RADIAN_EPSILON","_trim","str","replace","linearMap","val","domain","range","clamp","subDomain","subRange","parsePercent","percent","all","match","parseFloat","NaN","round","x","precision","returnStr","Math","min","max","toFixed","asc","arr","sort","a","b","getPrecision","isNaN","e","count","getPrecisionSafe","toString","eIndex","indexOf","slice","dotIndex","length","getPixelPrecision","dataExtent","pixelExtent","log","LN10","dataQuantity","floor","sizeQuantity","abs","isFinite","getPercentWithPrecision","valueList","idx","sum","reduce","acc","digits","pow","votesPerQuota","map","targetSeats","seats","votes","currentSum","remainder","Number","NEGATIVE_INFINITY","maxId","i","len","MAX_SAFE_INTEGER","remRadian","radian","pi2","PI","isRadianAroundZero","TIME_REG","parseDate","value","Date","exec","hour","toUpperCase","UTC","quantity","quantityExponent","exp","nice","exponent","exp10","f","nf","quantile","ascArr","p","H","h","v","reformIntervals","list","littleThan","curr","Infinity","currClose","interval","close","lg","splice","isNumeric","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-admin/node_modules/echarts/lib/util/number.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The method \"quantile\" was copied from \"d3.js\".\n* (See more details in the comment of the method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the license of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\nvar RADIAN_EPSILON = 1e-4;\n\nfunction _trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n/**\n * Linear mapping a value from domain to range\n * @memberOf module:echarts/util/number\n * @param  {(number|Array.<number>)} val\n * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n * @param  {boolean} clamp\n * @return {(number|Array.<number>}\n */\n\n\nfunction linearMap(val, domain, range, clamp) {\n  var subDomain = domain[1] - domain[0];\n  var subRange = range[1] - range[0];\n\n  if (subDomain === 0) {\n    return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;\n  } // Avoid accuracy problem in edge, such as\n  // 146.39 - 62.83 === 83.55999999999999.\n  // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n  // It is a little verbose for efficiency considering this method\n  // is a hotspot.\n\n\n  if (clamp) {\n    if (subDomain > 0) {\n      if (val <= domain[0]) {\n        return range[0];\n      } else if (val >= domain[1]) {\n        return range[1];\n      }\n    } else {\n      if (val >= domain[0]) {\n        return range[0];\n      } else if (val <= domain[1]) {\n        return range[1];\n      }\n    }\n  } else {\n    if (val === domain[0]) {\n      return range[0];\n    }\n\n    if (val === domain[1]) {\n      return range[1];\n    }\n  }\n\n  return (val - domain[0]) / subDomain * subRange + range[0];\n}\n/**\n * Convert a percent string to absolute number.\n * Returns NaN if percent is not a valid string or number\n * @memberOf module:echarts/util/number\n * @param {string|number} percent\n * @param {number} all\n * @return {number}\n */\n\n\nfunction parsePercent(percent, all) {\n  switch (percent) {\n    case 'center':\n    case 'middle':\n      percent = '50%';\n      break;\n\n    case 'left':\n    case 'top':\n      percent = '0%';\n      break;\n\n    case 'right':\n    case 'bottom':\n      percent = '100%';\n      break;\n  }\n\n  if (typeof percent === 'string') {\n    if (_trim(percent).match(/%$/)) {\n      return parseFloat(percent) / 100 * all;\n    }\n\n    return parseFloat(percent);\n  }\n\n  return percent == null ? NaN : +percent;\n}\n/**\n * (1) Fix rounding error of float numbers.\n * (2) Support return string to avoid scientific notation like '3.5e-7'.\n *\n * @param {number} x\n * @param {number} [precision]\n * @param {boolean} [returnStr]\n * @return {number|string}\n */\n\n\nfunction round(x, precision, returnStr) {\n  if (precision == null) {\n    precision = 10;\n  } // Avoid range error\n\n\n  precision = Math.min(Math.max(0, precision), 20);\n  x = (+x).toFixed(precision);\n  return returnStr ? x : +x;\n}\n/**\n * asc sort arr.\n * The input arr will be modified.\n *\n * @param {Array} arr\n * @return {Array} The input arr.\n */\n\n\nfunction asc(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  return arr;\n}\n/**\n * Get precision\n * @param {number} val\n */\n\n\nfunction getPrecision(val) {\n  val = +val;\n\n  if (isNaN(val)) {\n    return 0;\n  } // It is much faster than methods converting number to string as follows\n  //      var tmp = val.toString();\n  //      return tmp.length - 1 - tmp.indexOf('.');\n  // especially when precision is low\n\n\n  var e = 1;\n  var count = 0;\n\n  while (Math.round(val * e) / e !== val) {\n    e *= 10;\n    count++;\n  }\n\n  return count;\n}\n/**\n * @param {string|number} val\n * @return {number}\n */\n\n\nfunction getPrecisionSafe(val) {\n  var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'\n\n  var eIndex = str.indexOf('e');\n\n  if (eIndex > 0) {\n    var precision = +str.slice(eIndex + 1);\n    return precision < 0 ? -precision : 0;\n  } else {\n    var dotIndex = str.indexOf('.');\n    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n  }\n}\n/**\n * Minimal dicernible data precisioin according to a single pixel.\n *\n * @param {Array.<number>} dataExtent\n * @param {Array.<number>} pixelExtent\n * @return {number} precision\n */\n\n\nfunction getPixelPrecision(dataExtent, pixelExtent) {\n  var log = Math.log;\n  var LN10 = Math.LN10;\n  var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n  var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.\n\n  var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n  return !isFinite(precision) ? 20 : precision;\n}\n/**\n * Get a data of given precision, assuring the sum of percentages\n * in valueList is 1.\n * The largest remainer method is used.\n * https://en.wikipedia.org/wiki/Largest_remainder_method\n *\n * @param {Array.<number>} valueList a list of all data\n * @param {number} idx index of the data to be processed in valueList\n * @param {number} precision integer number showing digits of precision\n * @return {number} percent ranging from 0 to 100\n */\n\n\nfunction getPercentWithPrecision(valueList, idx, precision) {\n  if (!valueList[idx]) {\n    return 0;\n  }\n\n  var sum = zrUtil.reduce(valueList, function (acc, val) {\n    return acc + (isNaN(val) ? 0 : val);\n  }, 0);\n\n  if (sum === 0) {\n    return 0;\n  }\n\n  var digits = Math.pow(10, precision);\n  var votesPerQuota = zrUtil.map(valueList, function (val) {\n    return (isNaN(val) ? 0 : val) / sum * digits * 100;\n  });\n  var targetSeats = digits * 100;\n  var seats = zrUtil.map(votesPerQuota, function (votes) {\n    // Assign automatic seats.\n    return Math.floor(votes);\n  });\n  var currentSum = zrUtil.reduce(seats, function (acc, val) {\n    return acc + val;\n  }, 0);\n  var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {\n    return votes - seats[idx];\n  }); // Has remainding votes.\n\n  while (currentSum < targetSeats) {\n    // Find next largest remainder.\n    var max = Number.NEGATIVE_INFINITY;\n    var maxId = null;\n\n    for (var i = 0, len = remainder.length; i < len; ++i) {\n      if (remainder[i] > max) {\n        max = remainder[i];\n        maxId = i;\n      }\n    } // Add a vote to max remainder.\n\n\n    ++seats[maxId];\n    remainder[maxId] = 0;\n    ++currentSum;\n  }\n\n  return seats[idx] / digits;\n} // Number.MAX_SAFE_INTEGER, ie do not support.\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * To 0 - 2 * PI, considering negative radian.\n * @param {number} radian\n * @return {number}\n */\n\nfunction remRadian(radian) {\n  var pi2 = Math.PI * 2;\n  return (radian % pi2 + pi2) % pi2;\n}\n/**\n * @param {type} radian\n * @return {boolean}\n */\n\n\nfunction isRadianAroundZero(val) {\n  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n}\n/* eslint-disable */\n\n\nvar TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n/* eslint-enable */\n\n/**\n * @param {string|Date|number} value These values can be accepted:\n *   + An instance of Date, represent a time in its own time zone.\n *   + Or string in a subset of ISO 8601, only including:\n *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n *     all of which will be treated as local time if time zone is not specified\n *     (see <https://momentjs.com/>).\n *   + Or other string format, including (all of which will be treated as loacal time):\n *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n *   + a timestamp, which represent a time in UTC.\n * @return {Date} date\n */\n\nfunction parseDate(value) {\n  if (value instanceof Date) {\n    return value;\n  } else if (typeof value === 'string') {\n    // Different browsers parse date in different way, so we parse it manually.\n    // Some other issues:\n    // new Date('1970-01-01') is UTC,\n    // new Date('1970/01/01') and new Date('1970-1-01') is local.\n    // See issue #3623\n    var match = TIME_REG.exec(value);\n\n    if (!match) {\n      // return Invalid Date.\n      return new Date(NaN);\n    } // Use local time when no timezone offset specifed.\n\n\n    if (!match[8]) {\n      // match[n] can only be string or undefined.\n      // But take care of '12' + 1 => '121'.\n      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);\n    } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,\n    // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).\n    // For example, system timezone is set as \"Time Zone: America/Toronto\",\n    // then these code will get different result:\n    // `new Date(1478411999999).getTimezoneOffset();  // get 240`\n    // `new Date(1478412000000).getTimezoneOffset();  // get 300`\n    // So we should not use `new Date`, but use `Date.UTC`.\n    else {\n        var hour = +match[4] || 0;\n\n        if (match[8].toUpperCase() !== 'Z') {\n          hour -= match[8].slice(0, 3);\n        }\n\n        return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));\n      }\n  } else if (value == null) {\n    return new Date(NaN);\n  }\n\n  return new Date(Math.round(value));\n}\n/**\n * Quantity of a number. e.g. 0.1, 1, 10, 100\n *\n * @param  {number} val\n * @return {number}\n */\n\n\nfunction quantity(val) {\n  return Math.pow(10, quantityExponent(val));\n}\n/**\n * Exponent of the quantity of a number\n * e.g., 1234 equals to 1.234*10^3, so quantityExponent(1234) is 3\n *\n * @param  {number} val non-negative value\n * @return {number}\n */\n\n\nfunction quantityExponent(val) {\n  if (val === 0) {\n    return 0;\n  }\n\n  var exp = Math.floor(Math.log(val) / Math.LN10);\n  /**\n   * exp is expected to be the rounded-down result of the base-10 log of val.\n   * But due to the precision loss with Math.log(val), we need to restore it\n   * using 10^exp to make sure we can get val back from exp. #11249\n   */\n\n  if (val / Math.pow(10, exp) >= 10) {\n    exp++;\n  }\n\n  return exp;\n}\n/**\n * find a “nice” number approximately equal to x. Round the number if round = true,\n * take ceiling if round = false. The primary observation is that the “nicest”\n * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n *\n * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n *\n * @param  {number} val Non-negative value.\n * @param  {boolean} round\n * @return {number}\n */\n\n\nfunction nice(val, round) {\n  var exponent = quantityExponent(val);\n  var exp10 = Math.pow(10, exponent);\n  var f = val / exp10; // 1 <= f < 10\n\n  var nf;\n\n  if (round) {\n    if (f < 1.5) {\n      nf = 1;\n    } else if (f < 2.5) {\n      nf = 2;\n    } else if (f < 4) {\n      nf = 3;\n    } else if (f < 7) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  } else {\n    if (f < 1) {\n      nf = 1;\n    } else if (f < 2) {\n      nf = 2;\n    } else if (f < 3) {\n      nf = 3;\n    } else if (f < 5) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  }\n\n  val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n  // 20 is the uppper bound of toFixed.\n\n  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n}\n/**\n * This code was copied from \"d3.js\"\n * <https://github.com/d3/d3/blob/9cc9a875e636a1dcf36cc1e07bdf77e1ad6e2c74/src/arrays/quantile.js>.\n * See the license statement at the head of this file.\n * @param {Array.<number>} ascArr\n */\n\n\nfunction quantile(ascArr, p) {\n  var H = (ascArr.length - 1) * p + 1;\n  var h = Math.floor(H);\n  var v = +ascArr[h - 1];\n  var e = H - h;\n  return e ? v + e * (ascArr[h] - v) : v;\n}\n/**\n * Order intervals asc, and split them when overlap.\n * expect(numberUtil.reformIntervals([\n *     {interval: [18, 62], close: [1, 1]},\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [1, 1]},\n *     {interval: [62, 150], close: [1, 1]},\n *     {interval: [106, 150], close: [1, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ])).toEqual([\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [0, 1]},\n *     {interval: [18, 62], close: [0, 1]},\n *     {interval: [62, 150], close: [0, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ]);\n * @param {Array.<Object>} list, where `close` mean open or close\n *        of the interval, and Infinity can be used.\n * @return {Array.<Object>} The origin list, which has been reformed.\n */\n\n\nfunction reformIntervals(list) {\n  list.sort(function (a, b) {\n    return littleThan(a, b, 0) ? -1 : 1;\n  });\n  var curr = -Infinity;\n  var currClose = 1;\n\n  for (var i = 0; i < list.length;) {\n    var interval = list[i].interval;\n    var close = list[i].close;\n\n    for (var lg = 0; lg < 2; lg++) {\n      if (interval[lg] <= curr) {\n        interval[lg] = curr;\n        close[lg] = !lg ? 1 - currClose : 1;\n      }\n\n      curr = interval[lg];\n      currClose = close[lg];\n    }\n\n    if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n      list.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n\n  return list;\n\n  function littleThan(a, b, lg) {\n    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));\n  }\n}\n/**\n * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n * subtraction forces infinities to NaN\n *\n * @param {*} v\n * @return {boolean}\n */\n\n\nfunction isNumeric(v) {\n  return v - parseFloat(v) >= 0;\n}\n\nexports.linearMap = linearMap;\nexports.parsePercent = parsePercent;\nexports.round = round;\nexports.asc = asc;\nexports.getPrecision = getPrecision;\nexports.getPrecisionSafe = getPrecisionSafe;\nexports.getPixelPrecision = getPixelPrecision;\nexports.getPercentWithPrecision = getPercentWithPrecision;\nexports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nexports.remRadian = remRadian;\nexports.isRadianAroundZero = isRadianAroundZero;\nexports.parseDate = parseDate;\nexports.quantity = quantity;\nexports.quantityExponent = quantityExponent;\nexports.nice = nice;\nexports.quantile = quantile;\nexports.reformIntervals = reformIntervals;\nexports.isNumeric = isNumeric;"],"mappings":"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"},"metadata":{},"sourceType":"script"}