{"ast":null,"code":"/* IMPORT */\nimport _ from '../utils/index.js';\nimport Hex from './hex.js';\nimport HSL from './hsl.js';\nimport Keyword from './keyword.js';\nimport RGB from './rgb.js';\nimport { TYPE } from '../constants.js';\n/* MAIN */\n\nconst Color = {\n  /* VARIABLES */\n  format: {\n    keyword: Keyword,\n    hex: Hex,\n    rgb: RGB,\n    rgba: RGB,\n    hsl: HSL,\n    hsla: HSL\n  },\n\n  /* API */\n  parse: color => {\n    if (typeof color !== 'string') return color;\n    const channels = Hex.parse(color) || RGB.parse(color) || HSL.parse(color) || Keyword.parse(color); // Color providers ordered with performance in mind\n\n    if (channels) return channels;\n    throw new Error(`Unsupported color format: \"${color}\"`);\n  },\n  stringify: channels => {\n    // SASS returns a keyword if possible, but we avoid doing that as it's slower and doesn't really add any value\n    if (!channels.changed && channels.color) return channels.color;\n\n    if (channels.type.is(TYPE.HSL) || channels.data.r === undefined) {\n      return HSL.stringify(channels);\n    } else if (channels.a < 1 || !Number.isInteger(channels.r) || !Number.isInteger(channels.g) || !Number.isInteger(channels.b)) {\n      return RGB.stringify(channels);\n    } else {\n      return Hex.stringify(channels);\n    }\n  }\n};\n/* EXPORT */\n\nexport default Color;","map":null,"metadata":{},"sourceType":"module"}