{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar makeInner = _model.makeInner;\n\nvar modelHelper = require(\"./modelHelper\");\n\nvar findPointFromSeries = require(\"./findPointFromSeries\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar each = zrUtil.each;\nvar curry = zrUtil.curry;\nvar inner = makeInner();\n/**\n * Basic logic: check all axis, if they do not demand show/highlight,\n * then hide/downplay them.\n *\n * @param {Object} coordSysAxesInfo\n * @param {Object} payload\n * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'\n * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to\n *              trigger axisPointer and tooltip.\n * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to\n *              trigger axisPointer and tooltip.\n * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.\n * @param {Object} [payload.dataIndex] finder, restrict target axes.\n * @param {Object} [payload.axesInfo] finder, restrict target axes.\n *        [{\n *          axisDim: 'x'|'y'|'angle'|...,\n *          axisIndex: ...,\n *          value: ...\n *        }, ...]\n * @param {Function} [payload.dispatchAction]\n * @param {Object} [payload.tooltipOption]\n * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,\n *        which can be specified in dispatchAction\n * @param {module:echarts/model/Global} ecModel\n * @param {module:echarts/ExtensionAPI} api\n * @return {Object} content of event obj for echarts.connect.\n */\n\nfunction _default(payload, ecModel, api) {\n  var currTrigger = payload.currTrigger;\n  var point = [payload.x, payload.y];\n  var finder = payload;\n  var dispatchAction = payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n  var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending\n  // See #6121. But we are not able to reproduce it yet.\n\n  if (!coordSysAxesInfo) {\n    return;\n  }\n\n  if (illegalPoint(point)) {\n    // Used in the default behavior of `connection`: use the sample seriesIndex\n    // and dataIndex. And also used in the tooltipView trigger.\n    point = findPointFromSeries({\n      seriesIndex: finder.seriesIndex,\n      // Do not use dataIndexInside from other ec instance.\n      // FIXME: auto detect it?\n      dataIndex: finder.dataIndex\n    }, ecModel).point;\n  }\n\n  var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n  // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n  // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n  // and dataIndex.\n\n  var inputAxesInfo = finder.axesInfo;\n  var axesInfo = coordSysAxesInfo.axesInfo;\n  var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n  var outputFinder = {};\n  var showValueMap = {};\n  var dataByCoordSys = {\n    list: [],\n    map: {}\n  };\n  var updaters = {\n    showPointer: curry(showPointer, showValueMap),\n    showTooltip: curry(showTooltip, dataByCoordSys)\n  }; // Process for triggered axes.\n\n  each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n    // If a point given, it must be contained by the coordinate system.\n    var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n    each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n      var axis = axisInfo.axis;\n      var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.\n\n      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n        var val = inputAxisInfo && inputAxisInfo.value;\n\n        if (val == null && !isIllegalPoint) {\n          val = axis.pointToData(point);\n        }\n\n        val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);\n      }\n    });\n  }); // Process for linked axes.\n\n  var linkTriggers = {};\n  each(axesInfo, function (tarAxisInfo, tarKey) {\n    var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.\n\n    if (linkGroup && !showValueMap[tarKey]) {\n      each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n        var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.\n\n        if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n          var val = srcValItem.value;\n          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));\n          linkTriggers[tarAxisInfo.key] = val;\n        }\n      });\n    }\n  });\n  each(linkTriggers, function (val, tarKey) {\n    processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);\n  });\n  updateModelActually(showValueMap, axesInfo, outputFinder);\n  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);\n  dispatchHighDownActually(axesInfo, dispatchAction, api);\n  return outputFinder;\n}\n\nfunction processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {\n  var axis = axisInfo.axis;\n\n  if (axis.scale.isBlank() || !axis.containData(newValue)) {\n    return;\n  }\n\n  if (!axisInfo.involveSeries) {\n    updaters.showPointer(axisInfo, newValue);\n    return;\n  } // Heavy calculation. So put it after axis.containData checking.\n\n\n  var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n  var payloadBatch = payloadInfo.payloadBatch;\n  var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.\n  // By default use the first involved series data as a sample to connect.\n\n  if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n    zrUtil.extend(outputFinder, payloadBatch[0]);\n  } // If no linkSource input, this process is for collecting link\n  // target, where snap should not be accepted.\n\n\n  if (!dontSnap && axisInfo.snap) {\n    if (axis.containData(snapToValue) && snapToValue != null) {\n      newValue = snapToValue;\n    }\n  }\n\n  updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder); // Tooltip should always be snapToValue, otherwise there will be\n  // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n\n  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n}\n\nfunction buildPayloadsBySeries(value, axisInfo) {\n  var axis = axisInfo.axis;\n  var dim = axis.dim;\n  var snapToValue = value;\n  var payloadBatch = [];\n  var minDist = Number.MAX_VALUE;\n  var minDiff = -1;\n  each(axisInfo.seriesModels, function (series, idx) {\n    var dataDim = series.getData().mapDimension(dim, true);\n    var seriesNestestValue;\n    var dataIndices;\n\n    if (series.getAxisTooltipData) {\n      var result = series.getAxisTooltipData(dataDim, value, axis);\n      dataIndices = result.dataIndices;\n      seriesNestestValue = result.nestestValue;\n    } else {\n      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex\n      // when data length is not same.\n      // false,\n      axis.type === 'category' ? 0.5 : null);\n\n      if (!dataIndices.length) {\n        return;\n      }\n\n      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n    }\n\n    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n      return;\n    }\n\n    var diff = value - seriesNestestValue;\n    var dist = Math.abs(diff); // Consider category case\n\n    if (dist <= minDist) {\n      if (dist < minDist || diff >= 0 && minDiff < 0) {\n        minDist = dist;\n        minDiff = diff;\n        snapToValue = seriesNestestValue;\n        payloadBatch.length = 0;\n      }\n\n      each(dataIndices, function (dataIndex) {\n        payloadBatch.push({\n          seriesIndex: series.seriesIndex,\n          dataIndexInside: dataIndex,\n          dataIndex: series.getData().getRawIndex(dataIndex)\n        });\n      });\n    }\n  });\n  return {\n    payloadBatch: payloadBatch,\n    snapToValue: snapToValue\n  };\n}\n\nfunction showPointer(showValueMap, axisInfo, value, payloadBatch) {\n  showValueMap[axisInfo.key] = {\n    value: value,\n    payloadBatch: payloadBatch\n  };\n}\n\nfunction showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n  var payloadBatch = payloadInfo.payloadBatch;\n  var axis = axisInfo.axis;\n  var axisModel = axis.model;\n  var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,\n  // whose length will be used to judge whether dispatch action.\n\n  if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n    return;\n  }\n\n  var coordSysModel = axisInfo.coordSys.model;\n  var coordSysKey = modelHelper.makeKey(coordSysModel);\n  var coordSysItem = dataByCoordSys.map[coordSysKey];\n\n  if (!coordSysItem) {\n    coordSysItem = dataByCoordSys.map[coordSysKey] = {\n      coordSysId: coordSysModel.id,\n      coordSysIndex: coordSysModel.componentIndex,\n      coordSysType: coordSysModel.type,\n      coordSysMainType: coordSysModel.mainType,\n      dataByAxis: []\n    };\n    dataByCoordSys.list.push(coordSysItem);\n  }\n\n  coordSysItem.dataByAxis.push({\n    axisDim: axis.dim,\n    axisIndex: axisModel.componentIndex,\n    axisType: axisModel.type,\n    axisId: axisModel.id,\n    value: value,\n    // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n    // depends that all models have been updated. So it should not be performed\n    // here. Considering axisPointerModel used here is volatile, which is hard\n    // to be retrieve in TooltipView, we prepare parameters here.\n    valueLabelOpt: {\n      precision: axisPointerModel.get('label.precision'),\n      formatter: axisPointerModel.get('label.formatter')\n    },\n    seriesDataIndices: payloadBatch.slice()\n  });\n}\n\nfunction updateModelActually(showValueMap, axesInfo, outputFinder) {\n  var outputAxesInfo = outputFinder.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    var valItem = showValueMap[key];\n\n    if (valItem) {\n      !axisInfo.useHandle && (option.status = 'show');\n      option.value = valItem.value; // For label formatter param and highlight.\n\n      option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n    } // When always show (e.g., handle used), remain\n    // original value and status.\n    else {\n      // If hide, value still need to be set, consider\n      // click legend to toggle axis blank.\n      !axisInfo.useHandle && (option.status = 'hide');\n    } // If status is 'hide', should be no info in payload.\n\n\n    option.status === 'show' && outputAxesInfo.push({\n      axisDim: axisInfo.axis.dim,\n      axisIndex: axisInfo.axis.model.componentIndex,\n      value: option.value\n    });\n  });\n}\n\nfunction dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {\n  // Basic logic: If no showTip required, hideTip will be dispatched.\n  if (illegalPoint(point) || !dataByCoordSys.list.length) {\n    dispatchAction({\n      type: 'hideTip'\n    });\n    return;\n  } // In most case only one axis (or event one series is used). It is\n  // convinient to fetch payload.seriesIndex and payload.dataIndex\n  // dirtectly. So put the first seriesIndex and dataIndex of the first\n  // axis on the payload.\n\n\n  var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n  dispatchAction({\n    type: 'showTip',\n    escapeConnect: true,\n    x: point[0],\n    y: point[1],\n    tooltipOption: payload.tooltipOption,\n    position: payload.position,\n    dataIndexInside: sampleItem.dataIndexInside,\n    dataIndex: sampleItem.dataIndex,\n    seriesIndex: sampleItem.seriesIndex,\n    dataByCoordSys: dataByCoordSys.list\n  });\n}\n\nfunction dispatchHighDownActually(axesInfo, dispatchAction, api) {\n  // FIXME\n  // highlight status modification shoule be a stage of main process?\n  // (Consider confilct (e.g., legend and axisPointer) and setOption)\n  var zr = api.getZr();\n  var highDownKey = 'axisPointerLastHighlights';\n  var lastHighlights = inner(zr)[highDownKey] || {};\n  var newHighlights = inner(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.\n  // Build hash map and remove duplicate incidentally.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {\n      var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n      newHighlights[key] = batchItem;\n    });\n  }); // Diff.\n\n  var toHighlight = [];\n  var toDownplay = [];\n  zrUtil.each(lastHighlights, function (batchItem, key) {\n    !newHighlights[key] && toDownplay.push(batchItem);\n  });\n  zrUtil.each(newHighlights, function (batchItem, key) {\n    !lastHighlights[key] && toHighlight.push(batchItem);\n  });\n  toDownplay.length && api.dispatchAction({\n    type: 'downplay',\n    escapeConnect: true,\n    batch: toDownplay\n  });\n  toHighlight.length && api.dispatchAction({\n    type: 'highlight',\n    escapeConnect: true,\n    batch: toHighlight\n  });\n}\n\nfunction findInputAxisInfo(inputAxesInfo, axisInfo) {\n  for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n    var inputAxisInfo = inputAxesInfo[i];\n\n    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {\n      return inputAxisInfo;\n    }\n  }\n}\n\nfunction makeMapperParam(axisInfo) {\n  var axisModel = axisInfo.axis.model;\n  var item = {};\n  var dim = item.axisDim = axisInfo.axis.dim;\n  item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n  item.axisName = item[dim + 'AxisName'] = axisModel.name;\n  item.axisId = item[dim + 'AxisId'] = axisModel.id;\n  return item;\n}\n\nfunction illegalPoint(point) {\n  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n}\n\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","_model","makeInner","modelHelper","findPointFromSeries","each","curry","inner","_default","payload","ecModel","api","currTrigger","point","x","y","finder","dispatchAction","bind","coordSysAxesInfo","getComponent","illegalPoint","seriesIndex","dataIndex","isIllegalPoint","inputAxesInfo","axesInfo","shouldHide","outputFinder","showValueMap","dataByCoordSys","list","map","updaters","showPointer","showTooltip","coordSysMap","coordSys","coordSysKey","coordSysContainsPoint","containPoint","axisInfo","key","axis","inputAxisInfo","findInputAxisInfo","val","value","pointToData","processOnAxis","linkTriggers","tarAxisInfo","tarKey","linkGroup","srcAxisInfo","srcKey","srcValItem","mapper","scale","parse","makeMapperParam","updateModelActually","dispatchTooltipActually","dispatchHighDownActually","newValue","dontSnap","isBlank","containData","involveSeries","payloadInfo","buildPayloadsBySeries","payloadBatch","snapToValue","extend","snap","dim","minDist","Number","MAX_VALUE","minDiff","seriesModels","series","idx","dataDim","getData","mapDimension","seriesNestestValue","dataIndices","getAxisTooltipData","result","nestestValue","indicesOfNearest","type","length","get","isFinite","diff","dist","Math","abs","push","dataIndexInside","getRawIndex","axisModel","model","axisPointerModel","triggerTooltip","coordSysModel","makeKey","coordSysItem","coordSysId","id","coordSysIndex","componentIndex","coordSysType","coordSysMainType","mainType","dataByAxis","axisDim","axisIndex","axisType","axisId","valueLabelOpt","precision","formatter","seriesDataIndices","slice","outputAxesInfo","option","valItem","useHandle","status","sampleItem","escapeConnect","tooltipOption","position","zr","getZr","highDownKey","lastHighlights","newHighlights","batchItem","toHighlight","toDownplay","batch","i","item","axisName","name","isNaN","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/component/axisPointer/axisTrigger.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar makeInner = _model.makeInner;\n\nvar modelHelper = require(\"./modelHelper\");\n\nvar findPointFromSeries = require(\"./findPointFromSeries\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar each = zrUtil.each;\nvar curry = zrUtil.curry;\nvar inner = makeInner();\n/**\n * Basic logic: check all axis, if they do not demand show/highlight,\n * then hide/downplay them.\n *\n * @param {Object} coordSysAxesInfo\n * @param {Object} payload\n * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'\n * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to\n *              trigger axisPointer and tooltip.\n * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to\n *              trigger axisPointer and tooltip.\n * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.\n * @param {Object} [payload.dataIndex] finder, restrict target axes.\n * @param {Object} [payload.axesInfo] finder, restrict target axes.\n *        [{\n *          axisDim: 'x'|'y'|'angle'|...,\n *          axisIndex: ...,\n *          value: ...\n *        }, ...]\n * @param {Function} [payload.dispatchAction]\n * @param {Object} [payload.tooltipOption]\n * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,\n *        which can be specified in dispatchAction\n * @param {module:echarts/model/Global} ecModel\n * @param {module:echarts/ExtensionAPI} api\n * @return {Object} content of event obj for echarts.connect.\n */\n\nfunction _default(payload, ecModel, api) {\n  var currTrigger = payload.currTrigger;\n  var point = [payload.x, payload.y];\n  var finder = payload;\n  var dispatchAction = payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n  var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending\n  // See #6121. But we are not able to reproduce it yet.\n\n  if (!coordSysAxesInfo) {\n    return;\n  }\n\n  if (illegalPoint(point)) {\n    // Used in the default behavior of `connection`: use the sample seriesIndex\n    // and dataIndex. And also used in the tooltipView trigger.\n    point = findPointFromSeries({\n      seriesIndex: finder.seriesIndex,\n      // Do not use dataIndexInside from other ec instance.\n      // FIXME: auto detect it?\n      dataIndex: finder.dataIndex\n    }, ecModel).point;\n  }\n\n  var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n  // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n  // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n  // and dataIndex.\n\n  var inputAxesInfo = finder.axesInfo;\n  var axesInfo = coordSysAxesInfo.axesInfo;\n  var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n  var outputFinder = {};\n  var showValueMap = {};\n  var dataByCoordSys = {\n    list: [],\n    map: {}\n  };\n  var updaters = {\n    showPointer: curry(showPointer, showValueMap),\n    showTooltip: curry(showTooltip, dataByCoordSys)\n  }; // Process for triggered axes.\n\n  each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n    // If a point given, it must be contained by the coordinate system.\n    var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n    each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n      var axis = axisInfo.axis;\n      var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.\n\n      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n        var val = inputAxisInfo && inputAxisInfo.value;\n\n        if (val == null && !isIllegalPoint) {\n          val = axis.pointToData(point);\n        }\n\n        val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);\n      }\n    });\n  }); // Process for linked axes.\n\n  var linkTriggers = {};\n  each(axesInfo, function (tarAxisInfo, tarKey) {\n    var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.\n\n    if (linkGroup && !showValueMap[tarKey]) {\n      each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n        var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.\n\n        if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n          var val = srcValItem.value;\n          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));\n          linkTriggers[tarAxisInfo.key] = val;\n        }\n      });\n    }\n  });\n  each(linkTriggers, function (val, tarKey) {\n    processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);\n  });\n  updateModelActually(showValueMap, axesInfo, outputFinder);\n  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);\n  dispatchHighDownActually(axesInfo, dispatchAction, api);\n  return outputFinder;\n}\n\nfunction processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {\n  var axis = axisInfo.axis;\n\n  if (axis.scale.isBlank() || !axis.containData(newValue)) {\n    return;\n  }\n\n  if (!axisInfo.involveSeries) {\n    updaters.showPointer(axisInfo, newValue);\n    return;\n  } // Heavy calculation. So put it after axis.containData checking.\n\n\n  var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n  var payloadBatch = payloadInfo.payloadBatch;\n  var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.\n  // By default use the first involved series data as a sample to connect.\n\n  if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n    zrUtil.extend(outputFinder, payloadBatch[0]);\n  } // If no linkSource input, this process is for collecting link\n  // target, where snap should not be accepted.\n\n\n  if (!dontSnap && axisInfo.snap) {\n    if (axis.containData(snapToValue) && snapToValue != null) {\n      newValue = snapToValue;\n    }\n  }\n\n  updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder); // Tooltip should always be snapToValue, otherwise there will be\n  // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n\n  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n}\n\nfunction buildPayloadsBySeries(value, axisInfo) {\n  var axis = axisInfo.axis;\n  var dim = axis.dim;\n  var snapToValue = value;\n  var payloadBatch = [];\n  var minDist = Number.MAX_VALUE;\n  var minDiff = -1;\n  each(axisInfo.seriesModels, function (series, idx) {\n    var dataDim = series.getData().mapDimension(dim, true);\n    var seriesNestestValue;\n    var dataIndices;\n\n    if (series.getAxisTooltipData) {\n      var result = series.getAxisTooltipData(dataDim, value, axis);\n      dataIndices = result.dataIndices;\n      seriesNestestValue = result.nestestValue;\n    } else {\n      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex\n      // when data length is not same.\n      // false,\n      axis.type === 'category' ? 0.5 : null);\n\n      if (!dataIndices.length) {\n        return;\n      }\n\n      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n    }\n\n    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n      return;\n    }\n\n    var diff = value - seriesNestestValue;\n    var dist = Math.abs(diff); // Consider category case\n\n    if (dist <= minDist) {\n      if (dist < minDist || diff >= 0 && minDiff < 0) {\n        minDist = dist;\n        minDiff = diff;\n        snapToValue = seriesNestestValue;\n        payloadBatch.length = 0;\n      }\n\n      each(dataIndices, function (dataIndex) {\n        payloadBatch.push({\n          seriesIndex: series.seriesIndex,\n          dataIndexInside: dataIndex,\n          dataIndex: series.getData().getRawIndex(dataIndex)\n        });\n      });\n    }\n  });\n  return {\n    payloadBatch: payloadBatch,\n    snapToValue: snapToValue\n  };\n}\n\nfunction showPointer(showValueMap, axisInfo, value, payloadBatch) {\n  showValueMap[axisInfo.key] = {\n    value: value,\n    payloadBatch: payloadBatch\n  };\n}\n\nfunction showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n  var payloadBatch = payloadInfo.payloadBatch;\n  var axis = axisInfo.axis;\n  var axisModel = axis.model;\n  var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,\n  // whose length will be used to judge whether dispatch action.\n\n  if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n    return;\n  }\n\n  var coordSysModel = axisInfo.coordSys.model;\n  var coordSysKey = modelHelper.makeKey(coordSysModel);\n  var coordSysItem = dataByCoordSys.map[coordSysKey];\n\n  if (!coordSysItem) {\n    coordSysItem = dataByCoordSys.map[coordSysKey] = {\n      coordSysId: coordSysModel.id,\n      coordSysIndex: coordSysModel.componentIndex,\n      coordSysType: coordSysModel.type,\n      coordSysMainType: coordSysModel.mainType,\n      dataByAxis: []\n    };\n    dataByCoordSys.list.push(coordSysItem);\n  }\n\n  coordSysItem.dataByAxis.push({\n    axisDim: axis.dim,\n    axisIndex: axisModel.componentIndex,\n    axisType: axisModel.type,\n    axisId: axisModel.id,\n    value: value,\n    // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n    // depends that all models have been updated. So it should not be performed\n    // here. Considering axisPointerModel used here is volatile, which is hard\n    // to be retrieve in TooltipView, we prepare parameters here.\n    valueLabelOpt: {\n      precision: axisPointerModel.get('label.precision'),\n      formatter: axisPointerModel.get('label.formatter')\n    },\n    seriesDataIndices: payloadBatch.slice()\n  });\n}\n\nfunction updateModelActually(showValueMap, axesInfo, outputFinder) {\n  var outputAxesInfo = outputFinder.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    var valItem = showValueMap[key];\n\n    if (valItem) {\n      !axisInfo.useHandle && (option.status = 'show');\n      option.value = valItem.value; // For label formatter param and highlight.\n\n      option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n    } // When always show (e.g., handle used), remain\n    // original value and status.\n    else {\n        // If hide, value still need to be set, consider\n        // click legend to toggle axis blank.\n        !axisInfo.useHandle && (option.status = 'hide');\n      } // If status is 'hide', should be no info in payload.\n\n\n    option.status === 'show' && outputAxesInfo.push({\n      axisDim: axisInfo.axis.dim,\n      axisIndex: axisInfo.axis.model.componentIndex,\n      value: option.value\n    });\n  });\n}\n\nfunction dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {\n  // Basic logic: If no showTip required, hideTip will be dispatched.\n  if (illegalPoint(point) || !dataByCoordSys.list.length) {\n    dispatchAction({\n      type: 'hideTip'\n    });\n    return;\n  } // In most case only one axis (or event one series is used). It is\n  // convinient to fetch payload.seriesIndex and payload.dataIndex\n  // dirtectly. So put the first seriesIndex and dataIndex of the first\n  // axis on the payload.\n\n\n  var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n  dispatchAction({\n    type: 'showTip',\n    escapeConnect: true,\n    x: point[0],\n    y: point[1],\n    tooltipOption: payload.tooltipOption,\n    position: payload.position,\n    dataIndexInside: sampleItem.dataIndexInside,\n    dataIndex: sampleItem.dataIndex,\n    seriesIndex: sampleItem.seriesIndex,\n    dataByCoordSys: dataByCoordSys.list\n  });\n}\n\nfunction dispatchHighDownActually(axesInfo, dispatchAction, api) {\n  // FIXME\n  // highlight status modification shoule be a stage of main process?\n  // (Consider confilct (e.g., legend and axisPointer) and setOption)\n  var zr = api.getZr();\n  var highDownKey = 'axisPointerLastHighlights';\n  var lastHighlights = inner(zr)[highDownKey] || {};\n  var newHighlights = inner(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.\n  // Build hash map and remove duplicate incidentally.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {\n      var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n      newHighlights[key] = batchItem;\n    });\n  }); // Diff.\n\n  var toHighlight = [];\n  var toDownplay = [];\n  zrUtil.each(lastHighlights, function (batchItem, key) {\n    !newHighlights[key] && toDownplay.push(batchItem);\n  });\n  zrUtil.each(newHighlights, function (batchItem, key) {\n    !lastHighlights[key] && toHighlight.push(batchItem);\n  });\n  toDownplay.length && api.dispatchAction({\n    type: 'downplay',\n    escapeConnect: true,\n    batch: toDownplay\n  });\n  toHighlight.length && api.dispatchAction({\n    type: 'highlight',\n    escapeConnect: true,\n    batch: toHighlight\n  });\n}\n\nfunction findInputAxisInfo(inputAxesInfo, axisInfo) {\n  for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n    var inputAxisInfo = inputAxesInfo[i];\n\n    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {\n      return inputAxisInfo;\n    }\n  }\n}\n\nfunction makeMapperParam(axisInfo) {\n  var axisModel = axisInfo.axis.model;\n  var item = {};\n  var dim = item.axisDim = axisInfo.axis.dim;\n  item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n  item.axisName = item[dim + 'AxisName'] = axisModel.name;\n  item.axisId = item[dim + 'AxisId'] = axisModel.id;\n  return item;\n}\n\nfunction illegalPoint(point) {\n  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n}\n\nmodule.exports = _default;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AAEA,IAAIE,SAAS,GAAGD,MAAM,CAACC,SAAvB;;AAEA,IAAIC,WAAW,GAAGH,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAII,mBAAmB,GAAGJ,OAAO,CAAC,uBAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,IAAI,GAAGN,MAAM,CAACM,IAAlB;AACA,IAAIC,KAAK,GAAGP,MAAM,CAACO,KAAnB;AACA,IAAIC,KAAK,GAAGL,SAAS,EAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASM,QAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoCC,GAApC,EAAyC;EACvC,IAAIC,WAAW,GAAGH,OAAO,CAACG,WAA1B;EACA,IAAIC,KAAK,GAAG,CAACJ,OAAO,CAACK,CAAT,EAAYL,OAAO,CAACM,CAApB,CAAZ;EACA,IAAIC,MAAM,GAAGP,OAAb;EACA,IAAIQ,cAAc,GAAGR,OAAO,CAACQ,cAAR,IAA0BlB,MAAM,CAACmB,IAAP,CAAYP,GAAG,CAACM,cAAhB,EAAgCN,GAAhC,CAA/C;EACA,IAAIQ,gBAAgB,GAAGT,OAAO,CAACU,YAAR,CAAqB,aAArB,EAAoCD,gBAA3D,CALuC,CAKsC;EAC7E;;EAEA,IAAI,CAACA,gBAAL,EAAuB;IACrB;EACD;;EAED,IAAIE,YAAY,CAACR,KAAD,CAAhB,EAAyB;IACvB;IACA;IACAA,KAAK,GAAGT,mBAAmB,CAAC;MAC1BkB,WAAW,EAAEN,MAAM,CAACM,WADM;MAE1B;MACA;MACAC,SAAS,EAAEP,MAAM,CAACO;IAJQ,CAAD,EAKxBb,OALwB,CAAnB,CAKIG,KALZ;EAMD;;EAED,IAAIW,cAAc,GAAGH,YAAY,CAACR,KAAD,CAAjC,CAvBuC,CAuBG;EAC1C;EACA;EACA;;EAEA,IAAIY,aAAa,GAAGT,MAAM,CAACU,QAA3B;EACA,IAAIA,QAAQ,GAAGP,gBAAgB,CAACO,QAAhC;EACA,IAAIC,UAAU,GAAGf,WAAW,KAAK,OAAhB,IAA2BS,YAAY,CAACR,KAAD,CAAxD;EACA,IAAIe,YAAY,GAAG,EAAnB;EACA,IAAIC,YAAY,GAAG,EAAnB;EACA,IAAIC,cAAc,GAAG;IACnBC,IAAI,EAAE,EADa;IAEnBC,GAAG,EAAE;EAFc,CAArB;EAIA,IAAIC,QAAQ,GAAG;IACbC,WAAW,EAAE5B,KAAK,CAAC4B,WAAD,EAAcL,YAAd,CADL;IAEbM,WAAW,EAAE7B,KAAK,CAAC6B,WAAD,EAAcL,cAAd;EAFL,CAAf,CArCuC,CAwCpC;;EAEHzB,IAAI,CAACc,gBAAgB,CAACiB,WAAlB,EAA+B,UAAUC,QAAV,EAAoBC,WAApB,EAAiC;IAClE;IACA,IAAIC,qBAAqB,GAAGf,cAAc,IAAIa,QAAQ,CAACG,YAAT,CAAsB3B,KAAtB,CAA9C;IACAR,IAAI,CAACc,gBAAgB,CAACA,gBAAjB,CAAkCmB,WAAlC,CAAD,EAAiD,UAAUG,QAAV,EAAoBC,GAApB,EAAyB;MAC5E,IAAIC,IAAI,GAAGF,QAAQ,CAACE,IAApB;MACA,IAAIC,aAAa,GAAGC,iBAAiB,CAACpB,aAAD,EAAgBgB,QAAhB,CAArC,CAF4E,CAEZ;;MAEhE,IAAI,CAACd,UAAD,IAAeY,qBAAf,KAAyC,CAACd,aAAD,IAAkBmB,aAA3D,CAAJ,EAA+E;QAC7E,IAAIE,GAAG,GAAGF,aAAa,IAAIA,aAAa,CAACG,KAAzC;;QAEA,IAAID,GAAG,IAAI,IAAP,IAAe,CAACtB,cAApB,EAAoC;UAClCsB,GAAG,GAAGH,IAAI,CAACK,WAAL,CAAiBnC,KAAjB,CAAN;QACD;;QAEDiC,GAAG,IAAI,IAAP,IAAeG,aAAa,CAACR,QAAD,EAAWK,GAAX,EAAgBb,QAAhB,EAA0B,KAA1B,EAAiCL,YAAjC,CAA5B;MACD;IACF,CAbG,CAAJ;EAcD,CAjBG,CAAJ,CA1CuC,CA2DnC;;EAEJ,IAAIsB,YAAY,GAAG,EAAnB;EACA7C,IAAI,CAACqB,QAAD,EAAW,UAAUyB,WAAV,EAAuBC,MAAvB,EAA+B;IAC5C,IAAIC,SAAS,GAAGF,WAAW,CAACE,SAA5B,CAD4C,CACL;;IAEvC,IAAIA,SAAS,IAAI,CAACxB,YAAY,CAACuB,MAAD,CAA9B,EAAwC;MACtC/C,IAAI,CAACgD,SAAS,CAAC3B,QAAX,EAAqB,UAAU4B,WAAV,EAAuBC,MAAvB,EAA+B;QACtD,IAAIC,UAAU,GAAG3B,YAAY,CAAC0B,MAAD,CAA7B,CADsD,CACf;;QAEvC,IAAID,WAAW,KAAKH,WAAhB,IAA+BK,UAAnC,EAA+C;UAC7C,IAAIV,GAAG,GAAGU,UAAU,CAACT,KAArB;UACAM,SAAS,CAACI,MAAV,KAAqBX,GAAG,GAAGK,WAAW,CAACR,IAAZ,CAAiBe,KAAjB,CAAuBC,KAAvB,CAA6BN,SAAS,CAACI,MAAV,CAAiBX,GAAjB,EAAsBc,eAAe,CAACN,WAAD,CAArC,EAAoDM,eAAe,CAACT,WAAD,CAAnE,CAA7B,CAA3B;UACAD,YAAY,CAACC,WAAW,CAACT,GAAb,CAAZ,GAAgCI,GAAhC;QACD;MACF,CARG,CAAJ;IASD;EACF,CAdG,CAAJ;EAeAzC,IAAI,CAAC6C,YAAD,EAAe,UAAUJ,GAAV,EAAeM,MAAf,EAAuB;IACxCH,aAAa,CAACvB,QAAQ,CAAC0B,MAAD,CAAT,EAAmBN,GAAnB,EAAwBb,QAAxB,EAAkC,IAAlC,EAAwCL,YAAxC,CAAb;EACD,CAFG,CAAJ;EAGAiC,mBAAmB,CAAChC,YAAD,EAAeH,QAAf,EAAyBE,YAAzB,CAAnB;EACAkC,uBAAuB,CAAChC,cAAD,EAAiBjB,KAAjB,EAAwBJ,OAAxB,EAAiCQ,cAAjC,CAAvB;EACA8C,wBAAwB,CAACrC,QAAD,EAAWT,cAAX,EAA2BN,GAA3B,CAAxB;EACA,OAAOiB,YAAP;AACD;;AAED,SAASqB,aAAT,CAAuBR,QAAvB,EAAiCuB,QAAjC,EAA2C/B,QAA3C,EAAqDgC,QAArD,EAA+DrC,YAA/D,EAA6E;EAC3E,IAAIe,IAAI,GAAGF,QAAQ,CAACE,IAApB;;EAEA,IAAIA,IAAI,CAACe,KAAL,CAAWQ,OAAX,MAAwB,CAACvB,IAAI,CAACwB,WAAL,CAAiBH,QAAjB,CAA7B,EAAyD;IACvD;EACD;;EAED,IAAI,CAACvB,QAAQ,CAAC2B,aAAd,EAA6B;IAC3BnC,QAAQ,CAACC,WAAT,CAAqBO,QAArB,EAA+BuB,QAA/B;IACA;EACD,CAV0E,CAUzE;;;EAGF,IAAIK,WAAW,GAAGC,qBAAqB,CAACN,QAAD,EAAWvB,QAAX,CAAvC;EACA,IAAI8B,YAAY,GAAGF,WAAW,CAACE,YAA/B;EACA,IAAIC,WAAW,GAAGH,WAAW,CAACG,WAA9B,CAf2E,CAehC;EAC3C;;EAEA,IAAID,YAAY,CAAC,CAAD,CAAZ,IAAmB3C,YAAY,CAACN,WAAb,IAA4B,IAAnD,EAAyD;IACvDvB,MAAM,CAAC0E,MAAP,CAAc7C,YAAd,EAA4B2C,YAAY,CAAC,CAAD,CAAxC;EACD,CApB0E,CAoBzE;EACF;;;EAGA,IAAI,CAACN,QAAD,IAAaxB,QAAQ,CAACiC,IAA1B,EAAgC;IAC9B,IAAI/B,IAAI,CAACwB,WAAL,CAAiBK,WAAjB,KAAiCA,WAAW,IAAI,IAApD,EAA0D;MACxDR,QAAQ,GAAGQ,WAAX;IACD;EACF;;EAEDvC,QAAQ,CAACC,WAAT,CAAqBO,QAArB,EAA+BuB,QAA/B,EAAyCO,YAAzC,EAAuD3C,YAAvD,EA9B2E,CA8BL;EACtE;;EAEAK,QAAQ,CAACE,WAAT,CAAqBM,QAArB,EAA+B4B,WAA/B,EAA4CG,WAA5C;AACD;;AAED,SAASF,qBAAT,CAA+BvB,KAA/B,EAAsCN,QAAtC,EAAgD;EAC9C,IAAIE,IAAI,GAAGF,QAAQ,CAACE,IAApB;EACA,IAAIgC,GAAG,GAAGhC,IAAI,CAACgC,GAAf;EACA,IAAIH,WAAW,GAAGzB,KAAlB;EACA,IAAIwB,YAAY,GAAG,EAAnB;EACA,IAAIK,OAAO,GAAGC,MAAM,CAACC,SAArB;EACA,IAAIC,OAAO,GAAG,CAAC,CAAf;EACA1E,IAAI,CAACoC,QAAQ,CAACuC,YAAV,EAAwB,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;IACjD,IAAIC,OAAO,GAAGF,MAAM,CAACG,OAAP,GAAiBC,YAAjB,CAA8BV,GAA9B,EAAmC,IAAnC,CAAd;IACA,IAAIW,kBAAJ;IACA,IAAIC,WAAJ;;IAEA,IAAIN,MAAM,CAACO,kBAAX,EAA+B;MAC7B,IAAIC,MAAM,GAAGR,MAAM,CAACO,kBAAP,CAA0BL,OAA1B,EAAmCpC,KAAnC,EAA0CJ,IAA1C,CAAb;MACA4C,WAAW,GAAGE,MAAM,CAACF,WAArB;MACAD,kBAAkB,GAAGG,MAAM,CAACC,YAA5B;IACD,CAJD,MAIO;MACLH,WAAW,GAAGN,MAAM,CAACG,OAAP,GAAiBO,gBAAjB,CAAkCR,OAAO,CAAC,CAAD,CAAzC,EAA8CpC,KAA9C,EAAqD;MACnE;MACA;MACAJ,IAAI,CAACiD,IAAL,KAAc,UAAd,GAA2B,GAA3B,GAAiC,IAHnB,CAAd;;MAKA,IAAI,CAACL,WAAW,CAACM,MAAjB,EAAyB;QACvB;MACD;;MAEDP,kBAAkB,GAAGL,MAAM,CAACG,OAAP,GAAiBU,GAAjB,CAAqBX,OAAO,CAAC,CAAD,CAA5B,EAAiCI,WAAW,CAAC,CAAD,CAA5C,CAArB;IACD;;IAED,IAAID,kBAAkB,IAAI,IAAtB,IAA8B,CAACS,QAAQ,CAACT,kBAAD,CAA3C,EAAiE;MAC/D;IACD;;IAED,IAAIU,IAAI,GAAGjD,KAAK,GAAGuC,kBAAnB;IACA,IAAIW,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,IAAT,CAAX,CA3BiD,CA2BtB;;IAE3B,IAAIC,IAAI,IAAIrB,OAAZ,EAAqB;MACnB,IAAIqB,IAAI,GAAGrB,OAAP,IAAkBoB,IAAI,IAAI,CAAR,IAAajB,OAAO,GAAG,CAA7C,EAAgD;QAC9CH,OAAO,GAAGqB,IAAV;QACAlB,OAAO,GAAGiB,IAAV;QACAxB,WAAW,GAAGc,kBAAd;QACAf,YAAY,CAACsB,MAAb,GAAsB,CAAtB;MACD;;MAEDxF,IAAI,CAACkF,WAAD,EAAc,UAAUhE,SAAV,EAAqB;QACrCgD,YAAY,CAAC6B,IAAb,CAAkB;UAChB9E,WAAW,EAAE2D,MAAM,CAAC3D,WADJ;UAEhB+E,eAAe,EAAE9E,SAFD;UAGhBA,SAAS,EAAE0D,MAAM,CAACG,OAAP,GAAiBkB,WAAjB,CAA6B/E,SAA7B;QAHK,CAAlB;MAKD,CANG,CAAJ;IAOD;EACF,CA7CG,CAAJ;EA8CA,OAAO;IACLgD,YAAY,EAAEA,YADT;IAELC,WAAW,EAAEA;EAFR,CAAP;AAID;;AAED,SAAStC,WAAT,CAAqBL,YAArB,EAAmCY,QAAnC,EAA6CM,KAA7C,EAAoDwB,YAApD,EAAkE;EAChE1C,YAAY,CAACY,QAAQ,CAACC,GAAV,CAAZ,GAA6B;IAC3BK,KAAK,EAAEA,KADoB;IAE3BwB,YAAY,EAAEA;EAFa,CAA7B;AAID;;AAED,SAASpC,WAAT,CAAqBL,cAArB,EAAqCW,QAArC,EAA+C4B,WAA/C,EAA4DtB,KAA5D,EAAmE;EACjE,IAAIwB,YAAY,GAAGF,WAAW,CAACE,YAA/B;EACA,IAAI5B,IAAI,GAAGF,QAAQ,CAACE,IAApB;EACA,IAAI4D,SAAS,GAAG5D,IAAI,CAAC6D,KAArB;EACA,IAAIC,gBAAgB,GAAGhE,QAAQ,CAACgE,gBAAhC,CAJiE,CAIf;EAClD;;EAEA,IAAI,CAAChE,QAAQ,CAACiE,cAAV,IAA4B,CAACnC,YAAY,CAACsB,MAA9C,EAAsD;IACpD;EACD;;EAED,IAAIc,aAAa,GAAGlE,QAAQ,CAACJ,QAAT,CAAkBmE,KAAtC;EACA,IAAIlE,WAAW,GAAGnC,WAAW,CAACyG,OAAZ,CAAoBD,aAApB,CAAlB;EACA,IAAIE,YAAY,GAAG/E,cAAc,CAACE,GAAf,CAAmBM,WAAnB,CAAnB;;EAEA,IAAI,CAACuE,YAAL,EAAmB;IACjBA,YAAY,GAAG/E,cAAc,CAACE,GAAf,CAAmBM,WAAnB,IAAkC;MAC/CwE,UAAU,EAAEH,aAAa,CAACI,EADqB;MAE/CC,aAAa,EAAEL,aAAa,CAACM,cAFkB;MAG/CC,YAAY,EAAEP,aAAa,CAACf,IAHmB;MAI/CuB,gBAAgB,EAAER,aAAa,CAACS,QAJe;MAK/CC,UAAU,EAAE;IALmC,CAAjD;IAOAvF,cAAc,CAACC,IAAf,CAAoBqE,IAApB,CAAyBS,YAAzB;EACD;;EAEDA,YAAY,CAACQ,UAAb,CAAwBjB,IAAxB,CAA6B;IAC3BkB,OAAO,EAAE3E,IAAI,CAACgC,GADa;IAE3B4C,SAAS,EAAEhB,SAAS,CAACU,cAFM;IAG3BO,QAAQ,EAAEjB,SAAS,CAACX,IAHO;IAI3B6B,MAAM,EAAElB,SAAS,CAACQ,EAJS;IAK3BhE,KAAK,EAAEA,KALoB;IAM3B;IACA;IACA;IACA;IACA2E,aAAa,EAAE;MACbC,SAAS,EAAElB,gBAAgB,CAACX,GAAjB,CAAqB,iBAArB,CADE;MAEb8B,SAAS,EAAEnB,gBAAgB,CAACX,GAAjB,CAAqB,iBAArB;IAFE,CAVY;IAc3B+B,iBAAiB,EAAEtD,YAAY,CAACuD,KAAb;EAdQ,CAA7B;AAgBD;;AAED,SAASjE,mBAAT,CAA6BhC,YAA7B,EAA2CH,QAA3C,EAAqDE,YAArD,EAAmE;EACjE,IAAImG,cAAc,GAAGnG,YAAY,CAACF,QAAb,GAAwB,EAA7C,CADiE,CAChB;;EAEjDrB,IAAI,CAACqB,QAAD,EAAW,UAAUe,QAAV,EAAoBC,GAApB,EAAyB;IACtC,IAAIsF,MAAM,GAAGvF,QAAQ,CAACgE,gBAAT,CAA0BuB,MAAvC;IACA,IAAIC,OAAO,GAAGpG,YAAY,CAACa,GAAD,CAA1B;;IAEA,IAAIuF,OAAJ,EAAa;MACX,CAACxF,QAAQ,CAACyF,SAAV,KAAwBF,MAAM,CAACG,MAAP,GAAgB,MAAxC;MACAH,MAAM,CAACjF,KAAP,GAAekF,OAAO,CAAClF,KAAvB,CAFW,CAEmB;;MAE9BiF,MAAM,CAACH,iBAAP,GAA2B,CAACI,OAAO,CAAC1D,YAAR,IAAwB,EAAzB,EAA6BuD,KAA7B,EAA3B;IACD,CALD,CAKE;IACF;IANA,KAOK;MACD;MACA;MACA,CAACrF,QAAQ,CAACyF,SAAV,KAAwBF,MAAM,CAACG,MAAP,GAAgB,MAAxC;IACD,CAfmC,CAelC;;;IAGJH,MAAM,CAACG,MAAP,KAAkB,MAAlB,IAA4BJ,cAAc,CAAC3B,IAAf,CAAoB;MAC9CkB,OAAO,EAAE7E,QAAQ,CAACE,IAAT,CAAcgC,GADuB;MAE9C4C,SAAS,EAAE9E,QAAQ,CAACE,IAAT,CAAc6D,KAAd,CAAoBS,cAFe;MAG9ClE,KAAK,EAAEiF,MAAM,CAACjF;IAHgC,CAApB,CAA5B;EAKD,CAvBG,CAAJ;AAwBD;;AAED,SAASe,uBAAT,CAAiChC,cAAjC,EAAiDjB,KAAjD,EAAwDJ,OAAxD,EAAiEQ,cAAjE,EAAiF;EAC/E;EACA,IAAII,YAAY,CAACR,KAAD,CAAZ,IAAuB,CAACiB,cAAc,CAACC,IAAf,CAAoB8D,MAAhD,EAAwD;IACtD5E,cAAc,CAAC;MACb2E,IAAI,EAAE;IADO,CAAD,CAAd;IAGA;EACD,CAP8E,CAO7E;EACF;EACA;EACA;;;EAGA,IAAIwC,UAAU,GAAG,CAAC,CAACtG,cAAc,CAACC,IAAf,CAAoB,CAApB,EAAuBsF,UAAvB,CAAkC,CAAlC,KAAwC,EAAzC,EAA6CQ,iBAA7C,IAAkE,EAAnE,EAAuE,CAAvE,KAA6E,EAA9F;EACA5G,cAAc,CAAC;IACb2E,IAAI,EAAE,SADO;IAEbyC,aAAa,EAAE,IAFF;IAGbvH,CAAC,EAAED,KAAK,CAAC,CAAD,CAHK;IAIbE,CAAC,EAAEF,KAAK,CAAC,CAAD,CAJK;IAKbyH,aAAa,EAAE7H,OAAO,CAAC6H,aALV;IAMbC,QAAQ,EAAE9H,OAAO,CAAC8H,QANL;IAOblC,eAAe,EAAE+B,UAAU,CAAC/B,eAPf;IAQb9E,SAAS,EAAE6G,UAAU,CAAC7G,SART;IASbD,WAAW,EAAE8G,UAAU,CAAC9G,WATX;IAUbQ,cAAc,EAAEA,cAAc,CAACC;EAVlB,CAAD,CAAd;AAYD;;AAED,SAASgC,wBAAT,CAAkCrC,QAAlC,EAA4CT,cAA5C,EAA4DN,GAA5D,EAAiE;EAC/D;EACA;EACA;EACA,IAAI6H,EAAE,GAAG7H,GAAG,CAAC8H,KAAJ,EAAT;EACA,IAAIC,WAAW,GAAG,2BAAlB;EACA,IAAIC,cAAc,GAAGpI,KAAK,CAACiI,EAAD,CAAL,CAAUE,WAAV,KAA0B,EAA/C;EACA,IAAIE,aAAa,GAAGrI,KAAK,CAACiI,EAAD,CAAL,CAAUE,WAAV,IAAyB,EAA7C,CAP+D,CAOd;EACjD;;EAEArI,IAAI,CAACqB,QAAD,EAAW,UAAUe,QAAV,EAAoBC,GAApB,EAAyB;IACtC,IAAIsF,MAAM,GAAGvF,QAAQ,CAACgE,gBAAT,CAA0BuB,MAAvC;IACAA,MAAM,CAACG,MAAP,KAAkB,MAAlB,IAA4B9H,IAAI,CAAC2H,MAAM,CAACH,iBAAR,EAA2B,UAAUgB,SAAV,EAAqB;MAC9E,IAAInG,GAAG,GAAGmG,SAAS,CAACvH,WAAV,GAAwB,KAAxB,GAAgCuH,SAAS,CAACtH,SAApD;MACAqH,aAAa,CAAClG,GAAD,CAAb,GAAqBmG,SAArB;IACD,CAH+B,CAAhC;EAID,CANG,CAAJ,CAV+D,CAgB3D;;EAEJ,IAAIC,WAAW,GAAG,EAAlB;EACA,IAAIC,UAAU,GAAG,EAAjB;EACAhJ,MAAM,CAACM,IAAP,CAAYsI,cAAZ,EAA4B,UAAUE,SAAV,EAAqBnG,GAArB,EAA0B;IACpD,CAACkG,aAAa,CAAClG,GAAD,CAAd,IAAuBqG,UAAU,CAAC3C,IAAX,CAAgByC,SAAhB,CAAvB;EACD,CAFD;EAGA9I,MAAM,CAACM,IAAP,CAAYuI,aAAZ,EAA2B,UAAUC,SAAV,EAAqBnG,GAArB,EAA0B;IACnD,CAACiG,cAAc,CAACjG,GAAD,CAAf,IAAwBoG,WAAW,CAAC1C,IAAZ,CAAiByC,SAAjB,CAAxB;EACD,CAFD;EAGAE,UAAU,CAAClD,MAAX,IAAqBlF,GAAG,CAACM,cAAJ,CAAmB;IACtC2E,IAAI,EAAE,UADgC;IAEtCyC,aAAa,EAAE,IAFuB;IAGtCW,KAAK,EAAED;EAH+B,CAAnB,CAArB;EAKAD,WAAW,CAACjD,MAAZ,IAAsBlF,GAAG,CAACM,cAAJ,CAAmB;IACvC2E,IAAI,EAAE,WADiC;IAEvCyC,aAAa,EAAE,IAFwB;IAGvCW,KAAK,EAAEF;EAHgC,CAAnB,CAAtB;AAKD;;AAED,SAASjG,iBAAT,CAA2BpB,aAA3B,EAA0CgB,QAA1C,EAAoD;EAClD,KAAK,IAAIwG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAACxH,aAAa,IAAI,EAAlB,EAAsBoE,MAA1C,EAAkDoD,CAAC,EAAnD,EAAuD;IACrD,IAAIrG,aAAa,GAAGnB,aAAa,CAACwH,CAAD,CAAjC;;IAEA,IAAIxG,QAAQ,CAACE,IAAT,CAAcgC,GAAd,KAAsB/B,aAAa,CAAC0E,OAApC,IAA+C7E,QAAQ,CAACE,IAAT,CAAc6D,KAAd,CAAoBS,cAApB,KAAuCrE,aAAa,CAAC2E,SAAxG,EAAmH;MACjH,OAAO3E,aAAP;IACD;EACF;AACF;;AAED,SAASgB,eAAT,CAAyBnB,QAAzB,EAAmC;EACjC,IAAI8D,SAAS,GAAG9D,QAAQ,CAACE,IAAT,CAAc6D,KAA9B;EACA,IAAI0C,IAAI,GAAG,EAAX;EACA,IAAIvE,GAAG,GAAGuE,IAAI,CAAC5B,OAAL,GAAe7E,QAAQ,CAACE,IAAT,CAAcgC,GAAvC;EACAuE,IAAI,CAAC3B,SAAL,GAAiB2B,IAAI,CAACvE,GAAG,GAAG,WAAP,CAAJ,GAA0B4B,SAAS,CAACU,cAArD;EACAiC,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACvE,GAAG,GAAG,UAAP,CAAJ,GAAyB4B,SAAS,CAAC6C,IAAnD;EACAF,IAAI,CAACzB,MAAL,GAAcyB,IAAI,CAACvE,GAAG,GAAG,QAAP,CAAJ,GAAuB4B,SAAS,CAACQ,EAA/C;EACA,OAAOmC,IAAP;AACD;;AAED,SAAS7H,YAAT,CAAsBR,KAAtB,EAA6B;EAC3B,OAAO,CAACA,KAAD,IAAUA,KAAK,CAAC,CAAD,CAAL,IAAY,IAAtB,IAA8BwI,KAAK,CAACxI,KAAK,CAAC,CAAD,CAAN,CAAnC,IAAiDA,KAAK,CAAC,CAAD,CAAL,IAAY,IAA7D,IAAqEwI,KAAK,CAACxI,KAAK,CAAC,CAAD,CAAN,CAAjF;AACD;;AAEDyI,MAAM,CAACC,OAAP,GAAiB/I,QAAjB"},"metadata":{},"sourceType":"script"}