{"ast":null,"code":"var util = require(\"./core/util\");\n\nvar env = require(\"./core/env\");\n\nvar Group = require(\"./container/Group\");\n\nvar timsort = require(\"./core/timsort\"); // Use timsort because in most case elements are partially sorted\n// https://jsfiddle.net/pissang/jr4x7mdm/8/\n\n\nfunction shapeCompareFunc(a, b) {\n  if (a.zlevel === b.zlevel) {\n    if (a.z === b.z) {\n      // if (a.z2 === b.z2) {\n      //     // FIXME Slow has renderidx compare\n      //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n      //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n      //     return a.__renderidx - b.__renderidx;\n      // }\n      return a.z2 - b.z2;\n    }\n\n    return a.z - b.z;\n  }\n\n  return a.zlevel - b.zlevel;\n}\n/**\n * 内容仓库 (M)\n * @alias module:zrender/Storage\n * @constructor\n */\n\n\nvar Storage = function () {\n  // jshint ignore:line\n  this._roots = [];\n  this._displayList = [];\n  this._displayListLen = 0;\n};\n\nStorage.prototype = {\n  constructor: Storage,\n\n  /**\n   * @param  {Function} cb\n   *\n   */\n  traverse: function (cb, context) {\n    for (var i = 0; i < this._roots.length; i++) {\n      this._roots[i].traverse(cb, context);\n    }\n  },\n\n  /**\n   * 返回所有图形的绘制队列\n   * @param {boolean} [update=false] 是否在返回前更新该数组\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n   *\n   * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n   * @return {Array.<module:zrender/graphic/Displayable>}\n   */\n  getDisplayList: function (update, includeIgnore) {\n    includeIgnore = includeIgnore || false;\n\n    if (update) {\n      this.updateDisplayList(includeIgnore);\n    }\n\n    return this._displayList;\n  },\n\n  /**\n   * 更新图形的绘制队列。\n   * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n   */\n  updateDisplayList: function (includeIgnore) {\n    this._displayListLen = 0;\n    var roots = this._roots;\n    var displayList = this._displayList;\n\n    for (var i = 0, len = roots.length; i < len; i++) {\n      this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n    }\n\n    displayList.length = this._displayListLen;\n    env.canvasSupported && timsort(displayList, shapeCompareFunc);\n  },\n  _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n    if (el.ignore && !includeIgnore) {\n      return;\n    }\n\n    el.beforeUpdate();\n\n    if (el.__dirty) {\n      el.update();\n    }\n\n    el.afterUpdate();\n    var userSetClipPath = el.clipPath;\n\n    if (userSetClipPath) {\n      // FIXME 效率影响\n      if (clipPaths) {\n        clipPaths = clipPaths.slice();\n      } else {\n        clipPaths = [];\n      }\n\n      var currentClipPath = userSetClipPath;\n      var parentClipPath = el; // Recursively add clip path\n\n      while (currentClipPath) {\n        // clipPath 的变换是基于使用这个 clipPath 的元素\n        currentClipPath.parent = parentClipPath;\n        currentClipPath.updateTransform();\n        clipPaths.push(currentClipPath);\n        parentClipPath = currentClipPath;\n        currentClipPath = currentClipPath.clipPath;\n      }\n    }\n\n    if (el.isGroup) {\n      var children = el._children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i]; // Force to mark as dirty if group is dirty\n        // FIXME __dirtyPath ?\n\n        if (el.__dirty) {\n          child.__dirty = true;\n        }\n\n        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n      } // Mark group clean here\n\n\n      el.__dirty = false;\n    } else {\n      el.__clipPaths = clipPaths;\n      this._displayList[this._displayListLen++] = el;\n    }\n  },\n\n  /**\n   * 添加图形(Shape)或者组(Group)到根节点\n   * @param {module:zrender/Element} el\n   */\n  addRoot: function (el) {\n    if (el.__storage === this) {\n      return;\n    }\n\n    if (el instanceof Group) {\n      el.addChildrenToStorage(this);\n    }\n\n    this.addToStorage(el);\n\n    this._roots.push(el);\n  },\n\n  /**\n   * 删除指定的图形(Shape)或者组(Group)\n   * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n   */\n  delRoot: function (el) {\n    if (el == null) {\n      // 不指定el清空\n      for (var i = 0; i < this._roots.length; i++) {\n        var root = this._roots[i];\n\n        if (root instanceof Group) {\n          root.delChildrenFromStorage(this);\n        }\n      }\n\n      this._roots = [];\n      this._displayList = [];\n      this._displayListLen = 0;\n      return;\n    }\n\n    if (el instanceof Array) {\n      for (var i = 0, l = el.length; i < l; i++) {\n        this.delRoot(el[i]);\n      }\n\n      return;\n    }\n\n    var idx = util.indexOf(this._roots, el);\n\n    if (idx >= 0) {\n      this.delFromStorage(el);\n\n      this._roots.splice(idx, 1);\n\n      if (el instanceof Group) {\n        el.delChildrenFromStorage(this);\n      }\n    }\n  },\n  addToStorage: function (el) {\n    if (el) {\n      el.__storage = this;\n      el.dirty(false);\n    }\n\n    return this;\n  },\n  delFromStorage: function (el) {\n    if (el) {\n      el.__storage = null;\n    }\n\n    return this;\n  },\n\n  /**\n   * 清空并且释放Storage\n   */\n  dispose: function () {\n    this._renderList = this._roots = null;\n  },\n  displayableSortFunc: shapeCompareFunc\n};\nvar _default = Storage;\nmodule.exports = _default;","map":{"version":3,"names":["util","require","env","Group","timsort","shapeCompareFunc","a","b","zlevel","z","z2","Storage","_roots","_displayList","_displayListLen","prototype","constructor","traverse","cb","context","i","length","getDisplayList","update","includeIgnore","updateDisplayList","roots","displayList","len","_updateAndAddDisplayable","canvasSupported","el","clipPaths","ignore","beforeUpdate","__dirty","afterUpdate","userSetClipPath","clipPath","slice","currentClipPath","parentClipPath","parent","updateTransform","push","isGroup","children","_children","child","__clipPaths","addRoot","__storage","addChildrenToStorage","addToStorage","delRoot","root","delChildrenFromStorage","Array","l","idx","indexOf","delFromStorage","splice","dirty","dispose","_renderList","displayableSortFunc","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/zrender/lib/Storage.js"],"sourcesContent":["var util = require(\"./core/util\");\n\nvar env = require(\"./core/env\");\n\nvar Group = require(\"./container/Group\");\n\nvar timsort = require(\"./core/timsort\");\n\n// Use timsort because in most case elements are partially sorted\n// https://jsfiddle.net/pissang/jr4x7mdm/8/\nfunction shapeCompareFunc(a, b) {\n  if (a.zlevel === b.zlevel) {\n    if (a.z === b.z) {\n      // if (a.z2 === b.z2) {\n      //     // FIXME Slow has renderidx compare\n      //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n      //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n      //     return a.__renderidx - b.__renderidx;\n      // }\n      return a.z2 - b.z2;\n    }\n\n    return a.z - b.z;\n  }\n\n  return a.zlevel - b.zlevel;\n}\n/**\n * 内容仓库 (M)\n * @alias module:zrender/Storage\n * @constructor\n */\n\n\nvar Storage = function () {\n  // jshint ignore:line\n  this._roots = [];\n  this._displayList = [];\n  this._displayListLen = 0;\n};\n\nStorage.prototype = {\n  constructor: Storage,\n\n  /**\n   * @param  {Function} cb\n   *\n   */\n  traverse: function (cb, context) {\n    for (var i = 0; i < this._roots.length; i++) {\n      this._roots[i].traverse(cb, context);\n    }\n  },\n\n  /**\n   * 返回所有图形的绘制队列\n   * @param {boolean} [update=false] 是否在返回前更新该数组\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n   *\n   * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n   * @return {Array.<module:zrender/graphic/Displayable>}\n   */\n  getDisplayList: function (update, includeIgnore) {\n    includeIgnore = includeIgnore || false;\n\n    if (update) {\n      this.updateDisplayList(includeIgnore);\n    }\n\n    return this._displayList;\n  },\n\n  /**\n   * 更新图形的绘制队列。\n   * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n   */\n  updateDisplayList: function (includeIgnore) {\n    this._displayListLen = 0;\n    var roots = this._roots;\n    var displayList = this._displayList;\n\n    for (var i = 0, len = roots.length; i < len; i++) {\n      this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n    }\n\n    displayList.length = this._displayListLen;\n    env.canvasSupported && timsort(displayList, shapeCompareFunc);\n  },\n  _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n    if (el.ignore && !includeIgnore) {\n      return;\n    }\n\n    el.beforeUpdate();\n\n    if (el.__dirty) {\n      el.update();\n    }\n\n    el.afterUpdate();\n    var userSetClipPath = el.clipPath;\n\n    if (userSetClipPath) {\n      // FIXME 效率影响\n      if (clipPaths) {\n        clipPaths = clipPaths.slice();\n      } else {\n        clipPaths = [];\n      }\n\n      var currentClipPath = userSetClipPath;\n      var parentClipPath = el; // Recursively add clip path\n\n      while (currentClipPath) {\n        // clipPath 的变换是基于使用这个 clipPath 的元素\n        currentClipPath.parent = parentClipPath;\n        currentClipPath.updateTransform();\n        clipPaths.push(currentClipPath);\n        parentClipPath = currentClipPath;\n        currentClipPath = currentClipPath.clipPath;\n      }\n    }\n\n    if (el.isGroup) {\n      var children = el._children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i]; // Force to mark as dirty if group is dirty\n        // FIXME __dirtyPath ?\n\n        if (el.__dirty) {\n          child.__dirty = true;\n        }\n\n        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n      } // Mark group clean here\n\n\n      el.__dirty = false;\n    } else {\n      el.__clipPaths = clipPaths;\n      this._displayList[this._displayListLen++] = el;\n    }\n  },\n\n  /**\n   * 添加图形(Shape)或者组(Group)到根节点\n   * @param {module:zrender/Element} el\n   */\n  addRoot: function (el) {\n    if (el.__storage === this) {\n      return;\n    }\n\n    if (el instanceof Group) {\n      el.addChildrenToStorage(this);\n    }\n\n    this.addToStorage(el);\n\n    this._roots.push(el);\n  },\n\n  /**\n   * 删除指定的图形(Shape)或者组(Group)\n   * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n   */\n  delRoot: function (el) {\n    if (el == null) {\n      // 不指定el清空\n      for (var i = 0; i < this._roots.length; i++) {\n        var root = this._roots[i];\n\n        if (root instanceof Group) {\n          root.delChildrenFromStorage(this);\n        }\n      }\n\n      this._roots = [];\n      this._displayList = [];\n      this._displayListLen = 0;\n      return;\n    }\n\n    if (el instanceof Array) {\n      for (var i = 0, l = el.length; i < l; i++) {\n        this.delRoot(el[i]);\n      }\n\n      return;\n    }\n\n    var idx = util.indexOf(this._roots, el);\n\n    if (idx >= 0) {\n      this.delFromStorage(el);\n\n      this._roots.splice(idx, 1);\n\n      if (el instanceof Group) {\n        el.delChildrenFromStorage(this);\n      }\n    }\n  },\n  addToStorage: function (el) {\n    if (el) {\n      el.__storage = this;\n      el.dirty(false);\n    }\n\n    return this;\n  },\n  delFromStorage: function (el) {\n    if (el) {\n      el.__storage = null;\n    }\n\n    return this;\n  },\n\n  /**\n   * 清空并且释放Storage\n   */\n  dispose: function () {\n    this._renderList = this._roots = null;\n  },\n  displayableSortFunc: shapeCompareFunc\n};\nvar _default = Storage;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}