{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar BoundingRect = require(\"zrender/lib/core/BoundingRect\");\n\nvar _number = require(\"./number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar formatUtil = require(\"./format\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Layout helpers for each component positioning\n\n\nvar each = zrUtil.each;\n/**\n * @public\n */\n\nvar LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];\n/**\n * @public\n */\n\nvar HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];\n\nfunction boxLayout(orient, group, gap, maxWidth, maxHeight) {\n  var x = 0;\n  var y = 0;\n\n  if (maxWidth == null) {\n    maxWidth = Infinity;\n  }\n\n  if (maxHeight == null) {\n    maxHeight = Infinity;\n  }\n\n  var currentLineMaxSize = 0;\n  group.eachChild(function (child, idx) {\n    var position = child.position;\n    var rect = child.getBoundingRect();\n    var nextChild = group.childAt(idx + 1);\n    var nextChildRect = nextChild && nextChild.getBoundingRect();\n    var nextX;\n    var nextY;\n\n    if (orient === 'horizontal') {\n      var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);\n      nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group\n      // FIXME compare before adding gap?\n\n      if (nextX > maxWidth || child.newline) {\n        x = 0;\n        nextX = moveX;\n        y += currentLineMaxSize + gap;\n        currentLineMaxSize = rect.height;\n      } else {\n        // FIXME: consider rect.y is not `0`?\n        currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n      }\n    } else {\n      var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);\n      nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group\n\n      if (nextY > maxHeight || child.newline) {\n        x += currentLineMaxSize + gap;\n        y = 0;\n        nextY = moveY;\n        currentLineMaxSize = rect.width;\n      } else {\n        currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n      }\n    }\n\n    if (child.newline) {\n      return;\n    }\n\n    position[0] = x;\n    position[1] = y;\n    orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;\n  });\n}\n/**\n * VBox or HBox layouting\n * @param {string} orient\n * @param {module:zrender/container/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\n\nvar box = boxLayout;\n/**\n * VBox layouting\n * @param {module:zrender/container/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\nvar vbox = zrUtil.curry(boxLayout, 'vertical');\n/**\n * HBox layouting\n * @param {module:zrender/container/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\nvar hbox = zrUtil.curry(boxLayout, 'horizontal');\n/**\n * If x or x2 is not specified or 'center' 'left' 'right',\n * the width would be as long as possible.\n * If y or y2 is not specified or 'middle' 'top' 'bottom',\n * the height would be as long as possible.\n *\n * @param {Object} positionInfo\n * @param {number|string} [positionInfo.x]\n * @param {number|string} [positionInfo.y]\n * @param {number|string} [positionInfo.x2]\n * @param {number|string} [positionInfo.y2]\n * @param {Object} containerRect {width, height}\n * @param {string|number} margin\n * @return {Object} {width, height}\n */\n\nfunction getAvailableSize(positionInfo, containerRect, margin) {\n  var containerWidth = containerRect.width;\n  var containerHeight = containerRect.height;\n  var x = parsePercent(positionInfo.x, containerWidth);\n  var y = parsePercent(positionInfo.y, containerHeight);\n  var x2 = parsePercent(positionInfo.x2, containerWidth);\n  var y2 = parsePercent(positionInfo.y2, containerHeight);\n  (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\n  (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\n  (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\n  (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\n  margin = formatUtil.normalizeCssArray(margin || 0);\n  return {\n    width: Math.max(x2 - x - margin[1] - margin[3], 0),\n    height: Math.max(y2 - y - margin[0] - margin[2], 0)\n  };\n}\n/**\n * Parse position info.\n *\n * @param {Object} positionInfo\n * @param {number|string} [positionInfo.left]\n * @param {number|string} [positionInfo.top]\n * @param {number|string} [positionInfo.right]\n * @param {number|string} [positionInfo.bottom]\n * @param {number|string} [positionInfo.width]\n * @param {number|string} [positionInfo.height]\n * @param {number|string} [positionInfo.aspect] Aspect is width / height\n * @param {Object} containerRect\n * @param {string|number} [margin]\n *\n * @return {module:zrender/core/BoundingRect}\n */\n\n\nfunction getLayoutRect(positionInfo, containerRect, margin) {\n  margin = formatUtil.normalizeCssArray(margin || 0);\n  var containerWidth = containerRect.width;\n  var containerHeight = containerRect.height;\n  var left = parsePercent(positionInfo.left, containerWidth);\n  var top = parsePercent(positionInfo.top, containerHeight);\n  var right = parsePercent(positionInfo.right, containerWidth);\n  var bottom = parsePercent(positionInfo.bottom, containerHeight);\n  var width = parsePercent(positionInfo.width, containerWidth);\n  var height = parsePercent(positionInfo.height, containerHeight);\n  var verticalMargin = margin[2] + margin[0];\n  var horizontalMargin = margin[1] + margin[3];\n  var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right\n\n  if (isNaN(width)) {\n    width = containerWidth - right - horizontalMargin - left;\n  }\n\n  if (isNaN(height)) {\n    height = containerHeight - bottom - verticalMargin - top;\n  }\n\n  if (aspect != null) {\n    // If width and height are not given\n    // 1. Graph should not exceeds the container\n    // 2. Aspect must be keeped\n    // 3. Graph should take the space as more as possible\n    // FIXME\n    // Margin is not considered, because there is no case that both\n    // using margin and aspect so far.\n    if (isNaN(width) && isNaN(height)) {\n      if (aspect > containerWidth / containerHeight) {\n        width = containerWidth * 0.8;\n      } else {\n        height = containerHeight * 0.8;\n      }\n    } // Calculate width or height with given aspect\n\n\n    if (isNaN(width)) {\n      width = aspect * height;\n    }\n\n    if (isNaN(height)) {\n      height = width / aspect;\n    }\n  } // If left is not specified, calculate left from right and width\n\n\n  if (isNaN(left)) {\n    left = containerWidth - right - width - horizontalMargin;\n  }\n\n  if (isNaN(top)) {\n    top = containerHeight - bottom - height - verticalMargin;\n  } // Align left and top\n\n\n  switch (positionInfo.left || positionInfo.right) {\n    case 'center':\n      left = containerWidth / 2 - width / 2 - margin[3];\n      break;\n\n    case 'right':\n      left = containerWidth - width - horizontalMargin;\n      break;\n  }\n\n  switch (positionInfo.top || positionInfo.bottom) {\n    case 'middle':\n    case 'center':\n      top = containerHeight / 2 - height / 2 - margin[0];\n      break;\n\n    case 'bottom':\n      top = containerHeight - height - verticalMargin;\n      break;\n  } // If something is wrong and left, top, width, height are calculated as NaN\n\n\n  left = left || 0;\n  top = top || 0;\n\n  if (isNaN(width)) {\n    // Width may be NaN if only one value is given except width\n    width = containerWidth - horizontalMargin - left - (right || 0);\n  }\n\n  if (isNaN(height)) {\n    // Height may be NaN if only one value is given except height\n    height = containerHeight - verticalMargin - top - (bottom || 0);\n  }\n\n  var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n  rect.margin = margin;\n  return rect;\n}\n/**\n * Position a zr element in viewport\n *  Group position is specified by either\n *  {left, top}, {right, bottom}\n *  If all properties exists, right and bottom will be igonred.\n *\n * Logic:\n *     1. Scale (against origin point in parent coord)\n *     2. Rotate (against origin point in parent coord)\n *     3. Traslate (with el.position by this method)\n * So this method only fixes the last step 'Traslate', which does not affect\n * scaling and rotating.\n *\n * If be called repeatly with the same input el, the same result will be gotten.\n *\n * @param {module:zrender/Element} el Should have `getBoundingRect` method.\n * @param {Object} positionInfo\n * @param {number|string} [positionInfo.left]\n * @param {number|string} [positionInfo.top]\n * @param {number|string} [positionInfo.right]\n * @param {number|string} [positionInfo.bottom]\n * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'\n * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'\n * @param {Object} containerRect\n * @param {string|number} margin\n * @param {Object} [opt]\n * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.\n * @param {Array.<number>} [opt.boundingMode='all']\n *        Specify how to calculate boundingRect when locating.\n *        'all': Position the boundingRect that is transformed and uioned\n *               both itself and its descendants.\n *               This mode simplies confine the elements in the bounding\n *               of their container (e.g., using 'right: 0').\n *        'raw': Position the boundingRect that is not transformed and only itself.\n *               This mode is useful when you want a element can overflow its\n *               container. (Consider a rotated circle needs to be located in a corner.)\n *               In this mode positionInfo.width/height can only be number.\n */\n\n\nfunction positionElement(el, positionInfo, containerRect, margin, opt) {\n  var h = !opt || !opt.hv || opt.hv[0];\n  var v = !opt || !opt.hv || opt.hv[1];\n  var boundingMode = opt && opt.boundingMode || 'all';\n\n  if (!h && !v) {\n    return;\n  }\n\n  var rect;\n\n  if (boundingMode === 'raw') {\n    rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();\n  } else {\n    rect = el.getBoundingRect();\n\n    if (el.needLocalTransform()) {\n      var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,\n      // which should not be modified.\n\n      rect = rect.clone();\n      rect.applyTransform(transform);\n    }\n  } // The real width and height can not be specified but calculated by the given el.\n\n\n  positionInfo = getLayoutRect(zrUtil.defaults({\n    width: rect.width,\n    height: rect.height\n  }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform\n  // (see zrender/core/Transformable#getLocalTransform),\n  // we can just only modify el.position to get final result.\n\n  var elPos = el.position;\n  var dx = h ? positionInfo.x - rect.x : 0;\n  var dy = v ? positionInfo.y - rect.y : 0;\n  el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);\n}\n/**\n * @param {Object} option Contains some of the properties in HV_NAMES.\n * @param {number} hvIdx 0: horizontal; 1: vertical.\n */\n\n\nfunction sizeCalculable(option, hvIdx) {\n  return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;\n}\n/**\n * Consider Case:\n * When defulat option has {left: 0, width: 100}, and we set {right: 0}\n * through setOption or media query, using normal zrUtil.merge will cause\n * {right: 0} does not take effect.\n *\n * @example\n * ComponentModel.extend({\n *     init: function () {\n *         ...\n *         var inputPositionParams = layout.getLayoutParams(option);\n *         this.mergeOption(inputPositionParams);\n *     },\n *     mergeOption: function (newOption) {\n *         newOption && zrUtil.merge(thisOption, newOption, true);\n *         layout.mergeLayoutParam(thisOption, newOption);\n *     }\n * });\n *\n * @param {Object} targetOption\n * @param {Object} newOption\n * @param {Object|string} [opt]\n * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components\n *  that width (or height) should not be calculated by left and right (or top and bottom).\n */\n\n\nfunction mergeLayoutParam(targetOption, newOption, opt) {\n  !zrUtil.isObject(opt) && (opt = {});\n  var ignoreSize = opt.ignoreSize;\n  !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);\n  var hResult = merge(HV_NAMES[0], 0);\n  var vResult = merge(HV_NAMES[1], 1);\n  copy(HV_NAMES[0], targetOption, hResult);\n  copy(HV_NAMES[1], targetOption, vResult);\n\n  function merge(names, hvIdx) {\n    var newParams = {};\n    var newValueCount = 0;\n    var merged = {};\n    var mergedValueCount = 0;\n    var enoughParamNumber = 2;\n    each(names, function (name) {\n      merged[name] = targetOption[name];\n    });\n    each(names, function (name) {\n      // Consider case: newOption.width is null, which is\n      // set by user for removing width setting.\n      hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n      hasValue(newParams, name) && newValueCount++;\n      hasValue(merged, name) && mergedValueCount++;\n    });\n\n    if (ignoreSize[hvIdx]) {\n      // Only one of left/right is premitted to exist.\n      if (hasValue(newOption, names[1])) {\n        merged[names[2]] = null;\n      } else if (hasValue(newOption, names[2])) {\n        merged[names[1]] = null;\n      }\n\n      return merged;\n    } // Case: newOption: {width: ..., right: ...},\n    // or targetOption: {right: ...} and newOption: {width: ...},\n    // There is no conflict when merged only has params count\n    // little than enoughParamNumber.\n\n\n    if (mergedValueCount === enoughParamNumber || !newValueCount) {\n      return merged;\n    } // Case: newOption: {width: ..., right: ...},\n    // Than we can make sure user only want those two, and ignore\n    // all origin params in targetOption.\n    else if (newValueCount >= enoughParamNumber) {\n      return newParams;\n    } else {\n      // Chose another param from targetOption by priority.\n      for (var i = 0; i < names.length; i++) {\n        var name = names[i];\n\n        if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\n          newParams[name] = targetOption[name];\n          break;\n        }\n      }\n\n      return newParams;\n    }\n  }\n\n  function hasProp(obj, name) {\n    return obj.hasOwnProperty(name);\n  }\n\n  function hasValue(obj, name) {\n    return obj[name] != null && obj[name] !== 'auto';\n  }\n\n  function copy(names, target, source) {\n    each(names, function (name) {\n      target[name] = source[name];\n    });\n  }\n}\n/**\n * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n * @param {Object} source\n * @return {Object} Result contains those props.\n */\n\n\nfunction getLayoutParams(source) {\n  return copyLayoutParams({}, source);\n}\n/**\n * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n * @param {Object} source\n * @return {Object} Result contains those props.\n */\n\n\nfunction copyLayoutParams(target, source) {\n  source && target && each(LOCATION_PARAMS, function (name) {\n    source.hasOwnProperty(name) && (target[name] = source[name]);\n  });\n  return target;\n}\n\nexports.LOCATION_PARAMS = LOCATION_PARAMS;\nexports.HV_NAMES = HV_NAMES;\nexports.box = box;\nexports.vbox = vbox;\nexports.hbox = hbox;\nexports.getAvailableSize = getAvailableSize;\nexports.getLayoutRect = getLayoutRect;\nexports.positionElement = positionElement;\nexports.sizeCalculable = sizeCalculable;\nexports.mergeLayoutParam = mergeLayoutParam;\nexports.getLayoutParams = getLayoutParams;\nexports.copyLayoutParams = copyLayoutParams;","map":{"version":3,"names":["zrUtil","require","BoundingRect","_number","parsePercent","formatUtil","each","LOCATION_PARAMS","HV_NAMES","boxLayout","orient","group","gap","maxWidth","maxHeight","x","y","Infinity","currentLineMaxSize","eachChild","child","idx","position","rect","getBoundingRect","nextChild","childAt","nextChildRect","nextX","nextY","moveX","width","newline","height","Math","max","moveY","box","vbox","curry","hbox","getAvailableSize","positionInfo","containerRect","margin","containerWidth","containerHeight","x2","y2","isNaN","parseFloat","normalizeCssArray","getLayoutRect","left","top","right","bottom","verticalMargin","horizontalMargin","aspect","positionElement","el","opt","h","hv","v","boundingMode","type","needLocalTransform","transform","getLocalTransform","clone","applyTransform","defaults","elPos","dx","dy","attr","sizeCalculable","option","hvIdx","mergeLayoutParam","targetOption","newOption","isObject","ignoreSize","isArray","hResult","merge","vResult","copy","names","newParams","newValueCount","merged","mergedValueCount","enoughParamNumber","name","hasProp","hasValue","i","length","obj","hasOwnProperty","target","source","getLayoutParams","copyLayoutParams","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/util/layout.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar BoundingRect = require(\"zrender/lib/core/BoundingRect\");\n\nvar _number = require(\"./number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar formatUtil = require(\"./format\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Layout helpers for each component positioning\nvar each = zrUtil.each;\n/**\n * @public\n */\n\nvar LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];\n/**\n * @public\n */\n\nvar HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];\n\nfunction boxLayout(orient, group, gap, maxWidth, maxHeight) {\n  var x = 0;\n  var y = 0;\n\n  if (maxWidth == null) {\n    maxWidth = Infinity;\n  }\n\n  if (maxHeight == null) {\n    maxHeight = Infinity;\n  }\n\n  var currentLineMaxSize = 0;\n  group.eachChild(function (child, idx) {\n    var position = child.position;\n    var rect = child.getBoundingRect();\n    var nextChild = group.childAt(idx + 1);\n    var nextChildRect = nextChild && nextChild.getBoundingRect();\n    var nextX;\n    var nextY;\n\n    if (orient === 'horizontal') {\n      var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);\n      nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group\n      // FIXME compare before adding gap?\n\n      if (nextX > maxWidth || child.newline) {\n        x = 0;\n        nextX = moveX;\n        y += currentLineMaxSize + gap;\n        currentLineMaxSize = rect.height;\n      } else {\n        // FIXME: consider rect.y is not `0`?\n        currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n      }\n    } else {\n      var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);\n      nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group\n\n      if (nextY > maxHeight || child.newline) {\n        x += currentLineMaxSize + gap;\n        y = 0;\n        nextY = moveY;\n        currentLineMaxSize = rect.width;\n      } else {\n        currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n      }\n    }\n\n    if (child.newline) {\n      return;\n    }\n\n    position[0] = x;\n    position[1] = y;\n    orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;\n  });\n}\n/**\n * VBox or HBox layouting\n * @param {string} orient\n * @param {module:zrender/container/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\n\nvar box = boxLayout;\n/**\n * VBox layouting\n * @param {module:zrender/container/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\nvar vbox = zrUtil.curry(boxLayout, 'vertical');\n/**\n * HBox layouting\n * @param {module:zrender/container/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\nvar hbox = zrUtil.curry(boxLayout, 'horizontal');\n/**\n * If x or x2 is not specified or 'center' 'left' 'right',\n * the width would be as long as possible.\n * If y or y2 is not specified or 'middle' 'top' 'bottom',\n * the height would be as long as possible.\n *\n * @param {Object} positionInfo\n * @param {number|string} [positionInfo.x]\n * @param {number|string} [positionInfo.y]\n * @param {number|string} [positionInfo.x2]\n * @param {number|string} [positionInfo.y2]\n * @param {Object} containerRect {width, height}\n * @param {string|number} margin\n * @return {Object} {width, height}\n */\n\nfunction getAvailableSize(positionInfo, containerRect, margin) {\n  var containerWidth = containerRect.width;\n  var containerHeight = containerRect.height;\n  var x = parsePercent(positionInfo.x, containerWidth);\n  var y = parsePercent(positionInfo.y, containerHeight);\n  var x2 = parsePercent(positionInfo.x2, containerWidth);\n  var y2 = parsePercent(positionInfo.y2, containerHeight);\n  (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\n  (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\n  (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\n  (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\n  margin = formatUtil.normalizeCssArray(margin || 0);\n  return {\n    width: Math.max(x2 - x - margin[1] - margin[3], 0),\n    height: Math.max(y2 - y - margin[0] - margin[2], 0)\n  };\n}\n/**\n * Parse position info.\n *\n * @param {Object} positionInfo\n * @param {number|string} [positionInfo.left]\n * @param {number|string} [positionInfo.top]\n * @param {number|string} [positionInfo.right]\n * @param {number|string} [positionInfo.bottom]\n * @param {number|string} [positionInfo.width]\n * @param {number|string} [positionInfo.height]\n * @param {number|string} [positionInfo.aspect] Aspect is width / height\n * @param {Object} containerRect\n * @param {string|number} [margin]\n *\n * @return {module:zrender/core/BoundingRect}\n */\n\n\nfunction getLayoutRect(positionInfo, containerRect, margin) {\n  margin = formatUtil.normalizeCssArray(margin || 0);\n  var containerWidth = containerRect.width;\n  var containerHeight = containerRect.height;\n  var left = parsePercent(positionInfo.left, containerWidth);\n  var top = parsePercent(positionInfo.top, containerHeight);\n  var right = parsePercent(positionInfo.right, containerWidth);\n  var bottom = parsePercent(positionInfo.bottom, containerHeight);\n  var width = parsePercent(positionInfo.width, containerWidth);\n  var height = parsePercent(positionInfo.height, containerHeight);\n  var verticalMargin = margin[2] + margin[0];\n  var horizontalMargin = margin[1] + margin[3];\n  var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right\n\n  if (isNaN(width)) {\n    width = containerWidth - right - horizontalMargin - left;\n  }\n\n  if (isNaN(height)) {\n    height = containerHeight - bottom - verticalMargin - top;\n  }\n\n  if (aspect != null) {\n    // If width and height are not given\n    // 1. Graph should not exceeds the container\n    // 2. Aspect must be keeped\n    // 3. Graph should take the space as more as possible\n    // FIXME\n    // Margin is not considered, because there is no case that both\n    // using margin and aspect so far.\n    if (isNaN(width) && isNaN(height)) {\n      if (aspect > containerWidth / containerHeight) {\n        width = containerWidth * 0.8;\n      } else {\n        height = containerHeight * 0.8;\n      }\n    } // Calculate width or height with given aspect\n\n\n    if (isNaN(width)) {\n      width = aspect * height;\n    }\n\n    if (isNaN(height)) {\n      height = width / aspect;\n    }\n  } // If left is not specified, calculate left from right and width\n\n\n  if (isNaN(left)) {\n    left = containerWidth - right - width - horizontalMargin;\n  }\n\n  if (isNaN(top)) {\n    top = containerHeight - bottom - height - verticalMargin;\n  } // Align left and top\n\n\n  switch (positionInfo.left || positionInfo.right) {\n    case 'center':\n      left = containerWidth / 2 - width / 2 - margin[3];\n      break;\n\n    case 'right':\n      left = containerWidth - width - horizontalMargin;\n      break;\n  }\n\n  switch (positionInfo.top || positionInfo.bottom) {\n    case 'middle':\n    case 'center':\n      top = containerHeight / 2 - height / 2 - margin[0];\n      break;\n\n    case 'bottom':\n      top = containerHeight - height - verticalMargin;\n      break;\n  } // If something is wrong and left, top, width, height are calculated as NaN\n\n\n  left = left || 0;\n  top = top || 0;\n\n  if (isNaN(width)) {\n    // Width may be NaN if only one value is given except width\n    width = containerWidth - horizontalMargin - left - (right || 0);\n  }\n\n  if (isNaN(height)) {\n    // Height may be NaN if only one value is given except height\n    height = containerHeight - verticalMargin - top - (bottom || 0);\n  }\n\n  var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n  rect.margin = margin;\n  return rect;\n}\n/**\n * Position a zr element in viewport\n *  Group position is specified by either\n *  {left, top}, {right, bottom}\n *  If all properties exists, right and bottom will be igonred.\n *\n * Logic:\n *     1. Scale (against origin point in parent coord)\n *     2. Rotate (against origin point in parent coord)\n *     3. Traslate (with el.position by this method)\n * So this method only fixes the last step 'Traslate', which does not affect\n * scaling and rotating.\n *\n * If be called repeatly with the same input el, the same result will be gotten.\n *\n * @param {module:zrender/Element} el Should have `getBoundingRect` method.\n * @param {Object} positionInfo\n * @param {number|string} [positionInfo.left]\n * @param {number|string} [positionInfo.top]\n * @param {number|string} [positionInfo.right]\n * @param {number|string} [positionInfo.bottom]\n * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'\n * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'\n * @param {Object} containerRect\n * @param {string|number} margin\n * @param {Object} [opt]\n * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.\n * @param {Array.<number>} [opt.boundingMode='all']\n *        Specify how to calculate boundingRect when locating.\n *        'all': Position the boundingRect that is transformed and uioned\n *               both itself and its descendants.\n *               This mode simplies confine the elements in the bounding\n *               of their container (e.g., using 'right: 0').\n *        'raw': Position the boundingRect that is not transformed and only itself.\n *               This mode is useful when you want a element can overflow its\n *               container. (Consider a rotated circle needs to be located in a corner.)\n *               In this mode positionInfo.width/height can only be number.\n */\n\n\nfunction positionElement(el, positionInfo, containerRect, margin, opt) {\n  var h = !opt || !opt.hv || opt.hv[0];\n  var v = !opt || !opt.hv || opt.hv[1];\n  var boundingMode = opt && opt.boundingMode || 'all';\n\n  if (!h && !v) {\n    return;\n  }\n\n  var rect;\n\n  if (boundingMode === 'raw') {\n    rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();\n  } else {\n    rect = el.getBoundingRect();\n\n    if (el.needLocalTransform()) {\n      var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,\n      // which should not be modified.\n\n      rect = rect.clone();\n      rect.applyTransform(transform);\n    }\n  } // The real width and height can not be specified but calculated by the given el.\n\n\n  positionInfo = getLayoutRect(zrUtil.defaults({\n    width: rect.width,\n    height: rect.height\n  }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform\n  // (see zrender/core/Transformable#getLocalTransform),\n  // we can just only modify el.position to get final result.\n\n  var elPos = el.position;\n  var dx = h ? positionInfo.x - rect.x : 0;\n  var dy = v ? positionInfo.y - rect.y : 0;\n  el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);\n}\n/**\n * @param {Object} option Contains some of the properties in HV_NAMES.\n * @param {number} hvIdx 0: horizontal; 1: vertical.\n */\n\n\nfunction sizeCalculable(option, hvIdx) {\n  return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;\n}\n/**\n * Consider Case:\n * When defulat option has {left: 0, width: 100}, and we set {right: 0}\n * through setOption or media query, using normal zrUtil.merge will cause\n * {right: 0} does not take effect.\n *\n * @example\n * ComponentModel.extend({\n *     init: function () {\n *         ...\n *         var inputPositionParams = layout.getLayoutParams(option);\n *         this.mergeOption(inputPositionParams);\n *     },\n *     mergeOption: function (newOption) {\n *         newOption && zrUtil.merge(thisOption, newOption, true);\n *         layout.mergeLayoutParam(thisOption, newOption);\n *     }\n * });\n *\n * @param {Object} targetOption\n * @param {Object} newOption\n * @param {Object|string} [opt]\n * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components\n *  that width (or height) should not be calculated by left and right (or top and bottom).\n */\n\n\nfunction mergeLayoutParam(targetOption, newOption, opt) {\n  !zrUtil.isObject(opt) && (opt = {});\n  var ignoreSize = opt.ignoreSize;\n  !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);\n  var hResult = merge(HV_NAMES[0], 0);\n  var vResult = merge(HV_NAMES[1], 1);\n  copy(HV_NAMES[0], targetOption, hResult);\n  copy(HV_NAMES[1], targetOption, vResult);\n\n  function merge(names, hvIdx) {\n    var newParams = {};\n    var newValueCount = 0;\n    var merged = {};\n    var mergedValueCount = 0;\n    var enoughParamNumber = 2;\n    each(names, function (name) {\n      merged[name] = targetOption[name];\n    });\n    each(names, function (name) {\n      // Consider case: newOption.width is null, which is\n      // set by user for removing width setting.\n      hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n      hasValue(newParams, name) && newValueCount++;\n      hasValue(merged, name) && mergedValueCount++;\n    });\n\n    if (ignoreSize[hvIdx]) {\n      // Only one of left/right is premitted to exist.\n      if (hasValue(newOption, names[1])) {\n        merged[names[2]] = null;\n      } else if (hasValue(newOption, names[2])) {\n        merged[names[1]] = null;\n      }\n\n      return merged;\n    } // Case: newOption: {width: ..., right: ...},\n    // or targetOption: {right: ...} and newOption: {width: ...},\n    // There is no conflict when merged only has params count\n    // little than enoughParamNumber.\n\n\n    if (mergedValueCount === enoughParamNumber || !newValueCount) {\n      return merged;\n    } // Case: newOption: {width: ..., right: ...},\n    // Than we can make sure user only want those two, and ignore\n    // all origin params in targetOption.\n    else if (newValueCount >= enoughParamNumber) {\n        return newParams;\n      } else {\n        // Chose another param from targetOption by priority.\n        for (var i = 0; i < names.length; i++) {\n          var name = names[i];\n\n          if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\n            newParams[name] = targetOption[name];\n            break;\n          }\n        }\n\n        return newParams;\n      }\n  }\n\n  function hasProp(obj, name) {\n    return obj.hasOwnProperty(name);\n  }\n\n  function hasValue(obj, name) {\n    return obj[name] != null && obj[name] !== 'auto';\n  }\n\n  function copy(names, target, source) {\n    each(names, function (name) {\n      target[name] = source[name];\n    });\n  }\n}\n/**\n * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n * @param {Object} source\n * @return {Object} Result contains those props.\n */\n\n\nfunction getLayoutParams(source) {\n  return copyLayoutParams({}, source);\n}\n/**\n * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n * @param {Object} source\n * @return {Object} Result contains those props.\n */\n\n\nfunction copyLayoutParams(target, source) {\n  source && target && each(LOCATION_PARAMS, function (name) {\n    source.hasOwnProperty(name) && (target[name] = source[name]);\n  });\n  return target;\n}\n\nexports.LOCATION_PARAMS = LOCATION_PARAMS;\nexports.HV_NAMES = HV_NAMES;\nexports.box = box;\nexports.vbox = vbox;\nexports.hbox = hbox;\nexports.getAvailableSize = getAvailableSize;\nexports.getLayoutRect = getLayoutRect;\nexports.positionElement = positionElement;\nexports.sizeCalculable = sizeCalculable;\nexports.mergeLayoutParam = mergeLayoutParam;\nexports.getLayoutParams = getLayoutParams;\nexports.copyLayoutParams = copyLayoutParams;"],"mappings":"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"},"metadata":{},"sourceType":"script"}