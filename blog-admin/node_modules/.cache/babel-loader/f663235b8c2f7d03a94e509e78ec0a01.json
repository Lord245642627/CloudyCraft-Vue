{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nexport const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon; // fast_expansion_sum_zeroelim routine from oritinal code\n\nexport function sum(elen, e, flen, f, h) {\n  let Q, Qnew, hh, bvirt;\n  let enow = e[0];\n  let fnow = f[0];\n  let eindex = 0;\n  let findex = 0;\n\n  if (fnow > enow === fnow > -enow) {\n    Q = enow;\n    enow = e[++eindex];\n  } else {\n    Q = fnow;\n    fnow = f[++findex];\n  }\n\n  let hindex = 0;\n\n  if (eindex < elen && findex < flen) {\n    if (fnow > enow === fnow > -enow) {\n      Qnew = enow + Q;\n      hh = Q - (Qnew - enow);\n      enow = e[++eindex];\n    } else {\n      Qnew = fnow + Q;\n      hh = Q - (Qnew - fnow);\n      fnow = f[++findex];\n    }\n\n    Q = Qnew;\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n\n    while (eindex < elen && findex < flen) {\n      if (fnow > enow === fnow > -enow) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n      } else {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n      }\n\n      Q = Qnew;\n\n      if (hh !== 0) {\n        h[hindex++] = hh;\n      }\n    }\n  }\n\n  while (eindex < elen) {\n    Qnew = Q + enow;\n    bvirt = Qnew - Q;\n    hh = Q - (Qnew - bvirt) + (enow - bvirt);\n    enow = e[++eindex];\n    Q = Qnew;\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n  }\n\n  while (findex < flen) {\n    Qnew = Q + fnow;\n    bvirt = Qnew - Q;\n    hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n    fnow = f[++findex];\n    Q = Qnew;\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n  }\n\n  if (Q !== 0 || hindex === 0) {\n    h[hindex++] = Q;\n  }\n\n  return hindex;\n}\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n  return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n} // scale_expansion_zeroelim routine from oritinal code\n\nexport function scale(elen, e, b, h) {\n  let Q, sum, hh, product1, product0;\n  let bvirt, c, ahi, alo, bhi, blo;\n  c = splitter * b;\n  bhi = c - (c - b);\n  blo = b - bhi;\n  let enow = e[0];\n  Q = enow * b;\n  c = splitter * enow;\n  ahi = c - (c - enow);\n  alo = enow - ahi;\n  hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n  let hindex = 0;\n\n  if (hh !== 0) {\n    h[hindex++] = hh;\n  }\n\n  for (let i = 1; i < elen; i++) {\n    enow = e[i];\n    product1 = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n    sum = Q + product0;\n    bvirt = sum - Q;\n    hh = Q - (sum - bvirt) + (product0 - bvirt);\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n\n    Q = product1 + sum;\n    hh = sum - (Q - product1);\n\n    if (hh !== 0) {\n      h[hindex++] = hh;\n    }\n  }\n\n  if (Q !== 0 || hindex === 0) {\n    h[hindex++] = Q;\n  }\n\n  return hindex;\n}\nexport function negate(elen, e) {\n  for (let i = 0; i < elen; i++) e[i] = -e[i];\n\n  return elen;\n}\nexport function estimate(elen, e) {\n  let Q = e[0];\n\n  for (let i = 1; i < elen; i++) Q += e[i];\n\n  return Q;\n}\nexport function vec(n) {\n  return new Float64Array(n);\n}","map":null,"metadata":{},"sourceType":"module"}