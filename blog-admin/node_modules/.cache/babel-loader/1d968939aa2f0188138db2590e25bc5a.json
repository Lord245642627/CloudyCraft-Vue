{"ast":null,"code":"// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n/**\n * Simple double linked list. Compared with array, it has O(1) remove operation.\n * @constructor\n */\nvar LinkedList = function () {\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n  this.head = null;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.tail = null;\n  this._len = 0;\n};\n\nvar linkedListProto = LinkedList.prototype;\n/**\n * Insert a new value at the tail\n * @param  {} val\n * @return {module:zrender/core/LRU~Entry}\n */\n\nlinkedListProto.insert = function (val) {\n  var entry = new Entry(val);\n  this.insertEntry(entry);\n  return entry;\n};\n/**\n * Insert an entry at the tail\n * @param  {module:zrender/core/LRU~Entry} entry\n */\n\n\nlinkedListProto.insertEntry = function (entry) {\n  if (!this.head) {\n    this.head = this.tail = entry;\n  } else {\n    this.tail.next = entry;\n    entry.prev = this.tail;\n    entry.next = null;\n    this.tail = entry;\n  }\n\n  this._len++;\n};\n/**\n * Remove entry.\n * @param  {module:zrender/core/LRU~Entry} entry\n */\n\n\nlinkedListProto.remove = function (entry) {\n  var prev = entry.prev;\n  var next = entry.next;\n\n  if (prev) {\n    prev.next = next;\n  } else {\n    // Is head\n    this.head = next;\n  }\n\n  if (next) {\n    next.prev = prev;\n  } else {\n    // Is tail\n    this.tail = prev;\n  }\n\n  entry.next = entry.prev = null;\n  this._len--;\n};\n/**\n * @return {number}\n */\n\n\nlinkedListProto.len = function () {\n  return this._len;\n};\n/**\n * Clear list\n */\n\n\nlinkedListProto.clear = function () {\n  this.head = this.tail = null;\n  this._len = 0;\n};\n/**\n * @constructor\n * @param {} val\n */\n\n\nvar Entry = function (val) {\n  /**\n   * @type {}\n   */\n  this.value = val;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.next;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.prev;\n};\n/**\n * LRU Cache\n * @constructor\n * @alias module:zrender/core/LRU\n */\n\n\nvar LRU = function (maxSize) {\n  this._list = new LinkedList();\n  this._map = {};\n  this._maxSize = maxSize || 10;\n  this._lastRemovedEntry = null;\n};\n\nvar LRUProto = LRU.prototype;\n/**\n * @param  {string} key\n * @param  {} value\n * @return {} Removed value\n */\n\nLRUProto.put = function (key, value) {\n  var list = this._list;\n  var map = this._map;\n  var removed = null;\n\n  if (map[key] == null) {\n    var len = list.len(); // Reuse last removed entry\n\n    var entry = this._lastRemovedEntry;\n\n    if (len >= this._maxSize && len > 0) {\n      // Remove the least recently used\n      var leastUsedEntry = list.head;\n      list.remove(leastUsedEntry);\n      delete map[leastUsedEntry.key];\n      removed = leastUsedEntry.value;\n      this._lastRemovedEntry = leastUsedEntry;\n    }\n\n    if (entry) {\n      entry.value = value;\n    } else {\n      entry = new Entry(value);\n    }\n\n    entry.key = key;\n    list.insertEntry(entry);\n    map[key] = entry;\n  }\n\n  return removed;\n};\n/**\n * @param  {string} key\n * @return {}\n */\n\n\nLRUProto.get = function (key) {\n  var entry = this._map[key];\n  var list = this._list;\n\n  if (entry != null) {\n    // Put the latest used entry in the tail\n    if (entry !== list.tail) {\n      list.remove(entry);\n      list.insertEntry(entry);\n    }\n\n    return entry.value;\n  }\n};\n/**\n * Clear the cache\n */\n\n\nLRUProto.clear = function () {\n  this._list.clear();\n\n  this._map = {};\n};\n\nvar _default = LRU;\nmodule.exports = _default;","map":{"version":3,"names":["LinkedList","head","tail","_len","linkedListProto","prototype","insert","val","entry","Entry","insertEntry","next","prev","remove","len","clear","value","LRU","maxSize","_list","_map","_maxSize","_lastRemovedEntry","LRUProto","put","key","list","map","removed","leastUsedEntry","get","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/zrender/lib/core/LRU.js"],"sourcesContent":["// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n/**\n * Simple double linked list. Compared with array, it has O(1) remove operation.\n * @constructor\n */\nvar LinkedList = function () {\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n  this.head = null;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.tail = null;\n  this._len = 0;\n};\n\nvar linkedListProto = LinkedList.prototype;\n/**\n * Insert a new value at the tail\n * @param  {} val\n * @return {module:zrender/core/LRU~Entry}\n */\n\nlinkedListProto.insert = function (val) {\n  var entry = new Entry(val);\n  this.insertEntry(entry);\n  return entry;\n};\n/**\n * Insert an entry at the tail\n * @param  {module:zrender/core/LRU~Entry} entry\n */\n\n\nlinkedListProto.insertEntry = function (entry) {\n  if (!this.head) {\n    this.head = this.tail = entry;\n  } else {\n    this.tail.next = entry;\n    entry.prev = this.tail;\n    entry.next = null;\n    this.tail = entry;\n  }\n\n  this._len++;\n};\n/**\n * Remove entry.\n * @param  {module:zrender/core/LRU~Entry} entry\n */\n\n\nlinkedListProto.remove = function (entry) {\n  var prev = entry.prev;\n  var next = entry.next;\n\n  if (prev) {\n    prev.next = next;\n  } else {\n    // Is head\n    this.head = next;\n  }\n\n  if (next) {\n    next.prev = prev;\n  } else {\n    // Is tail\n    this.tail = prev;\n  }\n\n  entry.next = entry.prev = null;\n  this._len--;\n};\n/**\n * @return {number}\n */\n\n\nlinkedListProto.len = function () {\n  return this._len;\n};\n/**\n * Clear list\n */\n\n\nlinkedListProto.clear = function () {\n  this.head = this.tail = null;\n  this._len = 0;\n};\n/**\n * @constructor\n * @param {} val\n */\n\n\nvar Entry = function (val) {\n  /**\n   * @type {}\n   */\n  this.value = val;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.next;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.prev;\n};\n/**\n * LRU Cache\n * @constructor\n * @alias module:zrender/core/LRU\n */\n\n\nvar LRU = function (maxSize) {\n  this._list = new LinkedList();\n  this._map = {};\n  this._maxSize = maxSize || 10;\n  this._lastRemovedEntry = null;\n};\n\nvar LRUProto = LRU.prototype;\n/**\n * @param  {string} key\n * @param  {} value\n * @return {} Removed value\n */\n\nLRUProto.put = function (key, value) {\n  var list = this._list;\n  var map = this._map;\n  var removed = null;\n\n  if (map[key] == null) {\n    var len = list.len(); // Reuse last removed entry\n\n    var entry = this._lastRemovedEntry;\n\n    if (len >= this._maxSize && len > 0) {\n      // Remove the least recently used\n      var leastUsedEntry = list.head;\n      list.remove(leastUsedEntry);\n      delete map[leastUsedEntry.key];\n      removed = leastUsedEntry.value;\n      this._lastRemovedEntry = leastUsedEntry;\n    }\n\n    if (entry) {\n      entry.value = value;\n    } else {\n      entry = new Entry(value);\n    }\n\n    entry.key = key;\n    list.insertEntry(entry);\n    map[key] = entry;\n  }\n\n  return removed;\n};\n/**\n * @param  {string} key\n * @return {}\n */\n\n\nLRUProto.get = function (key) {\n  var entry = this._map[key];\n  var list = this._list;\n\n  if (entry != null) {\n    // Put the latest used entry in the tail\n    if (entry !== list.tail) {\n      list.remove(entry);\n      list.insertEntry(entry);\n    }\n\n    return entry.value;\n  }\n};\n/**\n * Clear the cache\n */\n\n\nLRUProto.clear = function () {\n  this._list.clear();\n\n  this._map = {};\n};\n\nvar _default = LRU;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}