{"ast":null,"code":"import * as imageConversion from 'image-conversion';\nexport default {\n  created() {\n    const path = this.$route.path;\n    const arr = path.split('/');\n    const articleId = arr[2];\n\n    if (articleId) {\n      this.axios.get('/api/admin/articles/' + articleId).then(({\n        data\n      }) => {\n        this.article = data.data;\n      });\n    } else {\n      const article = sessionStorage.getItem('article');\n\n      if (article) {\n        this.article = JSON.parse(article);\n      }\n    }\n  },\n\n  destroyed() {\n    this.autoSaveArticle();\n  },\n\n  data: function () {\n    return {\n      addOrEdit: false,\n      autoSave: true,\n      categoryName: '',\n      tagName: '',\n      categorys: [],\n      tagList: [],\n      typeList: [{\n        type: 1,\n        desc: '原创'\n      }, {\n        type: 2,\n        desc: '转载'\n      }, {\n        type: 3,\n        desc: '翻译'\n      }],\n      article: {\n        id: null,\n        articleTitle: this.$moment(new Date()).format('YYYY-MM-DD'),\n        articleContent: '',\n        articleAbstract: '',\n        articleCover: '',\n        categoryName: null,\n        tagNames: [],\n        isTop: 0,\n        type: 1,\n        status: 1\n      },\n      headers: {\n        Authorization: 'Bearer ' + sessionStorage.getItem('token')\n      }\n    };\n  },\n  methods: {\n    listCategories() {\n      this.axios.get('/api/admin/categories/search').then(({\n        data\n      }) => {\n        this.categorys = data.data;\n      });\n    },\n\n    listTags() {\n      this.axios.get('/api/admin/tags/search').then(({\n        data\n      }) => {\n        this.tagList = data.data;\n      });\n    },\n\n    openModel() {\n      if (this.article.articleTitle.trim() == '') {\n        this.$message.error('文章标题不能为空');\n        return false;\n      }\n\n      if (this.article.articleContent.trim() == '') {\n        this.$message.error('文章内容不能为空');\n        return false;\n      }\n\n      this.listCategories();\n      this.listTags();\n      this.addOrEdit = true;\n    },\n\n    uploadCover(response) {\n      this.article.articleCover = response.data;\n    },\n\n    beforeUpload(file) {\n      return new Promise(resolve => {\n        if (file.size / 1024 < this.config.UPLOAD_SIZE) {\n          resolve(file);\n        }\n\n        imageConversion.compressAccurately(file, this.config.UPLOAD_SIZE).then(res => {\n          resolve(res);\n        });\n      });\n    },\n\n    uploadImg(pos, file) {\n      var formdata = new FormData();\n\n      if (file.size / 1024 < this.config.UPLOAD_SIZE) {\n        formdata.append('file', file);\n        this.axios.post('/api/admin/articles/images', formdata).then(({\n          data\n        }) => {\n          this.$refs.md.$img2Url(pos, data.data);\n        });\n      } else {\n        imageConversion.compressAccurately(file, this.config.UPLOAD_SIZE).then(res => {\n          formdata.append('file', new window.File([res], file.name, {\n            type: file.type\n          }));\n          this.axios.post('/api/admin/articles/images', formdata).then(({\n            data\n          }) => {\n            this.$refs.md.$img2Url(pos, data.data);\n          });\n        });\n      }\n    },\n\n    saveArticleDraft() {\n      if (this.article.articleTitle.trim() == '') {\n        this.$message.error('文章标题不能为空');\n        return false;\n      }\n\n      if (this.article.articleContent.trim() == '') {\n        this.$message.error('文章内容不能为空');\n        return false;\n      }\n\n      this.article.status = 3;\n      this.axios.post('/api/admin/articles', this.article).then(({\n        data\n      }) => {\n        if (data.code === 0) {\n          if (this.article.id === null) {\n            this.$store.commit('removeTab', '发布文章');\n          } else {\n            this.$store.commit('removeTab', '修改文章');\n          }\n\n          sessionStorage.removeItem('article');\n          this.$router.push({\n            path: '/article-list'\n          });\n          this.$notify.success({\n            title: '成功',\n            message: '保存草稿成功'\n          });\n        } else {\n          this.$notify.error({\n            title: '失败',\n            message: '保存草稿失败'\n          });\n        }\n      });\n      this.autoSave = false;\n    },\n\n    saveOrUpdateArticle() {\n      if (this.article.articleTitle.trim() == '') {\n        this.$message.error('文章标题不能为空');\n        return false;\n      }\n\n      if (this.article.articleContent.trim() == '') {\n        this.$message.error('文章内容不能为空');\n        return false;\n      }\n\n      if (this.article.categoryName == null) {\n        this.$message.error('文章分类不能为空');\n        return false;\n      }\n\n      if (this.article.tagNames.length == 0) {\n        this.$message.error('文章标签不能为空');\n        return false;\n      }\n\n      if (this.article.articleCover.trim() == '') {\n        this.$message.error('文章封面不能为空');\n        return false;\n      }\n\n      this.axios.post('/api/admin/articles', this.article).then(({\n        data\n      }) => {\n        if (data.code === 0) {\n          if (this.article.id === null) {\n            this.$store.commit('removeTab', '发布文章');\n          } else {\n            this.$store.commit('removeTab', '修改文章');\n          }\n\n          sessionStorage.removeItem('article');\n          this.$router.push({\n            path: '/article-list'\n          });\n          this.$notify.success({\n            title: '成功',\n            message: data.message\n          });\n        } else {\n          this.$notify.error({\n            title: '失败',\n            message: data.message\n          });\n        }\n\n        this.addOrEdit = false;\n      });\n      this.autoSave = false;\n    },\n\n    autoSaveArticle() {\n      if (this.autoSave && this.article.articleTitle.trim() != '' && this.article.articleContent.trim() != '' && this.article.id != null) {\n        this.axios.post('/api/admin/articles', this.article).then(({\n          data\n        }) => {\n          if (data.code === 0) {\n            this.$notify.success({\n              title: '成功',\n              message: '自动保存成功'\n            });\n          } else {\n            this.$notify.error({\n              title: '失败',\n              message: '自动保存失败'\n            });\n          }\n        });\n      }\n\n      if (this.autoSave && this.article.id == null) {\n        sessionStorage.setItem('article', JSON.stringify(this.article));\n      }\n    },\n\n    searchCategories(keywords, cb) {\n      this.axios.get('/api/admin/categories/search', {\n        params: {\n          keywords: keywords\n        }\n      }).then(({\n        data\n      }) => {\n        cb(data.data);\n      });\n    },\n\n    handleSelectCategories(item) {\n      this.addCategory({\n        categoryName: item.categoryName\n      });\n    },\n\n    saveCategory() {\n      if (this.categoryName.trim() != '') {\n        this.addCategory({\n          categoryName: this.categoryName\n        });\n        this.categoryName = '';\n      }\n    },\n\n    addCategory(item) {\n      this.article.categoryName = item.categoryName;\n    },\n\n    removeCategory() {\n      this.article.categoryName = null;\n    },\n\n    searchTags(keywords, cb) {\n      this.axios.get('/api/admin/tags/search', {\n        params: {\n          keywords: keywords\n        }\n      }).then(({\n        data\n      }) => {\n        cb(data.data);\n      });\n    },\n\n    handleSelectTag(item) {\n      this.addTag({\n        tagName: item.tagName\n      });\n    },\n\n    saveTag() {\n      if (this.tagName.trim() != '') {\n        this.addTag({\n          tagName: this.tagName\n        });\n        this.tagName = '';\n      }\n    },\n\n    addTag(item) {\n      if (this.article.tagNames.indexOf(item.tagName) == -1) {\n        this.article.tagNames.push(item.tagName);\n      }\n    },\n\n    removeTag(item) {\n      const index = this.article.tagNames.indexOf(item);\n      this.article.tagNames.splice(index, 1);\n    }\n\n  },\n  computed: {\n    tagClass() {\n      return function (item) {\n        const index = this.article.tagNames.indexOf(item.tagName);\n        return index != -1 ? 'tag-item-select' : 'tag-item';\n      };\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}