{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar axisPointerModelHelper = require(\"../axisPointer/modelHelper\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Base class of AxisView.\n */\n\n\nvar AxisView = echarts.extendComponentView({\n  type: 'axis',\n\n  /**\n   * @private\n   */\n  _axisPointer: null,\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  axisPointerClass: null,\n\n  /**\n   * @override\n   */\n  render: function (axisModel, ecModel, api, payload) {\n    // FIXME\n    // This process should proformed after coordinate systems updated\n    // (axis scale updated), and should be performed each time update.\n    // So put it here temporarily, although it is not appropriate to\n    // put a model-writing procedure in `view`.\n    this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);\n    AxisView.superApply(this, 'render', arguments);\n    updateAxisPointer(this, axisModel, ecModel, api, payload, true);\n  },\n\n  /**\n   * Action handler.\n   * @public\n   * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n   * @param {module:echarts/model/Global} ecModel\n   * @param {module:echarts/ExtensionAPI} api\n   * @param {Object} payload\n   */\n  updateAxisPointer: function (axisModel, ecModel, api, payload, force) {\n    updateAxisPointer(this, axisModel, ecModel, api, payload, false);\n  },\n\n  /**\n   * @override\n   */\n  remove: function (ecModel, api) {\n    var axisPointer = this._axisPointer;\n    axisPointer && axisPointer.remove(api);\n    AxisView.superApply(this, 'remove', arguments);\n  },\n\n  /**\n   * @override\n   */\n  dispose: function (ecModel, api) {\n    disposeAxisPointer(this, api);\n    AxisView.superApply(this, 'dispose', arguments);\n  }\n});\n\nfunction updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {\n  var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);\n\n  if (!Clazz) {\n    return;\n  }\n\n  var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);\n  axisPointerModel ? (axisView._axisPointer || (axisView._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : disposeAxisPointer(axisView, api);\n}\n\nfunction disposeAxisPointer(axisView, ecModel, api) {\n  var axisPointer = axisView._axisPointer;\n  axisPointer && axisPointer.dispose(ecModel, api);\n  axisView._axisPointer = null;\n}\n\nvar axisPointerClazz = [];\n\nAxisView.registerAxisPointerClass = function (type, clazz) {\n  axisPointerClazz[type] = clazz;\n};\n\nAxisView.getAxisPointerClass = function (type) {\n  return type && axisPointerClazz[type];\n};\n\nvar _default = AxisView;\nmodule.exports = _default;","map":{"version":3,"names":["_config","require","__DEV__","echarts","axisPointerModelHelper","AxisView","extendComponentView","type","_axisPointer","axisPointerClass","render","axisModel","ecModel","api","payload","fixValue","superApply","arguments","updateAxisPointer","force","remove","axisPointer","dispose","disposeAxisPointer","axisView","forceRender","Clazz","getAxisPointerClass","axisPointerModel","getAxisPointerModel","axisPointerClazz","registerAxisPointerClass","clazz","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/component/axis/AxisView.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar axisPointerModelHelper = require(\"../axisPointer/modelHelper\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Base class of AxisView.\n */\nvar AxisView = echarts.extendComponentView({\n  type: 'axis',\n\n  /**\n   * @private\n   */\n  _axisPointer: null,\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  axisPointerClass: null,\n\n  /**\n   * @override\n   */\n  render: function (axisModel, ecModel, api, payload) {\n    // FIXME\n    // This process should proformed after coordinate systems updated\n    // (axis scale updated), and should be performed each time update.\n    // So put it here temporarily, although it is not appropriate to\n    // put a model-writing procedure in `view`.\n    this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);\n    AxisView.superApply(this, 'render', arguments);\n    updateAxisPointer(this, axisModel, ecModel, api, payload, true);\n  },\n\n  /**\n   * Action handler.\n   * @public\n   * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n   * @param {module:echarts/model/Global} ecModel\n   * @param {module:echarts/ExtensionAPI} api\n   * @param {Object} payload\n   */\n  updateAxisPointer: function (axisModel, ecModel, api, payload, force) {\n    updateAxisPointer(this, axisModel, ecModel, api, payload, false);\n  },\n\n  /**\n   * @override\n   */\n  remove: function (ecModel, api) {\n    var axisPointer = this._axisPointer;\n    axisPointer && axisPointer.remove(api);\n    AxisView.superApply(this, 'remove', arguments);\n  },\n\n  /**\n   * @override\n   */\n  dispose: function (ecModel, api) {\n    disposeAxisPointer(this, api);\n    AxisView.superApply(this, 'dispose', arguments);\n  }\n});\n\nfunction updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {\n  var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);\n\n  if (!Clazz) {\n    return;\n  }\n\n  var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);\n  axisPointerModel ? (axisView._axisPointer || (axisView._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : disposeAxisPointer(axisView, api);\n}\n\nfunction disposeAxisPointer(axisView, ecModel, api) {\n  var axisPointer = axisView._axisPointer;\n  axisPointer && axisPointer.dispose(ecModel, api);\n  axisView._axisPointer = null;\n}\n\nvar axisPointerClazz = [];\n\nAxisView.registerAxisPointerClass = function (type, clazz) {\n  axisPointerClazz[type] = clazz;\n};\n\nAxisView.getAxisPointerClass = function (type) {\n  return type && axisPointerClazz[type];\n};\n\nvar _default = AxisView;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}