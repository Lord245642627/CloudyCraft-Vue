{"ast":null,"code":"function _typeof(e) {\n  return (_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n    return typeof e;\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n  })(e);\n}\n\nfunction plugin(e, n) {\n  if (!e.vueAxiosInstalled) {\n    var o = isAxiosLike(n) ? migrateToMultipleInstances(n) : n;\n\n    if (isValidConfig(o)) {\n      var t = getVueVersion(e);\n\n      if (t) {\n        var i = t < 3 ? registerOnVue2 : registerOnVue3;\n        Object.keys(o).forEach(function (n) {\n          i(e, n, o[n]);\n        }), e.vueAxiosInstalled = !0;\n      } else console.error(\"[vue-axios] unknown Vue version\");\n    } else console.error(\"[vue-axios] configuration is invalid, expected options are either <axios_instance> or { <registration_key>: <axios_instance> }\");\n  }\n}\n\nfunction registerOnVue2(e, n, o) {\n  Object.defineProperty(e.prototype, n, {\n    get: function () {\n      return o;\n    }\n  }), e[n] = o;\n}\n\nfunction registerOnVue3(e, n, o) {\n  e.config.globalProperties[n] = o, e[n] = o;\n}\n\nfunction isAxiosLike(e) {\n  return e && \"function\" == typeof e.get && \"function\" == typeof e.post;\n}\n\nfunction migrateToMultipleInstances(e) {\n  return {\n    axios: e,\n    $http: e\n  };\n}\n\nfunction isValidConfig(e) {\n  return \"object\" === _typeof(e) && Object.keys(e).every(function (n) {\n    return isAxiosLike(e[n]);\n  });\n}\n\nfunction getVueVersion(e) {\n  return e && e.version && Number(e.version.split(\".\")[0]);\n}\n\n\"object\" == (\"undefined\" == typeof exports ? \"undefined\" : _typeof(exports)) ? module.exports = plugin : \"function\" == typeof define && define.amd ? define([], function () {\n  return plugin;\n}) : window.Vue && window.axios && window.Vue.use && Vue.use(plugin, window.axios);\nexport { plugin as default };","map":null,"metadata":{},"sourceType":"module"}