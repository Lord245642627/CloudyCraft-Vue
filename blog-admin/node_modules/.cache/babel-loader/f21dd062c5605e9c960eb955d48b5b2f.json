{"ast":null,"code":"require(\"core-js/modules/esnext.typed-array.find-last.js\");\n\nrequire(\"core-js/modules/esnext.typed-array.find-last-index.js\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n\nvar createRenderPlanner = require(\"../chart/helper/createRenderPlanner\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/* global Float32Array */\n\n\nvar STACK_PREFIX = '__ec_stack_';\nvar LARGE_BAR_MIN_WIDTH = 0.5;\nvar LargeArr = typeof Float32Array !== 'undefined' ? Float32Array : Array;\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(axis) {\n  return axis.dim + axis.index;\n}\n/**\n * @param {Object} opt\n * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.\n * @param {number} opt.count Positive interger.\n * @param {number} [opt.barWidth]\n * @param {number} [opt.barMaxWidth]\n * @param {number} [opt.barMinWidth]\n * @param {number} [opt.barGap]\n * @param {number} [opt.barCategoryGap]\n * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.\n */\n\n\nfunction getLayoutOnAxis(opt) {\n  var params = [];\n  var baseAxis = opt.axis;\n  var axisKey = 'axis0';\n\n  if (baseAxis.type !== 'category') {\n    return;\n  }\n\n  var bandWidth = baseAxis.getBandWidth();\n\n  for (var i = 0; i < opt.count || 0; i++) {\n    params.push(zrUtil.defaults({\n      bandWidth: bandWidth,\n      axisKey: axisKey,\n      stackId: STACK_PREFIX + i\n    }, opt));\n  }\n\n  var widthAndOffsets = doCalBarWidthAndOffset(params);\n  var result = [];\n\n  for (var i = 0; i < opt.count; i++) {\n    var item = widthAndOffsets[axisKey][STACK_PREFIX + i];\n    item.offsetCenter = item.offset + item.width / 2;\n    result.push(item);\n  }\n\n  return result;\n}\n\nfunction prepareLayoutBarSeries(seriesType, ecModel) {\n  var seriesModels = [];\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for cartesian2d only\n    if (isOnCartesian(seriesModel) && !isInLargeMode(seriesModel)) {\n      seriesModels.push(seriesModel);\n    }\n  });\n  return seriesModels;\n}\n/**\n * Map from (baseAxis.dim + '_' + baseAxis.index) to min gap of two adjacent\n * values.\n * This works for time axes, value axes, and log axes.\n * For a single time axis, return value is in the form like\n * {'x_0': [1000000]}.\n * The value of 1000000 is in milliseconds.\n */\n\n\nfunction getValueAxesMinGaps(barSeries) {\n  /**\n   * Map from axis.index to values.\n   * For a single time axis, axisValues is in the form like\n   * {'x_0': [1495555200000, 1495641600000, 1495728000000]}.\n   * Items in axisValues[x], e.g. 1495555200000, are time values of all\n   * series.\n   */\n  var axisValues = {};\n  zrUtil.each(barSeries, function (seriesModel) {\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n\n    if (baseAxis.type !== 'time' && baseAxis.type !== 'value') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var key = baseAxis.dim + '_' + baseAxis.index;\n    var dim = data.mapDimension(baseAxis.dim);\n\n    for (var i = 0, cnt = data.count(); i < cnt; ++i) {\n      var value = data.get(dim, i);\n\n      if (!axisValues[key]) {\n        // No previous data for the axis\n        axisValues[key] = [value];\n      } else {\n        // No value in previous series\n        axisValues[key].push(value);\n      } // Ignore duplicated time values in the same axis\n\n    }\n  });\n  var axisMinGaps = [];\n\n  for (var key in axisValues) {\n    if (axisValues.hasOwnProperty(key)) {\n      var valuesInAxis = axisValues[key];\n\n      if (valuesInAxis) {\n        // Sort axis values into ascending order to calculate gaps\n        valuesInAxis.sort(function (a, b) {\n          return a - b;\n        });\n        var min = null;\n\n        for (var j = 1; j < valuesInAxis.length; ++j) {\n          var delta = valuesInAxis[j] - valuesInAxis[j - 1];\n\n          if (delta > 0) {\n            // Ignore 0 delta because they are of the same axis value\n            min = min === null ? delta : Math.min(min, delta);\n          }\n        } // Set to null if only have one data\n\n\n        axisMinGaps[key] = min;\n      }\n    }\n  }\n\n  return axisMinGaps;\n}\n\nfunction makeColumnLayout(barSeries) {\n  var axisMinGaps = getValueAxesMinGaps(barSeries);\n  var seriesInfoList = [];\n  zrUtil.each(barSeries, function (seriesModel) {\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth;\n\n    if (baseAxis.type === 'category') {\n      bandWidth = baseAxis.getBandWidth();\n    } else if (baseAxis.type === 'value' || baseAxis.type === 'time') {\n      var key = baseAxis.dim + '_' + baseAxis.index;\n      var minGap = axisMinGaps[key];\n      var extentSpan = Math.abs(axisExtent[1] - axisExtent[0]);\n      var scale = baseAxis.scale.getExtent();\n      var scaleSpan = Math.abs(scale[1] - scale[0]);\n      bandWidth = minGap ? extentSpan / scaleSpan * minGap : extentSpan; // When there is only one data value\n    } else {\n      var data = seriesModel.getData();\n      bandWidth = Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    }\n\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barMinWidth = parsePercent( // barMinWidth by default is 1 in cartesian. Because in value axis,\n    // the auto-calculated bar width might be less than 1.\n    seriesModel.get('barMinWidth') || 1, bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n    seriesInfoList.push({\n      bandWidth: bandWidth,\n      barWidth: barWidth,\n      barMaxWidth: barMaxWidth,\n      barMinWidth: barMinWidth,\n      barGap: barGap,\n      barCategoryGap: barCategoryGap,\n      axisKey: getAxisKey(baseAxis),\n      stackId: getSeriesStackId(seriesModel)\n    });\n  });\n  return doCalBarWidthAndOffset(seriesInfoList);\n}\n\nfunction doCalBarWidthAndOffset(seriesInfoList) {\n  // Columns info on each category axis. Key is cartesian name\n  var columnsMap = {};\n  zrUtil.each(seriesInfoList, function (seriesInfo, idx) {\n    var axisKey = seriesInfo.axisKey;\n    var bandWidth = seriesInfo.bandWidth;\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = seriesInfo.stackId;\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    }; // Caution: In a single coordinate system, these barGrid attributes\n    // will be shared by series. Consider that they have default values,\n    // only the attributes set on the last series will work.\n    // Do not change this fact unless there will be a break change.\n\n    var barWidth = seriesInfo.barWidth;\n\n    if (barWidth && !stacks[stackId].width) {\n      // See #6312, do not restrict width.\n      stacks[stackId].width = barWidth;\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    var barMaxWidth = seriesInfo.barMaxWidth;\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    var barMinWidth = seriesInfo.barMinWidth;\n    barMinWidth && (stacks[stackId].minWidth = barMinWidth);\n    var barGap = seriesInfo.barGap;\n    barGap != null && (columnsOnAxis.gap = barGap);\n    var barCategoryGap = seriesInfo.barCategoryGap;\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column) {\n      var maxWidth = column.maxWidth;\n      var minWidth = column.minWidth;\n\n      if (!column.width) {\n        var finalWidth = autoWidth;\n\n        if (maxWidth && maxWidth < finalWidth) {\n          finalWidth = Math.min(maxWidth, remainedWidth);\n        } // `minWidth` has higher priority. `minWidth` decide that wheter the\n        // bar is able to be visible. So `minWidth` should not be restricted\n        // by `maxWidth` or `remainedWidth` (which is from `bandWidth`). In\n        // the extreme cases for `value` axis, bars are allowed to overlap\n        // with each other if `minWidth` specified.\n\n\n        if (minWidth && minWidth > finalWidth) {\n          finalWidth = minWidth;\n        }\n\n        if (finalWidth !== autoWidth) {\n          column.width = finalWidth;\n          remainedWidth -= finalWidth + barGapPercent * finalWidth;\n          autoWidthCount--;\n        }\n      } else {\n        // `barMinWidth/barMaxWidth` has higher priority than `barWidth`, as\n        // CSS does. Becuase barWidth can be a percent value, where\n        // `barMaxWidth` can be used to restrict the final width.\n        var finalWidth = column.width;\n\n        if (maxWidth) {\n          finalWidth = Math.min(finalWidth, maxWidth);\n        } // `minWidth` has higher priority, as described above\n\n\n        if (minWidth) {\n          finalWidth = Math.max(finalWidth, minWidth);\n        }\n\n        column.width = finalWidth;\n        remainedWidth -= finalWidth + barGapPercent * finalWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        bandWidth: bandWidth,\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n/**\n * @param {Object} barWidthAndOffset The result of makeColumnLayout\n * @param {module:echarts/coord/Axis} axis\n * @param {module:echarts/model/Series} [seriesModel] If not provided, return all.\n * @return {Object} {stackId: {offset, width}} or {offset, width} if seriesModel provided.\n */\n\n\nfunction retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {\n  if (barWidthAndOffset && axis) {\n    var result = barWidthAndOffset[getAxisKey(axis)];\n\n    if (result != null && seriesModel != null) {\n      result = result[getSeriesStackId(seriesModel)];\n    }\n\n    return result;\n  }\n}\n/**\n * @param {string} seriesType\n * @param {module:echarts/model/Global} ecModel\n */\n\n\nfunction layout(seriesType, ecModel) {\n  var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);\n  var barWidthAndOffset = makeColumnLayout(seriesModels);\n  var lastStackCoords = {};\n  var lastStackCoordsOrigin = {};\n  zrUtil.each(seriesModels, function (seriesModel) {\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = cartesian.getOtherAxis(baseAxis);\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\n\n    data.setLayout({\n      bandWidth: columnLayoutInfo.bandWidth,\n      offset: columnOffset,\n      size: columnWidth\n    });\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var isValueAxisH = valueAxis.isHorizontal();\n    var valueAxisStart = getValueAxisStart(baseAxis, valueAxis, stacked);\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n\n      if (stacked) {\n        // Only ordinal axis can be stacked.\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            // Positive stack\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var x;\n      var y;\n      var width;\n      var height;\n\n      if (isValueAxisH) {\n        var coord = cartesian.dataToPoint([value, baseValue]);\n        x = baseCoord;\n        y = coord[1] + columnOffset;\n        width = coord[0] - valueAxisStart;\n        height = columnWidth;\n\n        if (Math.abs(width) < barMinHeight) {\n          width = (width < 0 ? -1 : 1) * barMinHeight;\n        } // Ignore stack from NaN value\n\n\n        if (!isNaN(width)) {\n          stacked && (lastStackCoords[stackId][baseValue][sign] += width);\n        }\n      } else {\n        var coord = cartesian.dataToPoint([baseValue, value]);\n        x = coord[0] + columnOffset;\n        y = baseCoord;\n        width = columnWidth;\n        height = coord[1] - valueAxisStart;\n\n        if (Math.abs(height) < barMinHeight) {\n          // Include zero to has a positive bar\n          height = (height <= 0 ? -1 : 1) * barMinHeight;\n        } // Ignore stack from NaN value\n\n\n        if (!isNaN(height)) {\n          stacked && (lastStackCoords[stackId][baseValue][sign] += height);\n        }\n      }\n\n      data.setItemLayout(idx, {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    }\n  }, this);\n} // TODO: Do not support stack in large mode yet.\n\n\nvar largeLayout = {\n  seriesType: 'bar',\n  plan: createRenderPlanner(),\n  reset: function (seriesModel) {\n    if (!isOnCartesian(seriesModel) || !isInLargeMode(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var coordLayout = cartesian.grid.getRect();\n    var baseAxis = cartesian.getBaseAxis();\n    var valueAxis = cartesian.getOtherAxis(baseAxis);\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var valueAxisHorizontal = valueAxis.isHorizontal();\n    var valueDimIdx = valueAxisHorizontal ? 0 : 1;\n    var barWidth = retrieveColumnLayout(makeColumnLayout([seriesModel]), baseAxis, seriesModel).width;\n\n    if (!(barWidth > LARGE_BAR_MIN_WIDTH)) {\n      // jshint ignore:line\n      barWidth = LARGE_BAR_MIN_WIDTH;\n    }\n\n    return {\n      progress: progress\n    };\n\n    function progress(params, data) {\n      var count = params.count;\n      var largePoints = new LargeArr(count * 2);\n      var largeBackgroundPoints = new LargeArr(count * 2);\n      var largeDataIndices = new LargeArr(count);\n      var dataIndex;\n      var coord = [];\n      var valuePair = [];\n      var pointsOffset = 0;\n      var idxOffset = 0;\n\n      while ((dataIndex = params.next()) != null) {\n        valuePair[valueDimIdx] = data.get(valueDim, dataIndex);\n        valuePair[1 - valueDimIdx] = data.get(baseDim, dataIndex);\n        coord = cartesian.dataToPoint(valuePair, null, coord); // Data index might not be in order, depends on `progressiveChunkMode`.\n\n        largeBackgroundPoints[pointsOffset] = valueAxisHorizontal ? coordLayout.x + coordLayout.width : coord[0];\n        largePoints[pointsOffset++] = coord[0];\n        largeBackgroundPoints[pointsOffset] = valueAxisHorizontal ? coord[1] : coordLayout.y + coordLayout.height;\n        largePoints[pointsOffset++] = coord[1];\n        largeDataIndices[idxOffset++] = dataIndex;\n      }\n\n      data.setLayout({\n        largePoints: largePoints,\n        largeDataIndices: largeDataIndices,\n        largeBackgroundPoints: largeBackgroundPoints,\n        barWidth: barWidth,\n        valueAxisStart: getValueAxisStart(baseAxis, valueAxis, false),\n        backgroundStart: valueAxisHorizontal ? coordLayout.x : coordLayout.y,\n        valueAxisHorizontal: valueAxisHorizontal\n      });\n    }\n  }\n};\n\nfunction isOnCartesian(seriesModel) {\n  return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';\n}\n\nfunction isInLargeMode(seriesModel) {\n  return seriesModel.pipelineContext && seriesModel.pipelineContext.large;\n} // See cases in `test/bar-start.html` and `#7412`, `#8747`.\n\n\nfunction getValueAxisStart(baseAxis, valueAxis, stacked) {\n  return valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.type === 'log' ? 1 : 0));\n}\n\nexports.getLayoutOnAxis = getLayoutOnAxis;\nexports.prepareLayoutBarSeries = prepareLayoutBarSeries;\nexports.makeColumnLayout = makeColumnLayout;\nexports.retrieveColumnLayout = retrieveColumnLayout;\nexports.layout = layout;\nexports.largeLayout = largeLayout;","map":{"version":3,"names":["zrUtil","require","_number","parsePercent","_dataStackHelper","isDimensionStacked","createRenderPlanner","STACK_PREFIX","LARGE_BAR_MIN_WIDTH","LargeArr","Float32Array","Array","getSeriesStackId","seriesModel","get","seriesIndex","getAxisKey","axis","dim","index","getLayoutOnAxis","opt","params","baseAxis","axisKey","type","bandWidth","getBandWidth","i","count","push","defaults","stackId","widthAndOffsets","doCalBarWidthAndOffset","result","item","offsetCenter","offset","width","prepareLayoutBarSeries","seriesType","ecModel","seriesModels","eachSeriesByType","isOnCartesian","isInLargeMode","getValueAxesMinGaps","barSeries","axisValues","each","cartesian","coordinateSystem","getBaseAxis","data","getData","key","mapDimension","cnt","value","axisMinGaps","hasOwnProperty","valuesInAxis","sort","a","b","min","j","length","delta","Math","makeColumnLayout","seriesInfoList","axisExtent","getExtent","minGap","extentSpan","abs","scale","scaleSpan","barWidth","barMaxWidth","barMinWidth","barGap","barCategoryGap","columnsMap","seriesInfo","idx","columnsOnAxis","remainedWidth","autoWidthCount","categoryGap","gap","stacks","maxWidth","minWidth","coordSysName","barGapPercent","autoWidth","max","column","finalWidth","widthSum","lastColumn","retrieveColumnLayout","barWidthAndOffset","layout","lastStackCoords","lastStackCoordsOrigin","columnLayoutInfo","columnOffset","columnWidth","valueAxis","getOtherAxis","barMinHeight","setLayout","size","valueDim","baseDim","stacked","isValueAxisH","isHorizontal","valueAxisStart","getValueAxisStart","len","baseValue","sign","baseCoord","p","n","x","y","height","coord","dataToPoint","isNaN","setItemLayout","largeLayout","plan","reset","coordLayout","grid","getRect","valueAxisHorizontal","valueDimIdx","progress","largePoints","largeBackgroundPoints","largeDataIndices","dataIndex","valuePair","pointsOffset","idxOffset","next","backgroundStart","pipelineContext","large","toGlobalCoord","dataToCoord","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-admin/node_modules/echarts/lib/layout/barGrid.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n\nvar createRenderPlanner = require(\"../chart/helper/createRenderPlanner\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/* global Float32Array */\nvar STACK_PREFIX = '__ec_stack_';\nvar LARGE_BAR_MIN_WIDTH = 0.5;\nvar LargeArr = typeof Float32Array !== 'undefined' ? Float32Array : Array;\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(axis) {\n  return axis.dim + axis.index;\n}\n/**\n * @param {Object} opt\n * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.\n * @param {number} opt.count Positive interger.\n * @param {number} [opt.barWidth]\n * @param {number} [opt.barMaxWidth]\n * @param {number} [opt.barMinWidth]\n * @param {number} [opt.barGap]\n * @param {number} [opt.barCategoryGap]\n * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.\n */\n\n\nfunction getLayoutOnAxis(opt) {\n  var params = [];\n  var baseAxis = opt.axis;\n  var axisKey = 'axis0';\n\n  if (baseAxis.type !== 'category') {\n    return;\n  }\n\n  var bandWidth = baseAxis.getBandWidth();\n\n  for (var i = 0; i < opt.count || 0; i++) {\n    params.push(zrUtil.defaults({\n      bandWidth: bandWidth,\n      axisKey: axisKey,\n      stackId: STACK_PREFIX + i\n    }, opt));\n  }\n\n  var widthAndOffsets = doCalBarWidthAndOffset(params);\n  var result = [];\n\n  for (var i = 0; i < opt.count; i++) {\n    var item = widthAndOffsets[axisKey][STACK_PREFIX + i];\n    item.offsetCenter = item.offset + item.width / 2;\n    result.push(item);\n  }\n\n  return result;\n}\n\nfunction prepareLayoutBarSeries(seriesType, ecModel) {\n  var seriesModels = [];\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for cartesian2d only\n    if (isOnCartesian(seriesModel) && !isInLargeMode(seriesModel)) {\n      seriesModels.push(seriesModel);\n    }\n  });\n  return seriesModels;\n}\n/**\n * Map from (baseAxis.dim + '_' + baseAxis.index) to min gap of two adjacent\n * values.\n * This works for time axes, value axes, and log axes.\n * For a single time axis, return value is in the form like\n * {'x_0': [1000000]}.\n * The value of 1000000 is in milliseconds.\n */\n\n\nfunction getValueAxesMinGaps(barSeries) {\n  /**\n   * Map from axis.index to values.\n   * For a single time axis, axisValues is in the form like\n   * {'x_0': [1495555200000, 1495641600000, 1495728000000]}.\n   * Items in axisValues[x], e.g. 1495555200000, are time values of all\n   * series.\n   */\n  var axisValues = {};\n  zrUtil.each(barSeries, function (seriesModel) {\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n\n    if (baseAxis.type !== 'time' && baseAxis.type !== 'value') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var key = baseAxis.dim + '_' + baseAxis.index;\n    var dim = data.mapDimension(baseAxis.dim);\n\n    for (var i = 0, cnt = data.count(); i < cnt; ++i) {\n      var value = data.get(dim, i);\n\n      if (!axisValues[key]) {\n        // No previous data for the axis\n        axisValues[key] = [value];\n      } else {\n        // No value in previous series\n        axisValues[key].push(value);\n      } // Ignore duplicated time values in the same axis\n\n    }\n  });\n  var axisMinGaps = [];\n\n  for (var key in axisValues) {\n    if (axisValues.hasOwnProperty(key)) {\n      var valuesInAxis = axisValues[key];\n\n      if (valuesInAxis) {\n        // Sort axis values into ascending order to calculate gaps\n        valuesInAxis.sort(function (a, b) {\n          return a - b;\n        });\n        var min = null;\n\n        for (var j = 1; j < valuesInAxis.length; ++j) {\n          var delta = valuesInAxis[j] - valuesInAxis[j - 1];\n\n          if (delta > 0) {\n            // Ignore 0 delta because they are of the same axis value\n            min = min === null ? delta : Math.min(min, delta);\n          }\n        } // Set to null if only have one data\n\n\n        axisMinGaps[key] = min;\n      }\n    }\n  }\n\n  return axisMinGaps;\n}\n\nfunction makeColumnLayout(barSeries) {\n  var axisMinGaps = getValueAxesMinGaps(barSeries);\n  var seriesInfoList = [];\n  zrUtil.each(barSeries, function (seriesModel) {\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth;\n\n    if (baseAxis.type === 'category') {\n      bandWidth = baseAxis.getBandWidth();\n    } else if (baseAxis.type === 'value' || baseAxis.type === 'time') {\n      var key = baseAxis.dim + '_' + baseAxis.index;\n      var minGap = axisMinGaps[key];\n      var extentSpan = Math.abs(axisExtent[1] - axisExtent[0]);\n      var scale = baseAxis.scale.getExtent();\n      var scaleSpan = Math.abs(scale[1] - scale[0]);\n      bandWidth = minGap ? extentSpan / scaleSpan * minGap : extentSpan; // When there is only one data value\n    } else {\n      var data = seriesModel.getData();\n      bandWidth = Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    }\n\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barMinWidth = parsePercent( // barMinWidth by default is 1 in cartesian. Because in value axis,\n    // the auto-calculated bar width might be less than 1.\n    seriesModel.get('barMinWidth') || 1, bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n    seriesInfoList.push({\n      bandWidth: bandWidth,\n      barWidth: barWidth,\n      barMaxWidth: barMaxWidth,\n      barMinWidth: barMinWidth,\n      barGap: barGap,\n      barCategoryGap: barCategoryGap,\n      axisKey: getAxisKey(baseAxis),\n      stackId: getSeriesStackId(seriesModel)\n    });\n  });\n  return doCalBarWidthAndOffset(seriesInfoList);\n}\n\nfunction doCalBarWidthAndOffset(seriesInfoList) {\n  // Columns info on each category axis. Key is cartesian name\n  var columnsMap = {};\n  zrUtil.each(seriesInfoList, function (seriesInfo, idx) {\n    var axisKey = seriesInfo.axisKey;\n    var bandWidth = seriesInfo.bandWidth;\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = seriesInfo.stackId;\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    }; // Caution: In a single coordinate system, these barGrid attributes\n    // will be shared by series. Consider that they have default values,\n    // only the attributes set on the last series will work.\n    // Do not change this fact unless there will be a break change.\n\n    var barWidth = seriesInfo.barWidth;\n\n    if (barWidth && !stacks[stackId].width) {\n      // See #6312, do not restrict width.\n      stacks[stackId].width = barWidth;\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    var barMaxWidth = seriesInfo.barMaxWidth;\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    var barMinWidth = seriesInfo.barMinWidth;\n    barMinWidth && (stacks[stackId].minWidth = barMinWidth);\n    var barGap = seriesInfo.barGap;\n    barGap != null && (columnsOnAxis.gap = barGap);\n    var barCategoryGap = seriesInfo.barCategoryGap;\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column) {\n      var maxWidth = column.maxWidth;\n      var minWidth = column.minWidth;\n\n      if (!column.width) {\n        var finalWidth = autoWidth;\n\n        if (maxWidth && maxWidth < finalWidth) {\n          finalWidth = Math.min(maxWidth, remainedWidth);\n        } // `minWidth` has higher priority. `minWidth` decide that wheter the\n        // bar is able to be visible. So `minWidth` should not be restricted\n        // by `maxWidth` or `remainedWidth` (which is from `bandWidth`). In\n        // the extreme cases for `value` axis, bars are allowed to overlap\n        // with each other if `minWidth` specified.\n\n\n        if (minWidth && minWidth > finalWidth) {\n          finalWidth = minWidth;\n        }\n\n        if (finalWidth !== autoWidth) {\n          column.width = finalWidth;\n          remainedWidth -= finalWidth + barGapPercent * finalWidth;\n          autoWidthCount--;\n        }\n      } else {\n        // `barMinWidth/barMaxWidth` has higher priority than `barWidth`, as\n        // CSS does. Becuase barWidth can be a percent value, where\n        // `barMaxWidth` can be used to restrict the final width.\n        var finalWidth = column.width;\n\n        if (maxWidth) {\n          finalWidth = Math.min(finalWidth, maxWidth);\n        } // `minWidth` has higher priority, as described above\n\n\n        if (minWidth) {\n          finalWidth = Math.max(finalWidth, minWidth);\n        }\n\n        column.width = finalWidth;\n        remainedWidth -= finalWidth + barGapPercent * finalWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        bandWidth: bandWidth,\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n/**\n * @param {Object} barWidthAndOffset The result of makeColumnLayout\n * @param {module:echarts/coord/Axis} axis\n * @param {module:echarts/model/Series} [seriesModel] If not provided, return all.\n * @return {Object} {stackId: {offset, width}} or {offset, width} if seriesModel provided.\n */\n\n\nfunction retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {\n  if (barWidthAndOffset && axis) {\n    var result = barWidthAndOffset[getAxisKey(axis)];\n\n    if (result != null && seriesModel != null) {\n      result = result[getSeriesStackId(seriesModel)];\n    }\n\n    return result;\n  }\n}\n/**\n * @param {string} seriesType\n * @param {module:echarts/model/Global} ecModel\n */\n\n\nfunction layout(seriesType, ecModel) {\n  var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);\n  var barWidthAndOffset = makeColumnLayout(seriesModels);\n  var lastStackCoords = {};\n  var lastStackCoordsOrigin = {};\n  zrUtil.each(seriesModels, function (seriesModel) {\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var baseAxis = cartesian.getBaseAxis();\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = cartesian.getOtherAxis(baseAxis);\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\n\n    data.setLayout({\n      bandWidth: columnLayoutInfo.bandWidth,\n      offset: columnOffset,\n      size: columnWidth\n    });\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var isValueAxisH = valueAxis.isHorizontal();\n    var valueAxisStart = getValueAxisStart(baseAxis, valueAxis, stacked);\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n\n      if (stacked) {\n        // Only ordinal axis can be stacked.\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            // Positive stack\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var x;\n      var y;\n      var width;\n      var height;\n\n      if (isValueAxisH) {\n        var coord = cartesian.dataToPoint([value, baseValue]);\n        x = baseCoord;\n        y = coord[1] + columnOffset;\n        width = coord[0] - valueAxisStart;\n        height = columnWidth;\n\n        if (Math.abs(width) < barMinHeight) {\n          width = (width < 0 ? -1 : 1) * barMinHeight;\n        } // Ignore stack from NaN value\n\n\n        if (!isNaN(width)) {\n          stacked && (lastStackCoords[stackId][baseValue][sign] += width);\n        }\n      } else {\n        var coord = cartesian.dataToPoint([baseValue, value]);\n        x = coord[0] + columnOffset;\n        y = baseCoord;\n        width = columnWidth;\n        height = coord[1] - valueAxisStart;\n\n        if (Math.abs(height) < barMinHeight) {\n          // Include zero to has a positive bar\n          height = (height <= 0 ? -1 : 1) * barMinHeight;\n        } // Ignore stack from NaN value\n\n\n        if (!isNaN(height)) {\n          stacked && (lastStackCoords[stackId][baseValue][sign] += height);\n        }\n      }\n\n      data.setItemLayout(idx, {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    }\n  }, this);\n} // TODO: Do not support stack in large mode yet.\n\n\nvar largeLayout = {\n  seriesType: 'bar',\n  plan: createRenderPlanner(),\n  reset: function (seriesModel) {\n    if (!isOnCartesian(seriesModel) || !isInLargeMode(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var cartesian = seriesModel.coordinateSystem;\n    var coordLayout = cartesian.grid.getRect();\n    var baseAxis = cartesian.getBaseAxis();\n    var valueAxis = cartesian.getOtherAxis(baseAxis);\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var valueAxisHorizontal = valueAxis.isHorizontal();\n    var valueDimIdx = valueAxisHorizontal ? 0 : 1;\n    var barWidth = retrieveColumnLayout(makeColumnLayout([seriesModel]), baseAxis, seriesModel).width;\n\n    if (!(barWidth > LARGE_BAR_MIN_WIDTH)) {\n      // jshint ignore:line\n      barWidth = LARGE_BAR_MIN_WIDTH;\n    }\n\n    return {\n      progress: progress\n    };\n\n    function progress(params, data) {\n      var count = params.count;\n      var largePoints = new LargeArr(count * 2);\n      var largeBackgroundPoints = new LargeArr(count * 2);\n      var largeDataIndices = new LargeArr(count);\n      var dataIndex;\n      var coord = [];\n      var valuePair = [];\n      var pointsOffset = 0;\n      var idxOffset = 0;\n\n      while ((dataIndex = params.next()) != null) {\n        valuePair[valueDimIdx] = data.get(valueDim, dataIndex);\n        valuePair[1 - valueDimIdx] = data.get(baseDim, dataIndex);\n        coord = cartesian.dataToPoint(valuePair, null, coord); // Data index might not be in order, depends on `progressiveChunkMode`.\n\n        largeBackgroundPoints[pointsOffset] = valueAxisHorizontal ? coordLayout.x + coordLayout.width : coord[0];\n        largePoints[pointsOffset++] = coord[0];\n        largeBackgroundPoints[pointsOffset] = valueAxisHorizontal ? coord[1] : coordLayout.y + coordLayout.height;\n        largePoints[pointsOffset++] = coord[1];\n        largeDataIndices[idxOffset++] = dataIndex;\n      }\n\n      data.setLayout({\n        largePoints: largePoints,\n        largeDataIndices: largeDataIndices,\n        largeBackgroundPoints: largeBackgroundPoints,\n        barWidth: barWidth,\n        valueAxisStart: getValueAxisStart(baseAxis, valueAxis, false),\n        backgroundStart: valueAxisHorizontal ? coordLayout.x : coordLayout.y,\n        valueAxisHorizontal: valueAxisHorizontal\n      });\n    }\n  }\n};\n\nfunction isOnCartesian(seriesModel) {\n  return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';\n}\n\nfunction isInLargeMode(seriesModel) {\n  return seriesModel.pipelineContext && seriesModel.pipelineContext.large;\n} // See cases in `test/bar-start.html` and `#7412`, `#8747`.\n\n\nfunction getValueAxisStart(baseAxis, valueAxis, stacked) {\n  return valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.type === 'log' ? 1 : 0));\n}\n\nexports.getLayoutOnAxis = getLayoutOnAxis;\nexports.prepareLayoutBarSeries = prepareLayoutBarSeries;\nexports.makeColumnLayout = makeColumnLayout;\nexports.retrieveColumnLayout = retrieveColumnLayout;\nexports.layout = layout;\nexports.largeLayout = largeLayout;"],"mappings":"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"},"metadata":{},"sourceType":"script"}