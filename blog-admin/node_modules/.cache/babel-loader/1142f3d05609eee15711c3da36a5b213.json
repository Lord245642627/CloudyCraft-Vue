{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _util = require(\"zrender/lib/core/util\");\n\nvar assert = _util.assert;\nvar isArray = _util.isArray;\n\nvar _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @param {Object} define\n * @return See the return of `createTask`.\n */\n\nfunction createTask(define) {\n  return new Task(define);\n}\n/**\n * @constructor\n * @param {Object} define\n * @param {Function} define.reset Custom reset\n * @param {Function} [define.plan] Returns 'reset' indicate reset immediately.\n * @param {Function} [define.count] count is used to determin data task.\n * @param {Function} [define.onDirty] count is used to determin data task.\n */\n\n\nfunction Task(define) {\n  define = define || {};\n  this._reset = define.reset;\n  this._plan = define.plan;\n  this._count = define.count;\n  this._onDirty = define.onDirty;\n  this._dirty = true; // Context must be specified implicitly, to\n  // avoid miss update context when model changed.\n\n  this.context;\n}\n\nvar taskProto = Task.prototype;\n/**\n * @param {Object} performArgs\n * @param {number} [performArgs.step] Specified step.\n * @param {number} [performArgs.skip] Skip customer perform call.\n * @param {number} [performArgs.modBy] Sampling window size.\n * @param {number} [performArgs.modDataCount] Sampling count.\n */\n\ntaskProto.perform = function (performArgs) {\n  var upTask = this._upstream;\n  var skip = performArgs && performArgs.skip; // TODO some refactor.\n  // Pull data. Must pull data each time, because context.data\n  // may be updated by Series.setData.\n\n  if (this._dirty && upTask) {\n    var context = this.context;\n    context.data = context.outputData = upTask.context.outputData;\n  }\n\n  if (this.__pipeline) {\n    this.__pipeline.currentTask = this;\n  }\n\n  var planResult;\n\n  if (this._plan && !skip) {\n    planResult = this._plan(this.context);\n  } // Support sharding by mod, which changes the render sequence and makes the rendered graphic\n  // elements uniformed distributed when progress, especially when moving or zooming.\n\n\n  var lastModBy = normalizeModBy(this._modBy);\n  var lastModDataCount = this._modDataCount || 0;\n  var modBy = normalizeModBy(performArgs && performArgs.modBy);\n  var modDataCount = performArgs && performArgs.modDataCount || 0;\n\n  if (lastModBy !== modBy || lastModDataCount !== modDataCount) {\n    planResult = 'reset';\n  }\n\n  function normalizeModBy(val) {\n    !(val >= 1) && (val = 1); // jshint ignore:line\n\n    return val;\n  }\n\n  var forceFirstProgress;\n\n  if (this._dirty || planResult === 'reset') {\n    this._dirty = false;\n    forceFirstProgress = reset(this, skip);\n  }\n\n  this._modBy = modBy;\n  this._modDataCount = modDataCount;\n  var step = performArgs && performArgs.step;\n\n  if (upTask) {\n    this._dueEnd = upTask._outputDueEnd;\n  } // DataTask or overallTask\n  else {\n    this._dueEnd = this._count ? this._count(this.context) : Infinity;\n  } // Note: Stubs, that its host overall task let it has progress, has progress.\n  // If no progress, pass index from upstream to downstream each time plan called.\n\n\n  if (this._progress) {\n    var start = this._dueIndex;\n    var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);\n\n    if (!skip && (forceFirstProgress || start < end)) {\n      var progress = this._progress;\n\n      if (isArray(progress)) {\n        for (var i = 0; i < progress.length; i++) {\n          doProgress(this, progress[i], start, end, modBy, modDataCount);\n        }\n      } else {\n        doProgress(this, progress, start, end, modBy, modDataCount);\n      }\n    }\n\n    this._dueIndex = end; // If no `outputDueEnd`, assume that output data and\n    // input data is the same, so use `dueIndex` as `outputDueEnd`.\n\n    var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;\n    this._outputDueEnd = outputDueEnd;\n  } else {\n    // (1) Some overall task has no progress.\n    // (2) Stubs, that its host overall task do not let it has progress, has no progress.\n    // This should always be performed so it can be passed to downstream.\n    this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;\n  }\n\n  return this.unfinished();\n};\n\nvar iterator = function () {\n  var end;\n  var current;\n  var modBy;\n  var modDataCount;\n  var winCount;\n  var it = {\n    reset: function (s, e, sStep, sCount) {\n      current = s;\n      end = e;\n      modBy = sStep;\n      modDataCount = sCount;\n      winCount = Math.ceil(modDataCount / modBy);\n      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;\n    }\n  };\n  return it;\n\n  function sequentialNext() {\n    return current < end ? current++ : null;\n  }\n\n  function modNext() {\n    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);\n    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex // If modDataCount is smaller than data.count() (consider `appendData` case),\n    // Use normal linear rendering mode.\n    : current;\n    current++;\n    return result;\n  }\n}();\n\ntaskProto.dirty = function () {\n  this._dirty = true;\n  this._onDirty && this._onDirty(this.context);\n};\n\nfunction doProgress(taskIns, progress, start, end, modBy, modDataCount) {\n  iterator.reset(start, end, modBy, modDataCount);\n  taskIns._callingProgress = progress;\n\n  taskIns._callingProgress({\n    start: start,\n    end: end,\n    count: end - start,\n    next: iterator.next\n  }, taskIns.context);\n}\n\nfunction reset(taskIns, skip) {\n  taskIns._dueIndex = taskIns._outputDueEnd = taskIns._dueEnd = 0;\n  taskIns._settedOutputEnd = null;\n  var progress;\n  var forceFirstProgress;\n\n  if (!skip && taskIns._reset) {\n    progress = taskIns._reset(taskIns.context);\n\n    if (progress && progress.progress) {\n      forceFirstProgress = progress.forceFirstProgress;\n      progress = progress.progress;\n    } // To simplify no progress checking, array must has item.\n\n\n    if (isArray(progress) && !progress.length) {\n      progress = null;\n    }\n  }\n\n  taskIns._progress = progress;\n  taskIns._modBy = taskIns._modDataCount = null;\n  var downstream = taskIns._downstream;\n  downstream && downstream.dirty();\n  return forceFirstProgress;\n}\n/**\n * @return {boolean}\n */\n\n\ntaskProto.unfinished = function () {\n  return this._progress && this._dueIndex < this._dueEnd;\n};\n/**\n * @param {Object} downTask The downstream task.\n * @return {Object} The downstream task.\n */\n\n\ntaskProto.pipe = function (downTask) {\n  // If already downstream, do not dirty downTask.\n  if (this._downstream !== downTask || this._dirty) {\n    this._downstream = downTask;\n    downTask._upstream = this;\n    downTask.dirty();\n  }\n};\n\ntaskProto.dispose = function () {\n  if (this._disposed) {\n    return;\n  }\n\n  this._upstream && (this._upstream._downstream = null);\n  this._downstream && (this._downstream._upstream = null);\n  this._dirty = false;\n  this._disposed = true;\n};\n\ntaskProto.getUpstream = function () {\n  return this._upstream;\n};\n\ntaskProto.getDownstream = function () {\n  return this._downstream;\n};\n\ntaskProto.setOutputEnd = function (end) {\n  // This only happend in dataTask, dataZoom, map, currently.\n  // where dataZoom do not set end each time, but only set\n  // when reset. So we should record the setted end, in case\n  // that the stub of dataZoom perform again and earse the\n  // setted end by upstream.\n  this._outputDueEnd = this._settedOutputEnd = end;\n}; ///////////////////////////////////////////////////////////\n// For stream debug (Should be commented out after used!)\n// Usage: printTask(this, 'begin');\n// Usage: printTask(this, null, {someExtraProp});\n// function printTask(task, prefix, extra) {\n//     window.ecTaskUID == null && (window.ecTaskUID = 0);\n//     task.uidDebug == null && (task.uidDebug = `task_${window.ecTaskUID++}`);\n//     task.agent && task.agent.uidDebug == null && (task.agent.uidDebug = `task_${window.ecTaskUID++}`);\n//     var props = [];\n//     if (task.__pipeline) {\n//         var val = `${task.__idxInPipeline}/${task.__pipeline.tail.__idxInPipeline} ${task.agent ? '(stub)' : ''}`;\n//         props.push({text: 'idx', value: val});\n//     } else {\n//         var stubCount = 0;\n//         task.agentStubMap.each(() => stubCount++);\n//         props.push({text: 'idx', value: `overall (stubs: ${stubCount})`});\n//     }\n//     props.push({text: 'uid', value: task.uidDebug});\n//     if (task.__pipeline) {\n//         props.push({text: 'pid', value: task.__pipeline.id});\n//         task.agent && props.push(\n//             {text: 'stubFor', value: task.agent.uidDebug}\n//         );\n//     }\n//     props.push(\n//         {text: 'dirty', value: task._dirty},\n//         {text: 'dueIndex', value: task._dueIndex},\n//         {text: 'dueEnd', value: task._dueEnd},\n//         {text: 'outputDueEnd', value: task._outputDueEnd}\n//     );\n//     if (extra) {\n//         Object.keys(extra).forEach(key => {\n//             props.push({text: key, value: extra[key]});\n//         });\n//     }\n//     var args = ['color: blue'];\n//     var msg = `%c[${prefix || 'T'}] %c` + props.map(item => (\n//         args.push('color: black', 'color: red'),\n//         `${item.text}: %c${item.value}`\n//     )).join('%c, ');\n//     console.log.apply(console, [msg].concat(args));\n//     // console.log(this);\n// }\n\n\nexports.createTask = createTask;","map":{"version":3,"names":["_util","require","assert","isArray","_config","__DEV__","createTask","define","Task","_reset","reset","_plan","plan","_count","count","_onDirty","onDirty","_dirty","context","taskProto","prototype","perform","performArgs","upTask","_upstream","skip","data","outputData","__pipeline","currentTask","planResult","lastModBy","normalizeModBy","_modBy","lastModDataCount","_modDataCount","modBy","modDataCount","val","forceFirstProgress","step","_dueEnd","_outputDueEnd","Infinity","_progress","start","_dueIndex","end","Math","min","progress","i","length","doProgress","outputDueEnd","_settedOutputEnd","unfinished","iterator","current","winCount","it","s","e","sStep","sCount","ceil","next","modNext","sequentialNext","dataIndex","result","dirty","taskIns","_callingProgress","downstream","_downstream","pipe","downTask","dispose","_disposed","getUpstream","getDownstream","setOutputEnd","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-admin/node_modules/echarts/lib/stream/task.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar assert = _util.assert;\nvar isArray = _util.isArray;\n\nvar _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @param {Object} define\n * @return See the return of `createTask`.\n */\nfunction createTask(define) {\n  return new Task(define);\n}\n/**\n * @constructor\n * @param {Object} define\n * @param {Function} define.reset Custom reset\n * @param {Function} [define.plan] Returns 'reset' indicate reset immediately.\n * @param {Function} [define.count] count is used to determin data task.\n * @param {Function} [define.onDirty] count is used to determin data task.\n */\n\n\nfunction Task(define) {\n  define = define || {};\n  this._reset = define.reset;\n  this._plan = define.plan;\n  this._count = define.count;\n  this._onDirty = define.onDirty;\n  this._dirty = true; // Context must be specified implicitly, to\n  // avoid miss update context when model changed.\n\n  this.context;\n}\n\nvar taskProto = Task.prototype;\n/**\n * @param {Object} performArgs\n * @param {number} [performArgs.step] Specified step.\n * @param {number} [performArgs.skip] Skip customer perform call.\n * @param {number} [performArgs.modBy] Sampling window size.\n * @param {number} [performArgs.modDataCount] Sampling count.\n */\n\ntaskProto.perform = function (performArgs) {\n  var upTask = this._upstream;\n  var skip = performArgs && performArgs.skip; // TODO some refactor.\n  // Pull data. Must pull data each time, because context.data\n  // may be updated by Series.setData.\n\n  if (this._dirty && upTask) {\n    var context = this.context;\n    context.data = context.outputData = upTask.context.outputData;\n  }\n\n  if (this.__pipeline) {\n    this.__pipeline.currentTask = this;\n  }\n\n  var planResult;\n\n  if (this._plan && !skip) {\n    planResult = this._plan(this.context);\n  } // Support sharding by mod, which changes the render sequence and makes the rendered graphic\n  // elements uniformed distributed when progress, especially when moving or zooming.\n\n\n  var lastModBy = normalizeModBy(this._modBy);\n  var lastModDataCount = this._modDataCount || 0;\n  var modBy = normalizeModBy(performArgs && performArgs.modBy);\n  var modDataCount = performArgs && performArgs.modDataCount || 0;\n\n  if (lastModBy !== modBy || lastModDataCount !== modDataCount) {\n    planResult = 'reset';\n  }\n\n  function normalizeModBy(val) {\n    !(val >= 1) && (val = 1); // jshint ignore:line\n\n    return val;\n  }\n\n  var forceFirstProgress;\n\n  if (this._dirty || planResult === 'reset') {\n    this._dirty = false;\n    forceFirstProgress = reset(this, skip);\n  }\n\n  this._modBy = modBy;\n  this._modDataCount = modDataCount;\n  var step = performArgs && performArgs.step;\n\n  if (upTask) {\n    this._dueEnd = upTask._outputDueEnd;\n  } // DataTask or overallTask\n  else {\n      this._dueEnd = this._count ? this._count(this.context) : Infinity;\n    } // Note: Stubs, that its host overall task let it has progress, has progress.\n  // If no progress, pass index from upstream to downstream each time plan called.\n\n\n  if (this._progress) {\n    var start = this._dueIndex;\n    var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);\n\n    if (!skip && (forceFirstProgress || start < end)) {\n      var progress = this._progress;\n\n      if (isArray(progress)) {\n        for (var i = 0; i < progress.length; i++) {\n          doProgress(this, progress[i], start, end, modBy, modDataCount);\n        }\n      } else {\n        doProgress(this, progress, start, end, modBy, modDataCount);\n      }\n    }\n\n    this._dueIndex = end; // If no `outputDueEnd`, assume that output data and\n    // input data is the same, so use `dueIndex` as `outputDueEnd`.\n\n    var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;\n    this._outputDueEnd = outputDueEnd;\n  } else {\n    // (1) Some overall task has no progress.\n    // (2) Stubs, that its host overall task do not let it has progress, has no progress.\n    // This should always be performed so it can be passed to downstream.\n    this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;\n  }\n\n  return this.unfinished();\n};\n\nvar iterator = function () {\n  var end;\n  var current;\n  var modBy;\n  var modDataCount;\n  var winCount;\n  var it = {\n    reset: function (s, e, sStep, sCount) {\n      current = s;\n      end = e;\n      modBy = sStep;\n      modDataCount = sCount;\n      winCount = Math.ceil(modDataCount / modBy);\n      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;\n    }\n  };\n  return it;\n\n  function sequentialNext() {\n    return current < end ? current++ : null;\n  }\n\n  function modNext() {\n    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);\n    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex // If modDataCount is smaller than data.count() (consider `appendData` case),\n    // Use normal linear rendering mode.\n    : current;\n    current++;\n    return result;\n  }\n}();\n\ntaskProto.dirty = function () {\n  this._dirty = true;\n  this._onDirty && this._onDirty(this.context);\n};\n\nfunction doProgress(taskIns, progress, start, end, modBy, modDataCount) {\n  iterator.reset(start, end, modBy, modDataCount);\n  taskIns._callingProgress = progress;\n\n  taskIns._callingProgress({\n    start: start,\n    end: end,\n    count: end - start,\n    next: iterator.next\n  }, taskIns.context);\n}\n\nfunction reset(taskIns, skip) {\n  taskIns._dueIndex = taskIns._outputDueEnd = taskIns._dueEnd = 0;\n  taskIns._settedOutputEnd = null;\n  var progress;\n  var forceFirstProgress;\n\n  if (!skip && taskIns._reset) {\n    progress = taskIns._reset(taskIns.context);\n\n    if (progress && progress.progress) {\n      forceFirstProgress = progress.forceFirstProgress;\n      progress = progress.progress;\n    } // To simplify no progress checking, array must has item.\n\n\n    if (isArray(progress) && !progress.length) {\n      progress = null;\n    }\n  }\n\n  taskIns._progress = progress;\n  taskIns._modBy = taskIns._modDataCount = null;\n  var downstream = taskIns._downstream;\n  downstream && downstream.dirty();\n  return forceFirstProgress;\n}\n/**\n * @return {boolean}\n */\n\n\ntaskProto.unfinished = function () {\n  return this._progress && this._dueIndex < this._dueEnd;\n};\n/**\n * @param {Object} downTask The downstream task.\n * @return {Object} The downstream task.\n */\n\n\ntaskProto.pipe = function (downTask) {\n  // If already downstream, do not dirty downTask.\n  if (this._downstream !== downTask || this._dirty) {\n    this._downstream = downTask;\n    downTask._upstream = this;\n    downTask.dirty();\n  }\n};\n\ntaskProto.dispose = function () {\n  if (this._disposed) {\n    return;\n  }\n\n  this._upstream && (this._upstream._downstream = null);\n  this._downstream && (this._downstream._upstream = null);\n  this._dirty = false;\n  this._disposed = true;\n};\n\ntaskProto.getUpstream = function () {\n  return this._upstream;\n};\n\ntaskProto.getDownstream = function () {\n  return this._downstream;\n};\n\ntaskProto.setOutputEnd = function (end) {\n  // This only happend in dataTask, dataZoom, map, currently.\n  // where dataZoom do not set end each time, but only set\n  // when reset. So we should record the setted end, in case\n  // that the stub of dataZoom perform again and earse the\n  // setted end by upstream.\n  this._outputDueEnd = this._settedOutputEnd = end;\n}; ///////////////////////////////////////////////////////////\n// For stream debug (Should be commented out after used!)\n// Usage: printTask(this, 'begin');\n// Usage: printTask(this, null, {someExtraProp});\n// function printTask(task, prefix, extra) {\n//     window.ecTaskUID == null && (window.ecTaskUID = 0);\n//     task.uidDebug == null && (task.uidDebug = `task_${window.ecTaskUID++}`);\n//     task.agent && task.agent.uidDebug == null && (task.agent.uidDebug = `task_${window.ecTaskUID++}`);\n//     var props = [];\n//     if (task.__pipeline) {\n//         var val = `${task.__idxInPipeline}/${task.__pipeline.tail.__idxInPipeline} ${task.agent ? '(stub)' : ''}`;\n//         props.push({text: 'idx', value: val});\n//     } else {\n//         var stubCount = 0;\n//         task.agentStubMap.each(() => stubCount++);\n//         props.push({text: 'idx', value: `overall (stubs: ${stubCount})`});\n//     }\n//     props.push({text: 'uid', value: task.uidDebug});\n//     if (task.__pipeline) {\n//         props.push({text: 'pid', value: task.__pipeline.id});\n//         task.agent && props.push(\n//             {text: 'stubFor', value: task.agent.uidDebug}\n//         );\n//     }\n//     props.push(\n//         {text: 'dirty', value: task._dirty},\n//         {text: 'dueIndex', value: task._dueIndex},\n//         {text: 'dueEnd', value: task._dueEnd},\n//         {text: 'outputDueEnd', value: task._outputDueEnd}\n//     );\n//     if (extra) {\n//         Object.keys(extra).forEach(key => {\n//             props.push({text: key, value: extra[key]});\n//         });\n//     }\n//     var args = ['color: blue'];\n//     var msg = `%c[${prefix || 'T'}] %c` + props.map(item => (\n//         args.push('color: black', 'color: red'),\n//         `${item.text}: %c${item.value}`\n//     )).join('%c, ');\n//     console.log.apply(console, [msg].concat(args));\n//     // console.log(this);\n// }\n\n\nexports.createTask = createTask;"],"mappings":"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"},"metadata":{},"sourceType":"script"}