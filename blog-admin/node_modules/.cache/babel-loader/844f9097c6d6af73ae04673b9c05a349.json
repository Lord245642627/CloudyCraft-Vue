{"ast":null,"code":"import * as _ from 'lodash-es';\nimport * as util from './util.js';\nexport { run, cleanup };\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\n\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n\n  var nodeSep = 2 * height + 1;\n  g.graph().nestingRoot = root; // Multiply minlen by nodeSep to align nodes on non-border ranks.\n\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  }); // Calculate a weight that is sufficient to keep subgraphs vertically compact\n\n\n  var weight = sumWeights(g) + 1; // Create border nodes and link them up\n\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  }); // Save the multiplier for node layers for later removal of empty border\n  // layers.\n\n\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, {\n        weight: 0,\n        minlen: nodeSep\n      });\n    }\n\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, {\n      weight: 0,\n      minlen: height + depths[v]\n    });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n\n  function dfs(v, depth) {\n    var children = g.children(v);\n\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n\n    depths[v] = depth;\n  }\n\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(g.edges(), function (acc, e) {\n    return acc + g.edge(e).weight;\n  }, 0);\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}","map":{"version":3,"names":["_","util","run","cleanup","g","root","addDummyNode","depths","treeDepths","height","max","values","nodeSep","graph","nestingRoot","forEach","edges","e","edge","minlen","weight","sumWeights","children","child","dfs","nodeRankFactor","v","length","setEdge","top","addBorderNode","bottom","label","node","setParent","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","parent","depth","reduce","acc","graphLabel","removeNode","removeEdge"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-admin/node_modules/dagre-d3-es/src/dagre/nesting-graph.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}