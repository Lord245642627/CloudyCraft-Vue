{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Cartesian coordinate system\n * @module  echarts/coord/Cartesian\n *\n */\n\n\nfunction dimAxisMapper(dim) {\n  return this._axes[dim];\n}\n/**\n * @alias module:echarts/coord/Cartesian\n * @constructor\n */\n\n\nvar Cartesian = function (name) {\n  this._axes = {};\n  this._dimList = [];\n  /**\n   * @type {string}\n   */\n\n  this.name = name || '';\n};\n\nCartesian.prototype = {\n  constructor: Cartesian,\n  type: 'cartesian',\n\n  /**\n   * Get axis\n   * @param  {number|string} dim\n   * @return {module:echarts/coord/Cartesian~Axis}\n   */\n  getAxis: function (dim) {\n    return this._axes[dim];\n  },\n\n  /**\n   * Get axes list\n   * @return {Array.<module:echarts/coord/Cartesian~Axis>}\n   */\n  getAxes: function () {\n    return zrUtil.map(this._dimList, dimAxisMapper, this);\n  },\n\n  /**\n   * Get axes list by given scale type\n   */\n  getAxesByScale: function (scaleType) {\n    scaleType = scaleType.toLowerCase();\n    return zrUtil.filter(this.getAxes(), function (axis) {\n      return axis.scale.type === scaleType;\n    });\n  },\n\n  /**\n   * Add axis\n   * @param {module:echarts/coord/Cartesian.Axis}\n   */\n  addAxis: function (axis) {\n    var dim = axis.dim;\n    this._axes[dim] = axis;\n\n    this._dimList.push(dim);\n  },\n\n  /**\n   * Convert data to coord in nd space\n   * @param {Array.<number>|Object.<string, number>} val\n   * @return {Array.<number>|Object.<string, number>}\n   */\n  dataToCoord: function (val) {\n    return this._dataCoordConvert(val, 'dataToCoord');\n  },\n\n  /**\n   * Convert coord in nd space to data\n   * @param  {Array.<number>|Object.<string, number>} val\n   * @return {Array.<number>|Object.<string, number>}\n   */\n  coordToData: function (val) {\n    return this._dataCoordConvert(val, 'coordToData');\n  },\n  _dataCoordConvert: function (input, method) {\n    var dimList = this._dimList;\n    var output = input instanceof Array ? [] : {};\n\n    for (var i = 0; i < dimList.length; i++) {\n      var dim = dimList[i];\n      var axis = this._axes[dim];\n      output[dim] = axis[method](input[dim]);\n    }\n\n    return output;\n  }\n};\nvar _default = Cartesian;\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","dimAxisMapper","dim","_axes","Cartesian","name","_dimList","prototype","constructor","type","getAxis","getAxes","map","getAxesByScale","scaleType","toLowerCase","filter","axis","scale","addAxis","push","dataToCoord","val","_dataCoordConvert","coordToData","input","method","dimList","output","Array","i","length","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/coord/cartesian/Cartesian.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Cartesian coordinate system\n * @module  echarts/coord/Cartesian\n *\n */\nfunction dimAxisMapper(dim) {\n  return this._axes[dim];\n}\n/**\n * @alias module:echarts/coord/Cartesian\n * @constructor\n */\n\n\nvar Cartesian = function (name) {\n  this._axes = {};\n  this._dimList = [];\n  /**\n   * @type {string}\n   */\n\n  this.name = name || '';\n};\n\nCartesian.prototype = {\n  constructor: Cartesian,\n  type: 'cartesian',\n\n  /**\n   * Get axis\n   * @param  {number|string} dim\n   * @return {module:echarts/coord/Cartesian~Axis}\n   */\n  getAxis: function (dim) {\n    return this._axes[dim];\n  },\n\n  /**\n   * Get axes list\n   * @return {Array.<module:echarts/coord/Cartesian~Axis>}\n   */\n  getAxes: function () {\n    return zrUtil.map(this._dimList, dimAxisMapper, this);\n  },\n\n  /**\n   * Get axes list by given scale type\n   */\n  getAxesByScale: function (scaleType) {\n    scaleType = scaleType.toLowerCase();\n    return zrUtil.filter(this.getAxes(), function (axis) {\n      return axis.scale.type === scaleType;\n    });\n  },\n\n  /**\n   * Add axis\n   * @param {module:echarts/coord/Cartesian.Axis}\n   */\n  addAxis: function (axis) {\n    var dim = axis.dim;\n    this._axes[dim] = axis;\n\n    this._dimList.push(dim);\n  },\n\n  /**\n   * Convert data to coord in nd space\n   * @param {Array.<number>|Object.<string, number>} val\n   * @return {Array.<number>|Object.<string, number>}\n   */\n  dataToCoord: function (val) {\n    return this._dataCoordConvert(val, 'dataToCoord');\n  },\n\n  /**\n   * Convert coord in nd space to data\n   * @param  {Array.<number>|Object.<string, number>} val\n   * @return {Array.<number>|Object.<string, number>}\n   */\n  coordToData: function (val) {\n    return this._dataCoordConvert(val, 'coordToData');\n  },\n  _dataCoordConvert: function (input, method) {\n    var dimList = this._dimList;\n    var output = input instanceof Array ? [] : {};\n\n    for (var i = 0; i < dimList.length; i++) {\n      var dim = dimList[i];\n      var axis = this._axes[dim];\n      output[dim] = axis[method](input[dim]);\n    }\n\n    return output;\n  }\n};\nvar _default = Cartesian;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}