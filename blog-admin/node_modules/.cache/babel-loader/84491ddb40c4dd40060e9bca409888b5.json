{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar _format = require(\"../util/format\");\n\nvar formatTime = _format.formatTime;\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\nvar getTooltipMarker = _format.getTooltipMarker;\n\nvar modelUtil = require(\"../util/model\");\n\nvar ComponentModel = require(\"./Component\");\n\nvar colorPaletteMixin = require(\"./mixin/colorPalette\");\n\nvar dataFormatMixin = require(\"../model/mixin/dataFormat\");\n\nvar _layout = require(\"../util/layout\");\n\nvar getLayoutParams = _layout.getLayoutParams;\nvar mergeLayoutParam = _layout.mergeLayoutParam;\n\nvar _task = require(\"../stream/task\");\n\nvar createTask = _task.createTask;\n\nvar _sourceHelper = require(\"../data/helper/sourceHelper\");\n\nvar prepareSource = _sourceHelper.prepareSource;\nvar getSource = _sourceHelper.getSource;\n\nvar _dataProvider = require(\"../data/helper/dataProvider\");\n\nvar retrieveRawValue = _dataProvider.retrieveRawValue;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar inner = modelUtil.makeInner();\nvar SeriesModel = ComponentModel.extend({\n  type: 'series.__base__',\n\n  /**\n   * @readOnly\n   */\n  seriesIndex: 0,\n  // coodinateSystem will be injected in the echarts/CoordinateSystem\n  coordinateSystem: null,\n\n  /**\n   * @type {Object}\n   * @protected\n   */\n  defaultOption: null,\n\n  /**\n   * legend visual provider to the legend component\n   * @type {Object}\n   */\n  // PENDING\n  legendVisualProvider: null,\n\n  /**\n   * Access path of color for visual\n   */\n  visualColorAccessPath: 'itemStyle.color',\n\n  /**\n   * Access path of borderColor for visual\n   */\n  visualBorderColorAccessPath: 'itemStyle.borderColor',\n\n  /**\n   * Support merge layout params.\n   * Only support 'box' now (left/right/top/bottom/width/height).\n   * @type {string|Object} Object can be {ignoreSize: true}\n   * @readOnly\n   */\n  layoutMode: null,\n  init: function (option, parentModel, ecModel, extraOpt) {\n    /**\n     * @type {number}\n     * @readOnly\n     */\n    this.seriesIndex = this.componentIndex;\n    this.dataTask = createTask({\n      count: dataTaskCount,\n      reset: dataTaskReset\n    });\n    this.dataTask.context = {\n      model: this\n    };\n    this.mergeDefaultAndTheme(option, ecModel);\n    prepareSource(this);\n    var data = this.getInitialData(option, ecModel);\n    wrapData(data, this);\n    this.dataTask.context.data = data;\n    /**\n     * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n     * @private\n     */\n\n    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkList\n    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model\n    // init or merge stage, because the data can be restored. So we do not `restoreData`\n    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.\n    // Call `seriesModel.getRawData()` instead.\n    // this.restoreData();\n\n    autoSeriesName(this);\n  },\n\n  /**\n   * Util for merge default and theme to option\n   * @param  {Object} option\n   * @param  {module:echarts/model/Global} ecModel\n   */\n  mergeDefaultAndTheme: function (option, ecModel) {\n    var layoutMode = this.layoutMode;\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option, 'label', ['show']);\n    this.fillDataTextStyle(option.data);\n\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  },\n  mergeOption: function (newSeriesOption, ecModel) {\n    // this.settingTask.dirty();\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = this.layoutMode;\n\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n\n    prepareSource(this);\n    var data = this.getInitialData(newSeriesOption, ecModel);\n    wrapData(data, this);\n    this.dataTask.dirty();\n    this.dataTask.context.data = data;\n    inner(this).dataBeforeProcessed = data;\n    autoSeriesName(this);\n  },\n  fillDataTextStyle: function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data && !zrUtil.isTypedArray(data)) {\n      var props = ['show'];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i], 'label', props);\n        }\n      }\n    }\n  },\n\n  /**\n   * Init a data structure from data related option in series\n   * Must be overwritten\n   */\n  getInitialData: function () {},\n\n  /**\n   * Append data to list\n   * @param {Object} params\n   * @param {Array|TypedArray} params.data\n   */\n  appendData: function (params) {\n    // FIXME ???\n    // (1) If data from dataset, forbidden append.\n    // (2) support append data of dataset.\n    var data = this.getRawData();\n    data.appendData(params.data);\n  },\n\n  /**\n   * Consider some method like `filter`, `map` need make new data,\n   * We should make sure that `seriesModel.getData()` get correct\n   * data in the stream procedure. So we fetch data from upstream\n   * each time `task.perform` called.\n   * @param {string} [dataType]\n   * @return {module:echarts/data/List}\n   */\n  getData: function (dataType) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var data = task.context.data;\n      return dataType == null ? data : data.getLinkedData(dataType);\n    } else {\n      // When series is not alive (that may happen when click toolbox\n      // restore or setOption with not merge mode), series data may\n      // be still need to judge animation or something when graphic\n      // elements want to know whether fade out.\n      return inner(this).data;\n    }\n  },\n\n  /**\n   * @param {module:echarts/data/List} data\n   */\n  setData: function (data) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var context = task.context; // Consider case: filter, data sample.\n\n      if (context.data !== data && task.modifyOutputEnd) {\n        task.setOutputEnd(data.count());\n      }\n\n      context.outputData = data; // Caution: setData should update context.data,\n      // Because getData may be called multiply in a\n      // single stage and expect to get the data just\n      // set. (For example, AxisProxy, x y both call\n      // getData and setDate sequentially).\n      // So the context.data should be fetched from\n      // upstream each time when a stage starts to be\n      // performed.\n\n      if (task !== this.dataTask) {\n        context.data = data;\n      }\n    }\n\n    inner(this).data = data;\n  },\n\n  /**\n   * @see {module:echarts/data/helper/sourceHelper#getSource}\n   * @return {module:echarts/data/Source} source\n   */\n  getSource: function () {\n    return getSource(this);\n  },\n\n  /**\n   * Get data before processed\n   * @return {module:echarts/data/List}\n   */\n  getRawData: function () {\n    return inner(this).dataBeforeProcessed;\n  },\n\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n  getBaseAxis: function () {\n    var coordSys = this.coordinateSystem;\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  },\n  // FIXME\n\n  /**\n   * Default tooltip formatter\n   *\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   * @param {string} [renderMode='html'] valid values: 'html' and 'richText'.\n   *                                     'html' is used for rendering tooltip in extra DOM form, and the result\n   *                                     string is used as DOM HTML content.\n   *                                     'richText' is used for rendering tooltip in rich text form, for those where\n   *                                     DOM operation is not supported.\n   * @return {Object} formatted tooltip with `html` and `markers`\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType, renderMode) {\n    var series = this;\n    renderMode = renderMode || 'html';\n    var newLine = renderMode === 'html' ? '<br/>' : '\\n';\n    var isRichText = renderMode === 'richText';\n    var markers = {};\n    var markerId = 0;\n\n    function formatArrayValue(value) {\n      // ??? TODO refactor these logic.\n      // check: category-no-encode-has-axis-data in dataset.html\n      var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n        var dimItem = data.getDimensionInfo(idx);\n        return vertially |= dimItem && dimItem.tooltip !== false && dimItem.displayName != null;\n      }, 0);\n      var result = [];\n      tooltipDims.length ? zrUtil.each(tooltipDims, function (dim) {\n        setEachItem(retrieveRawValue(data, dataIndex, dim), dim);\n      }) // By default, all dims is used on tooltip.\n      : zrUtil.each(value, setEachItem);\n\n      function setEachItem(val, dim) {\n        var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.\n\n        if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n          return;\n        }\n\n        var dimType = dimInfo.type;\n        var markName = 'sub' + series.seriesIndex + 'at' + markerId;\n        var dimHead = getTooltipMarker({\n          color: color,\n          type: 'subItem',\n          renderMode: renderMode,\n          markerId: markName\n        });\n        var dimHeadStr = typeof dimHead === 'string' ? dimHead : dimHead.content;\n        var valStr = (vertially ? dimHeadStr + encodeHTML(dimInfo.displayName || '-') + ': ' : '') + // FIXME should not format time for raw data?\n        encodeHTML(dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime('yyyy/MM/dd hh:mm:ss', val) : addCommas(val));\n        valStr && result.push(valStr);\n\n        if (isRichText) {\n          markers[markName] = color;\n          ++markerId;\n        }\n      }\n\n      var newLine = vertially ? isRichText ? '\\n' : '<br/>' : '';\n      var content = newLine + result.join(newLine || ', ');\n      return {\n        renderMode: renderMode,\n        content: content,\n        style: markers\n      };\n    }\n\n    function formatSingleValue(val) {\n      // return encodeHTML(addCommas(val));\n      return {\n        renderMode: renderMode,\n        content: encodeHTML(addCommas(val)),\n        style: markers\n      };\n    }\n\n    var data = this.getData();\n    var tooltipDims = data.mapDimension('defaultedTooltip', true);\n    var tooltipDimLen = tooltipDims.length;\n    var value = this.getRawValue(dataIndex);\n    var isValueArr = zrUtil.isArray(value);\n    var color = data.getItemVisual(dataIndex, 'color');\n\n    if (zrUtil.isObject(color) && color.colorStops) {\n      color = (color.colorStops[0] || {}).color;\n    }\n\n    color = color || 'transparent'; // Complicated rule for pretty tooltip.\n\n    var formattedValue = tooltipDimLen > 1 || isValueArr && !tooltipDimLen ? formatArrayValue(value) : tooltipDimLen ? formatSingleValue(retrieveRawValue(data, dataIndex, tooltipDims[0])) : formatSingleValue(isValueArr ? value[0] : value);\n    var content = formattedValue.content;\n    var markName = series.seriesIndex + 'at' + markerId;\n    var colorEl = getTooltipMarker({\n      color: color,\n      type: 'item',\n      renderMode: renderMode,\n      markerId: markName\n    });\n    markers[markName] = color;\n    ++markerId;\n    var name = data.getName(dataIndex);\n    var seriesName = this.name;\n\n    if (!modelUtil.isNameSpecified(this)) {\n      seriesName = '';\n    }\n\n    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? newLine : ': ') : '';\n    var colorStr = typeof colorEl === 'string' ? colorEl : colorEl.content;\n    var html = !multipleSeries ? seriesName + colorStr + (name ? encodeHTML(name) + ': ' + content : content) : colorStr + seriesName + content;\n    return {\n      html: html,\n      markers: markers\n    };\n  },\n\n  /**\n   * @return {boolean}\n   */\n  isAnimationEnabled: function () {\n    if (env.node) {\n      return false;\n    }\n\n    var animationEnabled = this.getShallow('animation');\n\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n\n    return animationEnabled;\n  },\n  restoreData: function () {\n    this.dataTask.dirty();\n  },\n  getColorFromPalette: function (name, scope, requestColorNum) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope, requestColorNum);\n\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope, requestColorNum);\n    }\n\n    return color;\n  },\n\n  /**\n   * Use `data.mapDimension(coordDim, true)` instead.\n   * @deprecated\n   */\n  coordDimToDataDim: function (coordDim) {\n    return this.getRawData().mapDimension(coordDim, true);\n  },\n\n  /**\n   * Get progressive rendering count each step\n   * @return {number}\n   */\n  getProgressive: function () {\n    return this.get('progressive');\n  },\n\n  /**\n   * Get progressive rendering count each step\n   * @return {number}\n   */\n  getProgressiveThreshold: function () {\n    return this.get('progressiveThreshold');\n  },\n\n  /**\n   * Get data indices for show tooltip content. See tooltip.\n   * @abstract\n   * @param {Array.<string>|string} dim\n   * @param {Array.<number>} value\n   * @param {module:echarts/coord/single/SingleAxis} baseAxis\n   * @return {Object} {dataIndices, nestestValue}.\n   */\n  getAxisTooltipData: null,\n\n  /**\n   * See tooltip.\n   * @abstract\n   * @param {number} dataIndex\n   * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n   */\n  getTooltipPosition: null,\n\n  /**\n   * @see {module:echarts/stream/Scheduler}\n   */\n  pipeTask: null,\n\n  /**\n   * Convinient for override in extended class.\n   * @protected\n   * @type {Function}\n   */\n  preventIncremental: null,\n\n  /**\n   * @public\n   * @readOnly\n   * @type {Object}\n   */\n  pipelineContext: null\n});\nzrUtil.mixin(SeriesModel, dataFormatMixin);\nzrUtil.mixin(SeriesModel, colorPaletteMixin);\n/**\n * MUST be called after `prepareSource` called\n * Here we need to make auto series, especially for auto legend. But we\n * do not modify series.name in option to avoid side effects.\n */\n\nfunction autoSeriesName(seriesModel) {\n  // User specified name has higher priority, otherwise it may cause\n  // series can not be queried unexpectedly.\n  var name = seriesModel.name;\n\n  if (!modelUtil.isNameSpecified(seriesModel)) {\n    seriesModel.name = getSeriesAutoName(seriesModel) || name;\n  }\n}\n\nfunction getSeriesAutoName(seriesModel) {\n  var data = seriesModel.getRawData();\n  var dataDims = data.mapDimension('seriesName', true);\n  var nameArr = [];\n  zrUtil.each(dataDims, function (dataDim) {\n    var dimInfo = data.getDimensionInfo(dataDim);\n    dimInfo.displayName && nameArr.push(dimInfo.displayName);\n  });\n  return nameArr.join(' ');\n}\n\nfunction dataTaskCount(context) {\n  return context.model.getRawData().count();\n}\n\nfunction dataTaskReset(context) {\n  var seriesModel = context.model;\n  seriesModel.setData(seriesModel.getRawData().cloneShallow());\n  return dataTaskProgress;\n}\n\nfunction dataTaskProgress(param, context) {\n  // Avoid repead cloneShallow when data just created in reset.\n  if (context.outputData && param.end > context.outputData.count()) {\n    context.model.getRawData().cloneShallow(context.outputData);\n  }\n} // TODO refactor\n\n\nfunction wrapData(data, seriesModel) {\n  zrUtil.each(data.CHANGABLE_METHODS, function (methodName) {\n    data.wrapMethod(methodName, zrUtil.curry(onDataSelfChange, seriesModel));\n  });\n}\n\nfunction onDataSelfChange(seriesModel) {\n  var task = getCurrentTask(seriesModel);\n\n  if (task) {\n    // Consider case: filter, selectRange\n    task.setOutputEnd(this.count());\n  }\n}\n\nfunction getCurrentTask(seriesModel) {\n  var scheduler = (seriesModel.ecModel || {}).scheduler;\n  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);\n\n  if (pipeline) {\n    // When pipline finished, the currrentTask keep the last\n    // task (renderTask).\n    var task = pipeline.currentTask;\n\n    if (task) {\n      var agentStubMap = task.agentStubMap;\n\n      if (agentStubMap) {\n        task = agentStubMap.get(seriesModel.uid);\n      }\n    }\n\n    return task;\n  }\n}\n\nvar _default = SeriesModel;\nmodule.exports = _default;","map":{"version":3,"names":["_config","require","__DEV__","zrUtil","env","_format","formatTime","encodeHTML","addCommas","getTooltipMarker","modelUtil","ComponentModel","colorPaletteMixin","dataFormatMixin","_layout","getLayoutParams","mergeLayoutParam","_task","createTask","_sourceHelper","prepareSource","getSource","_dataProvider","retrieveRawValue","inner","makeInner","SeriesModel","extend","type","seriesIndex","coordinateSystem","defaultOption","legendVisualProvider","visualColorAccessPath","visualBorderColorAccessPath","layoutMode","init","option","parentModel","ecModel","extraOpt","componentIndex","dataTask","count","dataTaskCount","reset","dataTaskReset","context","model","mergeDefaultAndTheme","data","getInitialData","wrapData","dataBeforeProcessed","autoSeriesName","inputPositionParams","themeSubType","subType","hasClass","merge","getTheme","get","getDefaultOption","defaultEmphasis","fillDataTextStyle","mergeOption","newSeriesOption","dirty","isTypedArray","props","i","length","label","appendData","params","getRawData","getData","dataType","task","getCurrentTask","getLinkedData","setData","modifyOutputEnd","setOutputEnd","outputData","getBaseAxis","coordSys","formatTooltip","dataIndex","multipleSeries","renderMode","series","newLine","isRichText","markers","markerId","formatArrayValue","value","vertially","reduce","val","idx","dimItem","getDimensionInfo","tooltip","displayName","result","tooltipDims","each","dim","setEachItem","dimInfo","otherDims","dimType","markName","dimHead","color","dimHeadStr","content","valStr","push","join","style","formatSingleValue","mapDimension","tooltipDimLen","getRawValue","isValueArr","isArray","getItemVisual","isObject","colorStops","formattedValue","colorEl","name","getName","seriesName","isNameSpecified","colorStr","html","isAnimationEnabled","node","animationEnabled","getShallow","restoreData","getColorFromPalette","scope","requestColorNum","call","coordDimToDataDim","coordDim","getProgressive","getProgressiveThreshold","getAxisTooltipData","getTooltipPosition","pipeTask","preventIncremental","pipelineContext","mixin","seriesModel","getSeriesAutoName","dataDims","nameArr","dataDim","cloneShallow","dataTaskProgress","param","end","CHANGABLE_METHODS","methodName","wrapMethod","curry","onDataSelfChange","scheduler","pipeline","getPipeline","uid","currentTask","agentStubMap","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/model/Series.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar _format = require(\"../util/format\");\n\nvar formatTime = _format.formatTime;\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\nvar getTooltipMarker = _format.getTooltipMarker;\n\nvar modelUtil = require(\"../util/model\");\n\nvar ComponentModel = require(\"./Component\");\n\nvar colorPaletteMixin = require(\"./mixin/colorPalette\");\n\nvar dataFormatMixin = require(\"../model/mixin/dataFormat\");\n\nvar _layout = require(\"../util/layout\");\n\nvar getLayoutParams = _layout.getLayoutParams;\nvar mergeLayoutParam = _layout.mergeLayoutParam;\n\nvar _task = require(\"../stream/task\");\n\nvar createTask = _task.createTask;\n\nvar _sourceHelper = require(\"../data/helper/sourceHelper\");\n\nvar prepareSource = _sourceHelper.prepareSource;\nvar getSource = _sourceHelper.getSource;\n\nvar _dataProvider = require(\"../data/helper/dataProvider\");\n\nvar retrieveRawValue = _dataProvider.retrieveRawValue;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar inner = modelUtil.makeInner();\nvar SeriesModel = ComponentModel.extend({\n  type: 'series.__base__',\n\n  /**\n   * @readOnly\n   */\n  seriesIndex: 0,\n  // coodinateSystem will be injected in the echarts/CoordinateSystem\n  coordinateSystem: null,\n\n  /**\n   * @type {Object}\n   * @protected\n   */\n  defaultOption: null,\n\n  /**\n   * legend visual provider to the legend component\n   * @type {Object}\n   */\n  // PENDING\n  legendVisualProvider: null,\n\n  /**\n   * Access path of color for visual\n   */\n  visualColorAccessPath: 'itemStyle.color',\n\n  /**\n   * Access path of borderColor for visual\n   */\n  visualBorderColorAccessPath: 'itemStyle.borderColor',\n\n  /**\n   * Support merge layout params.\n   * Only support 'box' now (left/right/top/bottom/width/height).\n   * @type {string|Object} Object can be {ignoreSize: true}\n   * @readOnly\n   */\n  layoutMode: null,\n  init: function (option, parentModel, ecModel, extraOpt) {\n    /**\n     * @type {number}\n     * @readOnly\n     */\n    this.seriesIndex = this.componentIndex;\n    this.dataTask = createTask({\n      count: dataTaskCount,\n      reset: dataTaskReset\n    });\n    this.dataTask.context = {\n      model: this\n    };\n    this.mergeDefaultAndTheme(option, ecModel);\n    prepareSource(this);\n    var data = this.getInitialData(option, ecModel);\n    wrapData(data, this);\n    this.dataTask.context.data = data;\n\n    /**\n     * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n     * @private\n     */\n    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkList\n    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model\n    // init or merge stage, because the data can be restored. So we do not `restoreData`\n    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.\n    // Call `seriesModel.getRawData()` instead.\n    // this.restoreData();\n\n    autoSeriesName(this);\n  },\n\n  /**\n   * Util for merge default and theme to option\n   * @param  {Object} option\n   * @param  {module:echarts/model/Global} ecModel\n   */\n  mergeDefaultAndTheme: function (option, ecModel) {\n    var layoutMode = this.layoutMode;\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option, 'label', ['show']);\n    this.fillDataTextStyle(option.data);\n\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  },\n  mergeOption: function (newSeriesOption, ecModel) {\n    // this.settingTask.dirty();\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = this.layoutMode;\n\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n\n    prepareSource(this);\n    var data = this.getInitialData(newSeriesOption, ecModel);\n    wrapData(data, this);\n    this.dataTask.dirty();\n    this.dataTask.context.data = data;\n    inner(this).dataBeforeProcessed = data;\n    autoSeriesName(this);\n  },\n  fillDataTextStyle: function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data && !zrUtil.isTypedArray(data)) {\n      var props = ['show'];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i], 'label', props);\n        }\n      }\n    }\n  },\n\n  /**\n   * Init a data structure from data related option in series\n   * Must be overwritten\n   */\n  getInitialData: function () {},\n\n  /**\n   * Append data to list\n   * @param {Object} params\n   * @param {Array|TypedArray} params.data\n   */\n  appendData: function (params) {\n    // FIXME ???\n    // (1) If data from dataset, forbidden append.\n    // (2) support append data of dataset.\n    var data = this.getRawData();\n    data.appendData(params.data);\n  },\n\n  /**\n   * Consider some method like `filter`, `map` need make new data,\n   * We should make sure that `seriesModel.getData()` get correct\n   * data in the stream procedure. So we fetch data from upstream\n   * each time `task.perform` called.\n   * @param {string} [dataType]\n   * @return {module:echarts/data/List}\n   */\n  getData: function (dataType) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var data = task.context.data;\n      return dataType == null ? data : data.getLinkedData(dataType);\n    } else {\n      // When series is not alive (that may happen when click toolbox\n      // restore or setOption with not merge mode), series data may\n      // be still need to judge animation or something when graphic\n      // elements want to know whether fade out.\n      return inner(this).data;\n    }\n  },\n\n  /**\n   * @param {module:echarts/data/List} data\n   */\n  setData: function (data) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var context = task.context; // Consider case: filter, data sample.\n\n      if (context.data !== data && task.modifyOutputEnd) {\n        task.setOutputEnd(data.count());\n      }\n\n      context.outputData = data; // Caution: setData should update context.data,\n      // Because getData may be called multiply in a\n      // single stage and expect to get the data just\n      // set. (For example, AxisProxy, x y both call\n      // getData and setDate sequentially).\n      // So the context.data should be fetched from\n      // upstream each time when a stage starts to be\n      // performed.\n\n      if (task !== this.dataTask) {\n        context.data = data;\n      }\n    }\n\n    inner(this).data = data;\n  },\n\n  /**\n   * @see {module:echarts/data/helper/sourceHelper#getSource}\n   * @return {module:echarts/data/Source} source\n   */\n  getSource: function () {\n    return getSource(this);\n  },\n\n  /**\n   * Get data before processed\n   * @return {module:echarts/data/List}\n   */\n  getRawData: function () {\n    return inner(this).dataBeforeProcessed;\n  },\n\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n  getBaseAxis: function () {\n    var coordSys = this.coordinateSystem;\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  },\n  // FIXME\n\n  /**\n   * Default tooltip formatter\n   *\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   * @param {string} [renderMode='html'] valid values: 'html' and 'richText'.\n   *                                     'html' is used for rendering tooltip in extra DOM form, and the result\n   *                                     string is used as DOM HTML content.\n   *                                     'richText' is used for rendering tooltip in rich text form, for those where\n   *                                     DOM operation is not supported.\n   * @return {Object} formatted tooltip with `html` and `markers`\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType, renderMode) {\n    var series = this;\n    renderMode = renderMode || 'html';\n    var newLine = renderMode === 'html' ? '<br/>' : '\\n';\n    var isRichText = renderMode === 'richText';\n    var markers = {};\n    var markerId = 0;\n\n    function formatArrayValue(value) {\n      // ??? TODO refactor these logic.\n      // check: category-no-encode-has-axis-data in dataset.html\n      var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n        var dimItem = data.getDimensionInfo(idx);\n        return vertially |= dimItem && dimItem.tooltip !== false && dimItem.displayName != null;\n      }, 0);\n      var result = [];\n      tooltipDims.length ? zrUtil.each(tooltipDims, function (dim) {\n        setEachItem(retrieveRawValue(data, dataIndex, dim), dim);\n      }) // By default, all dims is used on tooltip.\n      : zrUtil.each(value, setEachItem);\n\n      function setEachItem(val, dim) {\n        var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.\n\n        if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n          return;\n        }\n\n        var dimType = dimInfo.type;\n        var markName = 'sub' + series.seriesIndex + 'at' + markerId;\n        var dimHead = getTooltipMarker({\n          color: color,\n          type: 'subItem',\n          renderMode: renderMode,\n          markerId: markName\n        });\n        var dimHeadStr = typeof dimHead === 'string' ? dimHead : dimHead.content;\n        var valStr = (vertially ? dimHeadStr + encodeHTML(dimInfo.displayName || '-') + ': ' : '') + // FIXME should not format time for raw data?\n        encodeHTML(dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime('yyyy/MM/dd hh:mm:ss', val) : addCommas(val));\n        valStr && result.push(valStr);\n\n        if (isRichText) {\n          markers[markName] = color;\n          ++markerId;\n        }\n      }\n\n      var newLine = vertially ? isRichText ? '\\n' : '<br/>' : '';\n      var content = newLine + result.join(newLine || ', ');\n      return {\n        renderMode: renderMode,\n        content: content,\n        style: markers\n      };\n    }\n\n    function formatSingleValue(val) {\n      // return encodeHTML(addCommas(val));\n      return {\n        renderMode: renderMode,\n        content: encodeHTML(addCommas(val)),\n        style: markers\n      };\n    }\n\n    var data = this.getData();\n    var tooltipDims = data.mapDimension('defaultedTooltip', true);\n    var tooltipDimLen = tooltipDims.length;\n    var value = this.getRawValue(dataIndex);\n    var isValueArr = zrUtil.isArray(value);\n    var color = data.getItemVisual(dataIndex, 'color');\n\n    if (zrUtil.isObject(color) && color.colorStops) {\n      color = (color.colorStops[0] || {}).color;\n    }\n\n    color = color || 'transparent'; // Complicated rule for pretty tooltip.\n\n    var formattedValue = tooltipDimLen > 1 || isValueArr && !tooltipDimLen ? formatArrayValue(value) : tooltipDimLen ? formatSingleValue(retrieveRawValue(data, dataIndex, tooltipDims[0])) : formatSingleValue(isValueArr ? value[0] : value);\n    var content = formattedValue.content;\n    var markName = series.seriesIndex + 'at' + markerId;\n    var colorEl = getTooltipMarker({\n      color: color,\n      type: 'item',\n      renderMode: renderMode,\n      markerId: markName\n    });\n    markers[markName] = color;\n    ++markerId;\n    var name = data.getName(dataIndex);\n    var seriesName = this.name;\n\n    if (!modelUtil.isNameSpecified(this)) {\n      seriesName = '';\n    }\n\n    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? newLine : ': ') : '';\n    var colorStr = typeof colorEl === 'string' ? colorEl : colorEl.content;\n    var html = !multipleSeries ? seriesName + colorStr + (name ? encodeHTML(name) + ': ' + content : content) : colorStr + seriesName + content;\n    return {\n      html: html,\n      markers: markers\n    };\n  },\n\n  /**\n   * @return {boolean}\n   */\n  isAnimationEnabled: function () {\n    if (env.node) {\n      return false;\n    }\n\n    var animationEnabled = this.getShallow('animation');\n\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n\n    return animationEnabled;\n  },\n  restoreData: function () {\n    this.dataTask.dirty();\n  },\n  getColorFromPalette: function (name, scope, requestColorNum) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope, requestColorNum);\n\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope, requestColorNum);\n    }\n\n    return color;\n  },\n\n  /**\n   * Use `data.mapDimension(coordDim, true)` instead.\n   * @deprecated\n   */\n  coordDimToDataDim: function (coordDim) {\n    return this.getRawData().mapDimension(coordDim, true);\n  },\n\n  /**\n   * Get progressive rendering count each step\n   * @return {number}\n   */\n  getProgressive: function () {\n    return this.get('progressive');\n  },\n\n  /**\n   * Get progressive rendering count each step\n   * @return {number}\n   */\n  getProgressiveThreshold: function () {\n    return this.get('progressiveThreshold');\n  },\n\n  /**\n   * Get data indices for show tooltip content. See tooltip.\n   * @abstract\n   * @param {Array.<string>|string} dim\n   * @param {Array.<number>} value\n   * @param {module:echarts/coord/single/SingleAxis} baseAxis\n   * @return {Object} {dataIndices, nestestValue}.\n   */\n  getAxisTooltipData: null,\n\n  /**\n   * See tooltip.\n   * @abstract\n   * @param {number} dataIndex\n   * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n   */\n  getTooltipPosition: null,\n\n  /**\n   * @see {module:echarts/stream/Scheduler}\n   */\n  pipeTask: null,\n\n  /**\n   * Convinient for override in extended class.\n   * @protected\n   * @type {Function}\n   */\n  preventIncremental: null,\n\n  /**\n   * @public\n   * @readOnly\n   * @type {Object}\n   */\n  pipelineContext: null\n});\nzrUtil.mixin(SeriesModel, dataFormatMixin);\nzrUtil.mixin(SeriesModel, colorPaletteMixin);\n/**\n * MUST be called after `prepareSource` called\n * Here we need to make auto series, especially for auto legend. But we\n * do not modify series.name in option to avoid side effects.\n */\n\nfunction autoSeriesName(seriesModel) {\n  // User specified name has higher priority, otherwise it may cause\n  // series can not be queried unexpectedly.\n  var name = seriesModel.name;\n\n  if (!modelUtil.isNameSpecified(seriesModel)) {\n    seriesModel.name = getSeriesAutoName(seriesModel) || name;\n  }\n}\n\nfunction getSeriesAutoName(seriesModel) {\n  var data = seriesModel.getRawData();\n  var dataDims = data.mapDimension('seriesName', true);\n  var nameArr = [];\n  zrUtil.each(dataDims, function (dataDim) {\n    var dimInfo = data.getDimensionInfo(dataDim);\n    dimInfo.displayName && nameArr.push(dimInfo.displayName);\n  });\n  return nameArr.join(' ');\n}\n\nfunction dataTaskCount(context) {\n  return context.model.getRawData().count();\n}\n\nfunction dataTaskReset(context) {\n  var seriesModel = context.model;\n  seriesModel.setData(seriesModel.getRawData().cloneShallow());\n  return dataTaskProgress;\n}\n\nfunction dataTaskProgress(param, context) {\n  // Avoid repead cloneShallow when data just created in reset.\n  if (context.outputData && param.end > context.outputData.count()) {\n    context.model.getRawData().cloneShallow(context.outputData);\n  }\n} // TODO refactor\n\n\nfunction wrapData(data, seriesModel) {\n  zrUtil.each(data.CHANGABLE_METHODS, function (methodName) {\n    data.wrapMethod(methodName, zrUtil.curry(onDataSelfChange, seriesModel));\n  });\n}\n\nfunction onDataSelfChange(seriesModel) {\n  var task = getCurrentTask(seriesModel);\n\n  if (task) {\n    // Consider case: filter, selectRange\n    task.setOutputEnd(this.count());\n  }\n}\n\nfunction getCurrentTask(seriesModel) {\n  var scheduler = (seriesModel.ecModel || {}).scheduler;\n  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);\n\n  if (pipeline) {\n    // When pipline finished, the currrentTask keep the last\n    // task (renderTask).\n    var task = pipeline.currentTask;\n\n    if (task) {\n      var agentStubMap = task.agentStubMap;\n\n      if (agentStubMap) {\n        task = agentStubMap.get(seriesModel.uid);\n      }\n    }\n\n    return task;\n  }\n}\n\nvar _default = SeriesModel;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}