{"ast":null,"code":"let raf = null;\n\nfunction requestAnimationFrame(callback) {\n  if (!raf) {\n    raf = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {\n      return setTimeout(callback, 16);\n    }).bind(window);\n  }\n\n  return raf(callback);\n}\n\nlet caf = null;\n\nfunction cancelAnimationFrame(id) {\n  if (!caf) {\n    caf = (window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || function (id) {\n      clearTimeout(id);\n    }).bind(window);\n  }\n\n  caf(id);\n}\n\nfunction createStyles(styleText) {\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = styleText;\n  } else {\n    style.appendChild(document.createTextNode(styleText));\n  }\n\n  (document.querySelector('head') || document.body).appendChild(style);\n  return style;\n}\n\nfunction createElement(tagName, props = {}) {\n  let elem = document.createElement(tagName);\n  Object.keys(props).forEach(key => {\n    elem[key] = props[key];\n  });\n  return elem;\n}\n\nfunction getComputedStyle(elem, prop, pseudo) {\n  // for older versions of Firefox, `getComputedStyle` required\n  // the second argument and may return `null` for some elements\n  // when `display: none`\n  let computedStyle = window.getComputedStyle(elem, pseudo || null) || {\n    display: 'none'\n  };\n  return computedStyle[prop];\n}\n\nfunction getRenderInfo(elem) {\n  if (!document.documentElement.contains(elem)) {\n    return {\n      detached: true,\n      rendered: false\n    };\n  }\n\n  let current = elem;\n\n  while (current !== document) {\n    if (getComputedStyle(current, 'display') === 'none') {\n      return {\n        detached: false,\n        rendered: false\n      };\n    }\n\n    current = current.parentNode;\n  }\n\n  return {\n    detached: false,\n    rendered: true\n  };\n}\n\nvar css = \".resize-triggers{visibility:hidden;opacity:0}.resize-contract-trigger,.resize-contract-trigger:before,.resize-expand-trigger,.resize-triggers{content:\\\"\\\";position:absolute;top:0;left:0;height:100%;width:100%;overflow:hidden}.resize-contract-trigger,.resize-expand-trigger{background:#eee;overflow:auto}.resize-contract-trigger:before{width:200%;height:200%}\";\nlet total = 0;\nlet style = null;\n\nfunction addListener(elem, callback) {\n  if (!elem.__resize_mutation_handler__) {\n    elem.__resize_mutation_handler__ = handleMutation.bind(elem);\n  }\n\n  let listeners = elem.__resize_listeners__;\n\n  if (!listeners) {\n    elem.__resize_listeners__ = [];\n\n    if (window.ResizeObserver) {\n      let {\n        offsetWidth,\n        offsetHeight\n      } = elem;\n      let ro = new ResizeObserver(() => {\n        if (!elem.__resize_observer_triggered__) {\n          elem.__resize_observer_triggered__ = true;\n\n          if (elem.offsetWidth === offsetWidth && elem.offsetHeight === offsetHeight) {\n            return;\n          }\n        }\n\n        runCallbacks(elem);\n      }); // initially display none won't trigger ResizeObserver callback\n\n      let {\n        detached,\n        rendered\n      } = getRenderInfo(elem);\n      elem.__resize_observer_triggered__ = detached === false && rendered === false;\n      elem.__resize_observer__ = ro;\n      ro.observe(elem);\n    } else if (elem.attachEvent && elem.addEventListener) {\n      // targeting IE9/10\n      elem.__resize_legacy_resize_handler__ = function handleLegacyResize() {\n        runCallbacks(elem);\n      };\n\n      elem.attachEvent('onresize', elem.__resize_legacy_resize_handler__);\n      document.addEventListener('DOMSubtreeModified', elem.__resize_mutation_handler__);\n    } else {\n      if (!total) {\n        style = createStyles(css);\n      }\n\n      initTriggers(elem);\n      elem.__resize_rendered__ = getRenderInfo(elem).rendered;\n\n      if (window.MutationObserver) {\n        let mo = new MutationObserver(elem.__resize_mutation_handler__);\n        mo.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n        elem.__resize_mutation_observer__ = mo;\n      }\n    }\n  }\n\n  elem.__resize_listeners__.push(callback);\n\n  total++;\n}\n\nfunction removeListener(elem, callback) {\n  // targeting IE9/10\n  if (elem.detachEvent && elem.removeEventListener) {\n    elem.detachEvent('onresize', elem.__resize_legacy_resize_handler__);\n    document.removeEventListener('DOMSubtreeModified', elem.__resize_mutation_handler__);\n    return;\n  }\n\n  let listeners = elem.__resize_listeners__;\n\n  if (!listeners) {\n    return;\n  }\n\n  listeners.splice(listeners.indexOf(callback), 1);\n\n  if (!listeners.length) {\n    if (elem.__resize_observer__) {\n      elem.__resize_observer__.unobserve(elem);\n\n      elem.__resize_observer__.disconnect();\n\n      elem.__resize_observer__ = null;\n    } else {\n      if (elem.__resize_mutation_observer__) {\n        elem.__resize_mutation_observer__.disconnect();\n\n        elem.__resize_mutation_observer__ = null;\n      }\n\n      elem.removeEventListener('scroll', handleScroll);\n      elem.removeChild(elem.__resize_triggers__.triggers);\n      elem.__resize_triggers__ = null;\n    }\n\n    elem.__resize_listeners__ = null;\n  }\n\n  if (! --total && style) {\n    style.parentNode.removeChild(style);\n  }\n}\n\nfunction getUpdatedSize(elem) {\n  let {\n    width,\n    height\n  } = elem.__resize_last__;\n  let {\n    offsetWidth,\n    offsetHeight\n  } = elem;\n\n  if (offsetWidth !== width || offsetHeight !== height) {\n    return {\n      width: offsetWidth,\n      height: offsetHeight\n    };\n  }\n\n  return null;\n}\n\nfunction handleMutation() {\n  // `this` denotes the scrolling element\n  let {\n    rendered,\n    detached\n  } = getRenderInfo(this);\n\n  if (rendered !== this.__resize_rendered__) {\n    if (!detached && this.__resize_triggers__) {\n      resetTriggers(this);\n      this.addEventListener('scroll', handleScroll, true);\n    }\n\n    this.__resize_rendered__ = rendered;\n    runCallbacks(this);\n  }\n}\n\nfunction handleScroll() {\n  // `this` denotes the scrolling element\n  resetTriggers(this);\n\n  if (this.__resize_raf__) {\n    cancelAnimationFrame(this.__resize_raf__);\n  }\n\n  this.__resize_raf__ = requestAnimationFrame(() => {\n    let updated = getUpdatedSize(this);\n\n    if (updated) {\n      this.__resize_last__ = updated;\n      runCallbacks(this);\n    }\n  });\n}\n\nfunction runCallbacks(elem) {\n  if (!elem || !elem.__resize_listeners__) {\n    return;\n  }\n\n  elem.__resize_listeners__.forEach(callback => {\n    callback.call(elem);\n  });\n}\n\nfunction initTriggers(elem) {\n  let position = getComputedStyle(elem, 'position');\n\n  if (!position || position === 'static') {\n    elem.style.position = 'relative';\n  }\n\n  elem.__resize_old_position__ = position;\n  elem.__resize_last__ = {};\n  let triggers = createElement('div', {\n    className: 'resize-triggers'\n  });\n  let expand = createElement('div', {\n    className: 'resize-expand-trigger'\n  });\n  let expandChild = createElement('div');\n  let contract = createElement('div', {\n    className: 'resize-contract-trigger'\n  });\n  expand.appendChild(expandChild);\n  triggers.appendChild(expand);\n  triggers.appendChild(contract);\n  elem.appendChild(triggers);\n  elem.__resize_triggers__ = {\n    triggers,\n    expand,\n    expandChild,\n    contract\n  };\n  resetTriggers(elem);\n  elem.addEventListener('scroll', handleScroll, true);\n  elem.__resize_last__ = {\n    width: elem.offsetWidth,\n    height: elem.offsetHeight\n  };\n}\n\nfunction resetTriggers(elem) {\n  let {\n    expand,\n    expandChild,\n    contract\n  } = elem.__resize_triggers__; // batch read\n\n  let {\n    scrollWidth: csw,\n    scrollHeight: csh\n  } = contract;\n  let {\n    offsetWidth: eow,\n    offsetHeight: eoh,\n    scrollWidth: esw,\n    scrollHeight: esh\n  } = expand; // batch write\n\n  contract.scrollLeft = csw;\n  contract.scrollTop = csh;\n  expandChild.style.width = eow + 1 + 'px';\n  expandChild.style.height = eoh + 1 + 'px';\n  expand.scrollLeft = esw;\n  expand.scrollTop = esh;\n}\n\nexport { addListener, removeListener };","map":null,"metadata":{},"sourceType":"module"}