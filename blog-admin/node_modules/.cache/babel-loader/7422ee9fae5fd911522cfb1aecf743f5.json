{"ast":null,"code":"import * as _ from 'lodash-es';\nexport { resolveConflicts };\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\n\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n\n  _.forEach(entries, function (entry, i) {\n    var tmp = mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i\n    };\n\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter; // @ts-expect-error\n\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n\n      if (_.isUndefined(uEntry.barycenter) || _.isUndefined(vEntry.barycenter) || uEntry.barycenter >= vEntry.barycenter) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(_.filter(entries, function (entry) {\n    return !entry.merged;\n  }), function (entry) {\n    return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n  });\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}","map":{"version":3,"names":["_","resolveConflicts","entries","cg","mappedEntries","forEach","entry","i","tmp","v","indegree","in","out","vs","isUndefined","barycenter","weight","edges","e","entryV","entryW","w","push","sourceSet","filter","doResolveConflicts","handleIn","vEntry","uEntry","merged","mergeEntries","handleOut","wEntry","length","pop","reverse","map","pick","target","source","sum","concat","Math","min"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}