{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(polar, axis) {\n  return axis.dim + polar.model.componentIndex;\n}\n/**\n * @param {string} seriesType\n * @param {module:echarts/model/Global} ecModel\n * @param {module:echarts/ExtensionAPI} api\n */\n\n\nfunction barLayoutPolar(seriesType, ecModel, api) {\n  var lastStackCoords = {};\n  var barWidthAndOffset = calRadialBar(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {\n    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'polar';\n  }));\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for polar only\n    if (seriesModel.coordinateSystem.type !== 'polar') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisKey = getAxisKey(polar, baseAxis);\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[axisKey][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = polar.getOtherAxis(baseAxis);\n    var cx = seriesModel.coordinateSystem.cx;\n    var cy = seriesModel.coordinateSystem.cy;\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    var barMinAngle = seriesModel.get('barMinAngle') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var clampLayout = baseAxis.dim !== 'radius' || !seriesModel.get('roundCap', true);\n    var valueAxisStart = valueAxis.dim === 'radius' ? valueAxis.dataToRadius(0) : valueAxis.dataToAngle(0);\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n      // Only ordinal axis can be stacked.\n\n      if (stacked) {\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            // Positive stack\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var r0;\n      var r;\n      var startAngle;\n      var endAngle; // radial sector\n\n      if (valueAxis.dim === 'radius') {\n        var radiusSpan = valueAxis.dataToRadius(value) - valueAxisStart;\n        var angle = baseAxis.dataToAngle(baseValue);\n\n        if (Math.abs(radiusSpan) < barMinHeight) {\n          radiusSpan = (radiusSpan < 0 ? -1 : 1) * barMinHeight;\n        }\n\n        r0 = baseCoord;\n        r = baseCoord + radiusSpan;\n        startAngle = angle - columnOffset;\n        endAngle = startAngle - columnWidth;\n        stacked && (lastStackCoords[stackId][baseValue][sign] = r);\n      } // tangential sector\n      else {\n        var angleSpan = valueAxis.dataToAngle(value, clampLayout) - valueAxisStart;\n        var radius = baseAxis.dataToRadius(baseValue);\n\n        if (Math.abs(angleSpan) < barMinAngle) {\n          angleSpan = (angleSpan < 0 ? -1 : 1) * barMinAngle;\n        }\n\n        r0 = radius + columnOffset;\n        r = r0 + columnWidth;\n        startAngle = baseCoord;\n        endAngle = baseCoord + angleSpan; // if the previous stack is at the end of the ring,\n        // add a round to differentiate it from origin\n        // var extent = angleAxis.getExtent();\n        // var stackCoord = angle;\n        // if (stackCoord === extent[0] && value > 0) {\n        //     stackCoord = extent[1];\n        // }\n        // else if (stackCoord === extent[1] && value < 0) {\n        //     stackCoord = extent[0];\n        // }\n\n        stacked && (lastStackCoords[stackId][baseValue][sign] = endAngle);\n      }\n\n      data.setItemLayout(idx, {\n        cx: cx,\n        cy: cy,\n        r0: r0,\n        r: r,\n        // Consider that positive angle is anti-clockwise,\n        // while positive radian of sector is clockwise\n        startAngle: -startAngle * Math.PI / 180,\n        endAngle: -endAngle * Math.PI / 180\n      });\n    }\n  }, this);\n}\n/**\n * Calculate bar width and offset for radial bar charts\n */\n\n\nfunction calRadialBar(barSeries, api) {\n  // Columns info on each category axis. Key is polar name\n  var columnsMap = {};\n  zrUtil.each(barSeries, function (seriesModel, idx) {\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisKey = getAxisKey(polar, baseAxis);\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = getSeriesStackId(seriesModel);\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    };\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n\n    if (barWidth && !stacks[stackId].width) {\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      stacks[stackId].width = barWidth;\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    barGap != null && (columnsOnAxis.gap = barGap);\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column, stack) {\n      var maxWidth = column.maxWidth;\n\n      if (maxWidth && maxWidth < autoWidth) {\n        maxWidth = Math.min(maxWidth, remainedWidth);\n\n        if (column.width) {\n          maxWidth = Math.min(maxWidth, column.width);\n        }\n\n        remainedWidth -= maxWidth;\n        column.width = maxWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n\nvar _default = barLayoutPolar;\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","_number","parsePercent","_dataStackHelper","isDimensionStacked","getSeriesStackId","seriesModel","get","seriesIndex","getAxisKey","polar","axis","dim","model","componentIndex","barLayoutPolar","seriesType","ecModel","api","lastStackCoords","barWidthAndOffset","calRadialBar","filter","getSeriesByType","isSeriesFiltered","coordinateSystem","type","eachSeriesByType","data","getData","baseAxis","getBaseAxis","axisKey","stackId","columnLayoutInfo","columnOffset","offset","columnWidth","width","valueAxis","getOtherAxis","cx","cy","barMinHeight","barMinAngle","valueDim","mapDimension","baseDim","stacked","clampLayout","valueAxisStart","dataToRadius","dataToAngle","idx","len","count","value","baseValue","sign","baseCoord","p","n","r0","r","startAngle","endAngle","radiusSpan","angle","Math","abs","angleSpan","radius","setItemLayout","PI","barSeries","columnsMap","each","axisExtent","getExtent","bandWidth","getBandWidth","columnsOnAxis","remainedWidth","autoWidthCount","categoryGap","gap","stacks","maxWidth","barWidth","barMaxWidth","barGap","barCategoryGap","min","result","coordSysName","barGapPercent","autoWidth","max","column","stack","widthSum","lastColumn","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/blog-vue/blog-admin/node_modules/echarts/lib/layout/barPolar.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(polar, axis) {\n  return axis.dim + polar.model.componentIndex;\n}\n/**\n * @param {string} seriesType\n * @param {module:echarts/model/Global} ecModel\n * @param {module:echarts/ExtensionAPI} api\n */\n\n\nfunction barLayoutPolar(seriesType, ecModel, api) {\n  var lastStackCoords = {};\n  var barWidthAndOffset = calRadialBar(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {\n    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'polar';\n  }));\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for polar only\n    if (seriesModel.coordinateSystem.type !== 'polar') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisKey = getAxisKey(polar, baseAxis);\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[axisKey][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = polar.getOtherAxis(baseAxis);\n    var cx = seriesModel.coordinateSystem.cx;\n    var cy = seriesModel.coordinateSystem.cy;\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    var barMinAngle = seriesModel.get('barMinAngle') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var clampLayout = baseAxis.dim !== 'radius' || !seriesModel.get('roundCap', true);\n    var valueAxisStart = valueAxis.dim === 'radius' ? valueAxis.dataToRadius(0) : valueAxis.dataToAngle(0);\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n      // Only ordinal axis can be stacked.\n\n      if (stacked) {\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            // Positive stack\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var r0;\n      var r;\n      var startAngle;\n      var endAngle; // radial sector\n\n      if (valueAxis.dim === 'radius') {\n        var radiusSpan = valueAxis.dataToRadius(value) - valueAxisStart;\n        var angle = baseAxis.dataToAngle(baseValue);\n\n        if (Math.abs(radiusSpan) < barMinHeight) {\n          radiusSpan = (radiusSpan < 0 ? -1 : 1) * barMinHeight;\n        }\n\n        r0 = baseCoord;\n        r = baseCoord + radiusSpan;\n        startAngle = angle - columnOffset;\n        endAngle = startAngle - columnWidth;\n        stacked && (lastStackCoords[stackId][baseValue][sign] = r);\n      } // tangential sector\n      else {\n          var angleSpan = valueAxis.dataToAngle(value, clampLayout) - valueAxisStart;\n          var radius = baseAxis.dataToRadius(baseValue);\n\n          if (Math.abs(angleSpan) < barMinAngle) {\n            angleSpan = (angleSpan < 0 ? -1 : 1) * barMinAngle;\n          }\n\n          r0 = radius + columnOffset;\n          r = r0 + columnWidth;\n          startAngle = baseCoord;\n          endAngle = baseCoord + angleSpan; // if the previous stack is at the end of the ring,\n          // add a round to differentiate it from origin\n          // var extent = angleAxis.getExtent();\n          // var stackCoord = angle;\n          // if (stackCoord === extent[0] && value > 0) {\n          //     stackCoord = extent[1];\n          // }\n          // else if (stackCoord === extent[1] && value < 0) {\n          //     stackCoord = extent[0];\n          // }\n\n          stacked && (lastStackCoords[stackId][baseValue][sign] = endAngle);\n        }\n\n      data.setItemLayout(idx, {\n        cx: cx,\n        cy: cy,\n        r0: r0,\n        r: r,\n        // Consider that positive angle is anti-clockwise,\n        // while positive radian of sector is clockwise\n        startAngle: -startAngle * Math.PI / 180,\n        endAngle: -endAngle * Math.PI / 180\n      });\n    }\n  }, this);\n}\n/**\n * Calculate bar width and offset for radial bar charts\n */\n\n\nfunction calRadialBar(barSeries, api) {\n  // Columns info on each category axis. Key is polar name\n  var columnsMap = {};\n  zrUtil.each(barSeries, function (seriesModel, idx) {\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisKey = getAxisKey(polar, baseAxis);\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = getSeriesStackId(seriesModel);\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    };\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n\n    if (barWidth && !stacks[stackId].width) {\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      stacks[stackId].width = barWidth;\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    barGap != null && (columnsOnAxis.gap = barGap);\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column, stack) {\n      var maxWidth = column.maxWidth;\n\n      if (maxWidth && maxWidth < autoWidth) {\n        maxWidth = Math.min(maxWidth, remainedWidth);\n\n        if (column.width) {\n          maxWidth = Math.min(maxWidth, column.width);\n        }\n\n        remainedWidth -= maxWidth;\n        column.width = maxWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n\nvar _default = barLayoutPolar;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}