{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar layout = require(\"../../util/layout\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar groupData = _model.groupData;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nfunction _default(ecModel, api, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var layoutInfo = getViewRect(seriesModel, api);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    var orient = seriesModel.get('orient');\n    var nodeAlign = seriesModel.get('nodeAlign');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign);\n  });\n}\n/**\n * Get the layout position of the whole view\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign);\n  computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient);\n  computeEdgeDepths(nodes, orient);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var nodeRawValue = node.getValue() || 0;\n    var value = Math.max(value1, value2, nodeRawValue);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n *\n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param  {number} nodeWidth  the dx of the node\n * @param  {number} width  the whole width of the area to draw the view\n */\n\n\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = []; // Storage each node's indegree.\n\n  var indegreeArr = []; //Used to storage the node with indegree is equal to 0.\n\n  var zeroIndegrees = [];\n  var nextTargetNode = [];\n  var x = 0;\n  var kx = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n\n  for (i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n\n  var maxNodeDepth = -1; // Traversing nodes using topological sorting to calculate the\n  // horizontal(if orient === 'horizontal') or vertical(if orient === 'vertical')\n  // position of the nodes.\n\n  while (zeroIndegrees.length) {\n    for (var idx = 0; idx < zeroIndegrees.length; idx++) {\n      var node = zeroIndegrees[idx];\n      var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n      var isItemDepth = item.depth != null && item.depth >= 0;\n\n      if (isItemDepth && item.depth > maxNodeDepth) {\n        maxNodeDepth = item.depth;\n      }\n\n      node.setLayout({\n        depth: isItemDepth ? item.depth : x\n      }, true);\n      orient === 'vertical' ? node.setLayout({\n        dy: nodeWidth\n      }, true) : node.setLayout({\n        dx: nodeWidth\n      }, true);\n\n      for (var edgeIdx = 0; edgeIdx < node.outEdges.length; edgeIdx++) {\n        var edge = node.outEdges[edgeIdx];\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n\n        if (--indegreeArr[nodeIndex] === 0 && nextTargetNode.indexOf(targetNode) < 0) {\n          nextTargetNode.push(targetNode);\n        }\n      }\n    }\n\n    ++x;\n    zeroIndegrees = nextTargetNode;\n    nextTargetNode = [];\n  }\n\n  for (i = 0; i < remainEdges.length; i++) {\n    if (remainEdges[i] === 1) {\n      throw new Error('Sankey is a DAG, the original data has cycle!');\n    }\n  }\n\n  var maxDepth = maxNodeDepth > x - 1 ? maxNodeDepth : x - 1;\n\n  if (nodeAlign && nodeAlign !== 'left') {\n    adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth);\n  }\n\n  var kx = orient === 'vertical' ? (height - nodeWidth) / maxDepth : (width - nodeWidth) / maxDepth;\n  scaleNodeBreadths(nodes, kx, orient);\n}\n\nfunction isNodeDepth(node) {\n  var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n  return item.depth != null && item.depth >= 0;\n}\n\nfunction adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth) {\n  if (nodeAlign === 'right') {\n    var nextSourceNode = [];\n    var remainNodes = nodes;\n    var nodeHeight = 0;\n\n    while (remainNodes.length) {\n      for (var i = 0; i < remainNodes.length; i++) {\n        var node = remainNodes[i];\n        node.setLayout({\n          skNodeHeight: nodeHeight\n        }, true);\n\n        for (var j = 0; j < node.inEdges.length; j++) {\n          var edge = node.inEdges[j];\n\n          if (nextSourceNode.indexOf(edge.node1) < 0) {\n            nextSourceNode.push(edge.node1);\n          }\n        }\n      }\n\n      remainNodes = nextSourceNode;\n      nextSourceNode = [];\n      ++nodeHeight;\n    }\n\n    zrUtil.each(nodes, function (node) {\n      if (!isNodeDepth(node)) {\n        node.setLayout({\n          depth: Math.max(0, maxDepth - node.getLayout().skNodeHeight)\n        }, true);\n      }\n    });\n  } else if (nodeAlign === 'justify') {\n    moveSinksRight(nodes, maxDepth);\n  }\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param {module:echarts/data/Graph~Node} nodes.  node of sankey view.\n * @param {number} maxDepth.  use to assign to node without outEdges as x-position.\n */\n\n\nfunction moveSinksRight(nodes, maxDepth) {\n  zrUtil.each(nodes, function (node) {\n    if (!isNodeDepth(node) && !node.outEdges.length) {\n      node.setLayout({\n        depth: maxDepth\n      }, true);\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} kx   multiple used to scale nodes\n */\n\n\nfunction scaleNodeBreadths(nodes, kx, orient) {\n  zrUtil.each(nodes, function (node) {\n    var nodeDepth = node.getLayout().depth * kx;\n    orient === 'vertical' ? node.setLayout({\n      y: nodeDepth\n    }, true) : node.setLayout({\n      x: nodeDepth\n    }, true);\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param {number} iterations  the number of iterations for the algorithm\n */\n\n\nfunction computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient) {\n  var nodesByBreadth = prepareNodesByBreadth(nodes, orient);\n  initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient);\n  resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n    relaxLeftToRight(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  }\n}\n\nfunction prepareNodesByBreadth(nodes, orient) {\n  var nodesByBreadth = [];\n  var keyAttr = orient === 'vertical' ? 'y' : 'x';\n  var groupResult = groupData(nodes, function (node) {\n    return node.getLayout()[keyAttr];\n  });\n  groupResult.keys.sort(function (a, b) {\n    return a - b;\n  });\n  zrUtil.each(groupResult.keys, function (key) {\n    nodesByBreadth.push(groupResult.buckets.get(key));\n  });\n  return nodesByBreadth;\n}\n/**\n * Compute the original y-position for each node\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n */\n\n\nfunction initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient) {\n  var minKy = Infinity;\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n    var ky = orient === 'vertical' ? (width - (n - 1) * nodeGap) / sum : (height - (n - 1) * nodeGap) / sum;\n\n    if (ky < minKy) {\n      minKy = ky;\n    }\n  });\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      var nodeDy = node.getLayout().value * minKy;\n\n      if (orient === 'vertical') {\n        node.setLayout({\n          x: i\n        }, true);\n        node.setLayout({\n          dx: nodeDy\n        }, true);\n      } else {\n        node.setLayout({\n          y: i\n        }, true);\n        node.setLayout({\n          dy: nodeDy\n        }, true);\n      }\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * minKy;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {number} nodeGap  the vertical distance between two nodes\n * @param {number} height  the whole height of the area to draw the view\n */\n\n\nfunction resolveCollisions(nodesByBreadth, nodeGap, height, width, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    nodes.sort(function (a, b) {\n      return a.getLayout()[keyAttr] - b.getLayout()[keyAttr];\n    });\n    var nodeX;\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var nodeDyAttr = orient === 'vertical' ? 'dx' : 'dy';\n\n    for (var i = 0; i < n; i++) {\n      node = nodes[i];\n      dy = y0 - node.getLayout()[keyAttr];\n\n      if (dy > 0) {\n        nodeX = node.getLayout()[keyAttr] + dy;\n        orient === 'vertical' ? node.setLayout({\n          x: nodeX\n        }, true) : node.setLayout({\n          y: nodeX\n        }, true);\n      }\n\n      y0 = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap;\n    }\n\n    var viewWidth = orient === 'vertical' ? width : height; // If the bottommost node goes outside the bounds, push it back up\n\n    dy = y0 - nodeGap - viewWidth;\n\n    if (dy > 0) {\n      nodeX = node.getLayout()[keyAttr] - dy;\n      orient === 'vertical' ? node.setLayout({\n        x: nodeX\n      }, true) : node.setLayout({\n        y: nodeX\n      }, true);\n      y0 = nodeX;\n\n      for (i = n - 2; i >= 0; --i) {\n        node = nodes[i];\n        dy = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap - y0;\n\n        if (dy > 0) {\n          nodeX = node.getLayout()[keyAttr] - dy;\n          orient === 'vertical' ? node.setLayout({\n            x: nodeX\n          }, true) : node.setLayout({\n            y: nodeX\n          }, true);\n        }\n\n        y0 = node.getLayout()[keyAttr];\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxRightToLeft(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget, orient) / sum(node.outEdges, getEdgeValue, orient);\n\n        if (isNaN(y)) {\n          var len = node.outEdges.length;\n          y = len ? sum(node.outEdges, centerTarget, orient) / len : 0;\n        }\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n\nfunction weightedTarget(edge, orient) {\n  return center(edge.node2, orient) * edge.getValue();\n}\n\nfunction centerTarget(edge, orient) {\n  return center(edge.node2, orient);\n}\n\nfunction weightedSource(edge, orient) {\n  return center(edge.node1, orient) * edge.getValue();\n}\n\nfunction centerSource(edge, orient) {\n  return center(edge.node1, orient);\n}\n\nfunction center(node, orient) {\n  return orient === 'vertical' ? node.getLayout().x + node.getLayout().dx / 2 : node.getLayout().y + node.getLayout().dy / 2;\n}\n\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\n\nfunction sum(array, cb, orient) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n\n  while (++i < len) {\n    var value = +cb.call(array, array[i], orient);\n\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n\n  return sum;\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxLeftToRight(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource, orient) / sum(node.inEdges, getEdgeValue, orient);\n\n        if (isNaN(y)) {\n          var len = node.inEdges.length;\n          y = len ? sum(node.inEdges, centerSource, orient) / len : 0;\n        }\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n/**\n * Compute the depth(y-position) of each edge\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeEdgeDepths(nodes, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodes, function (node) {\n    node.outEdges.sort(function (a, b) {\n      return a.node2.getLayout()[keyAttr] - b.node2.getLayout()[keyAttr];\n    });\n    node.inEdges.sort(function (a, b) {\n      return a.node1.getLayout()[keyAttr] - b.node1.getLayout()[keyAttr];\n    });\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}\n\nmodule.exports = _default;","map":{"version":3,"names":["layout","require","zrUtil","_model","groupData","_default","ecModel","api","payload","eachSeriesByType","seriesModel","nodeWidth","get","nodeGap","layoutInfo","getViewRect","width","height","graph","getGraph","nodes","edges","computeNodeValues","filteredNodes","filter","node","getLayout","value","iterations","length","orient","nodeAlign","layoutSankey","getLayoutRect","getBoxLayoutParams","getWidth","getHeight","computeNodeBreadths","computeNodeDepths","computeEdgeDepths","each","value1","sum","outEdges","getEdgeValue","value2","inEdges","nodeRawValue","getValue","Math","max","setLayout","remainEdges","indegreeArr","zeroIndegrees","nextTargetNode","x","kx","i","push","maxNodeDepth","idx","item","hostGraph","data","getRawDataItem","dataIndex","isItemDepth","depth","dy","dx","edgeIdx","edge","indexEdge","indexOf","targetNode","node2","nodeIndex","Error","maxDepth","adjustNodeWithNodeAlign","scaleNodeBreadths","isNodeDepth","nextSourceNode","remainNodes","nodeHeight","skNodeHeight","j","node1","moveSinksRight","nodeDepth","y","nodesByBreadth","prepareNodesByBreadth","initializeNodeDepth","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","keyAttr","groupResult","keys","sort","a","b","key","buckets","minKy","Infinity","n","ky","nodeDy","edgeDy","nodeX","y0","nodeDyAttr","viewWidth","slice","reverse","weightedTarget","isNaN","len","centerTarget","center","nodeY","weightedSource","centerSource","array","cb","call","sy","ty","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/chart/sankey/sankeyLayout.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar layout = require(\"../../util/layout\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar groupData = _model.groupData;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction _default(ecModel, api, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var layoutInfo = getViewRect(seriesModel, api);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    var orient = seriesModel.get('orient');\n    var nodeAlign = seriesModel.get('nodeAlign');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign);\n  });\n}\n/**\n * Get the layout position of the whole view\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign);\n  computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient);\n  computeEdgeDepths(nodes, orient);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var nodeRawValue = node.getValue() || 0;\n    var value = Math.max(value1, value2, nodeRawValue);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n *\n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param  {number} nodeWidth  the dx of the node\n * @param  {number} width  the whole width of the area to draw the view\n */\n\n\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = []; // Storage each node's indegree.\n\n  var indegreeArr = []; //Used to storage the node with indegree is equal to 0.\n\n  var zeroIndegrees = [];\n  var nextTargetNode = [];\n  var x = 0;\n  var kx = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n\n  for (i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n\n  var maxNodeDepth = -1; // Traversing nodes using topological sorting to calculate the\n  // horizontal(if orient === 'horizontal') or vertical(if orient === 'vertical')\n  // position of the nodes.\n\n  while (zeroIndegrees.length) {\n    for (var idx = 0; idx < zeroIndegrees.length; idx++) {\n      var node = zeroIndegrees[idx];\n      var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n      var isItemDepth = item.depth != null && item.depth >= 0;\n\n      if (isItemDepth && item.depth > maxNodeDepth) {\n        maxNodeDepth = item.depth;\n      }\n\n      node.setLayout({\n        depth: isItemDepth ? item.depth : x\n      }, true);\n      orient === 'vertical' ? node.setLayout({\n        dy: nodeWidth\n      }, true) : node.setLayout({\n        dx: nodeWidth\n      }, true);\n\n      for (var edgeIdx = 0; edgeIdx < node.outEdges.length; edgeIdx++) {\n        var edge = node.outEdges[edgeIdx];\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n\n        if (--indegreeArr[nodeIndex] === 0 && nextTargetNode.indexOf(targetNode) < 0) {\n          nextTargetNode.push(targetNode);\n        }\n      }\n    }\n\n    ++x;\n    zeroIndegrees = nextTargetNode;\n    nextTargetNode = [];\n  }\n\n  for (i = 0; i < remainEdges.length; i++) {\n    if (remainEdges[i] === 1) {\n      throw new Error('Sankey is a DAG, the original data has cycle!');\n    }\n  }\n\n  var maxDepth = maxNodeDepth > x - 1 ? maxNodeDepth : x - 1;\n\n  if (nodeAlign && nodeAlign !== 'left') {\n    adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth);\n  }\n\n  var kx = orient === 'vertical' ? (height - nodeWidth) / maxDepth : (width - nodeWidth) / maxDepth;\n  scaleNodeBreadths(nodes, kx, orient);\n}\n\nfunction isNodeDepth(node) {\n  var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n  return item.depth != null && item.depth >= 0;\n}\n\nfunction adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth) {\n  if (nodeAlign === 'right') {\n    var nextSourceNode = [];\n    var remainNodes = nodes;\n    var nodeHeight = 0;\n\n    while (remainNodes.length) {\n      for (var i = 0; i < remainNodes.length; i++) {\n        var node = remainNodes[i];\n        node.setLayout({\n          skNodeHeight: nodeHeight\n        }, true);\n\n        for (var j = 0; j < node.inEdges.length; j++) {\n          var edge = node.inEdges[j];\n\n          if (nextSourceNode.indexOf(edge.node1) < 0) {\n            nextSourceNode.push(edge.node1);\n          }\n        }\n      }\n\n      remainNodes = nextSourceNode;\n      nextSourceNode = [];\n      ++nodeHeight;\n    }\n\n    zrUtil.each(nodes, function (node) {\n      if (!isNodeDepth(node)) {\n        node.setLayout({\n          depth: Math.max(0, maxDepth - node.getLayout().skNodeHeight)\n        }, true);\n      }\n    });\n  } else if (nodeAlign === 'justify') {\n    moveSinksRight(nodes, maxDepth);\n  }\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param {module:echarts/data/Graph~Node} nodes.  node of sankey view.\n * @param {number} maxDepth.  use to assign to node without outEdges as x-position.\n */\n\n\nfunction moveSinksRight(nodes, maxDepth) {\n  zrUtil.each(nodes, function (node) {\n    if (!isNodeDepth(node) && !node.outEdges.length) {\n      node.setLayout({\n        depth: maxDepth\n      }, true);\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} kx   multiple used to scale nodes\n */\n\n\nfunction scaleNodeBreadths(nodes, kx, orient) {\n  zrUtil.each(nodes, function (node) {\n    var nodeDepth = node.getLayout().depth * kx;\n    orient === 'vertical' ? node.setLayout({\n      y: nodeDepth\n    }, true) : node.setLayout({\n      x: nodeDepth\n    }, true);\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param {number} iterations  the number of iterations for the algorithm\n */\n\n\nfunction computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient) {\n  var nodesByBreadth = prepareNodesByBreadth(nodes, orient);\n  initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient);\n  resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n    relaxLeftToRight(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  }\n}\n\nfunction prepareNodesByBreadth(nodes, orient) {\n  var nodesByBreadth = [];\n  var keyAttr = orient === 'vertical' ? 'y' : 'x';\n  var groupResult = groupData(nodes, function (node) {\n    return node.getLayout()[keyAttr];\n  });\n  groupResult.keys.sort(function (a, b) {\n    return a - b;\n  });\n  zrUtil.each(groupResult.keys, function (key) {\n    nodesByBreadth.push(groupResult.buckets.get(key));\n  });\n  return nodesByBreadth;\n}\n/**\n * Compute the original y-position for each node\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n */\n\n\nfunction initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient) {\n  var minKy = Infinity;\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n    var ky = orient === 'vertical' ? (width - (n - 1) * nodeGap) / sum : (height - (n - 1) * nodeGap) / sum;\n\n    if (ky < minKy) {\n      minKy = ky;\n    }\n  });\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      var nodeDy = node.getLayout().value * minKy;\n\n      if (orient === 'vertical') {\n        node.setLayout({\n          x: i\n        }, true);\n        node.setLayout({\n          dx: nodeDy\n        }, true);\n      } else {\n        node.setLayout({\n          y: i\n        }, true);\n        node.setLayout({\n          dy: nodeDy\n        }, true);\n      }\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * minKy;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {number} nodeGap  the vertical distance between two nodes\n * @param {number} height  the whole height of the area to draw the view\n */\n\n\nfunction resolveCollisions(nodesByBreadth, nodeGap, height, width, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    nodes.sort(function (a, b) {\n      return a.getLayout()[keyAttr] - b.getLayout()[keyAttr];\n    });\n    var nodeX;\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var nodeDyAttr = orient === 'vertical' ? 'dx' : 'dy';\n\n    for (var i = 0; i < n; i++) {\n      node = nodes[i];\n      dy = y0 - node.getLayout()[keyAttr];\n\n      if (dy > 0) {\n        nodeX = node.getLayout()[keyAttr] + dy;\n        orient === 'vertical' ? node.setLayout({\n          x: nodeX\n        }, true) : node.setLayout({\n          y: nodeX\n        }, true);\n      }\n\n      y0 = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap;\n    }\n\n    var viewWidth = orient === 'vertical' ? width : height; // If the bottommost node goes outside the bounds, push it back up\n\n    dy = y0 - nodeGap - viewWidth;\n\n    if (dy > 0) {\n      nodeX = node.getLayout()[keyAttr] - dy;\n      orient === 'vertical' ? node.setLayout({\n        x: nodeX\n      }, true) : node.setLayout({\n        y: nodeX\n      }, true);\n      y0 = nodeX;\n\n      for (i = n - 2; i >= 0; --i) {\n        node = nodes[i];\n        dy = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap - y0;\n\n        if (dy > 0) {\n          nodeX = node.getLayout()[keyAttr] - dy;\n          orient === 'vertical' ? node.setLayout({\n            x: nodeX\n          }, true) : node.setLayout({\n            y: nodeX\n          }, true);\n        }\n\n        y0 = node.getLayout()[keyAttr];\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxRightToLeft(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget, orient) / sum(node.outEdges, getEdgeValue, orient);\n\n        if (isNaN(y)) {\n          var len = node.outEdges.length;\n          y = len ? sum(node.outEdges, centerTarget, orient) / len : 0;\n        }\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n\nfunction weightedTarget(edge, orient) {\n  return center(edge.node2, orient) * edge.getValue();\n}\n\nfunction centerTarget(edge, orient) {\n  return center(edge.node2, orient);\n}\n\nfunction weightedSource(edge, orient) {\n  return center(edge.node1, orient) * edge.getValue();\n}\n\nfunction centerSource(edge, orient) {\n  return center(edge.node1, orient);\n}\n\nfunction center(node, orient) {\n  return orient === 'vertical' ? node.getLayout().x + node.getLayout().dx / 2 : node.getLayout().y + node.getLayout().dy / 2;\n}\n\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\n\nfunction sum(array, cb, orient) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n\n  while (++i < len) {\n    var value = +cb.call(array, array[i], orient);\n\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n\n  return sum;\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxLeftToRight(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource, orient) / sum(node.inEdges, getEdgeValue, orient);\n\n        if (isNaN(y)) {\n          var len = node.inEdges.length;\n          y = len ? sum(node.inEdges, centerSource, orient) / len : 0;\n        }\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n/**\n * Compute the depth(y-position) of each edge\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeEdgeDepths(nodes, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodes, function (node) {\n    node.outEdges.sort(function (a, b) {\n      return a.node2.getLayout()[keyAttr] - b.node2.getLayout()[keyAttr];\n    });\n    node.inEdges.sort(function (a, b) {\n      return a.node1.getLayout()[keyAttr] - b.node1.getLayout()[keyAttr];\n    });\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}