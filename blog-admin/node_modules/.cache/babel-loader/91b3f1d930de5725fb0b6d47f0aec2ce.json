{"ast":null,"code":"export default function superset(values, other) {\n  const iterator = values[Symbol.iterator](),\n        set = new Set();\n\n  for (const o of other) {\n    const io = intern(o);\n    if (set.has(io)) continue;\n    let value, done;\n\n    while (({\n      value,\n      done\n    } = iterator.next())) {\n      if (done) return false;\n      const ivalue = intern(value);\n      set.add(ivalue);\n      if (Object.is(io, ivalue)) break;\n    }\n  }\n\n  return true;\n}\n\nfunction intern(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}","map":null,"metadata":{},"sourceType":"module"}