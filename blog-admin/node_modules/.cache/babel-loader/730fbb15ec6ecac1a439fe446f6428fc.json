{"ast":null,"code":"var _event = require(\"../core/event\");\n\nvar addEventListener = _event.addEventListener;\nvar removeEventListener = _event.removeEventListener;\nvar normalizeEvent = _event.normalizeEvent;\nvar getNativeEvent = _event.getNativeEvent;\n\nvar zrUtil = require(\"../core/util\");\n\nvar Eventful = require(\"../mixin/Eventful\");\n\nvar env = require(\"../core/env\");\n/* global document */\n\n\nvar TOUCH_CLICK_DELAY = 300;\nvar globalEventSupported = env.domSupported;\n\nvar localNativeListenerNames = function () {\n  var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\n  var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];\n  var pointerEventNameMap = {\n    pointerdown: 1,\n    pointerup: 1,\n    pointermove: 1,\n    pointerout: 1\n  };\n  var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n    var nm = name.replace('mouse', 'pointer');\n    return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;\n  });\n  return {\n    mouse: mouseHandlerNames,\n    touch: touchHandlerNames,\n    pointer: pointerHandlerNames\n  };\n}();\n\nvar globalNativeListenerNames = {\n  mouse: ['mousemove', 'mouseup'],\n  pointer: ['pointermove', 'pointerup']\n};\n\nfunction eventNameFix(name) {\n  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;\n}\n\nfunction isPointerFromTouch(event) {\n  var pointerType = event.pointerType;\n  return pointerType === 'pen' || pointerType === 'touch';\n} // function useMSGuesture(handlerProxy, event) {\n//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n// }\n// function onMSGestureChange(proxy, event) {\n//     if (event.translationX || event.translationY) {\n//         // mousemove is carried by MSGesture to reduce the sensitivity.\n//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n//     }\n//     if (event.scale !== 1) {\n//         event.pinchX = event.offsetX;\n//         event.pinchY = event.offsetY;\n//         event.pinchScale = event.scale;\n//         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n//     }\n// }\n\n/**\n * Prevent mouse event from being dispatched after Touch Events action\n * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n * Result: Blocking Mouse Events for 700ms.\n *\n * @param {DOMHandlerScope} scope\n */\n\n\nfunction setTouchTimer(scope) {\n  scope.touching = true;\n\n  if (scope.touchTimer != null) {\n    clearTimeout(scope.touchTimer);\n    scope.touchTimer = null;\n  }\n\n  scope.touchTimer = setTimeout(function () {\n    scope.touching = false;\n    scope.touchTimer = null;\n  }, 700);\n} // Mark touch, which is useful in distinguish touch and\n// mouse event in upper applicatoin.\n\n\nfunction markTouch(event) {\n  event && (event.zrByTouch = true);\n} // function markTriggeredFromLocal(event) {\n//     event && (event.__zrIsFromLocal = true);\n// }\n// function isTriggeredFromLocal(instance, event) {\n//     return !!(event && event.__zrIsFromLocal);\n// }\n\n\nfunction normalizeGlobalEvent(instance, event) {\n  // offsetX, offsetY still need to be calculated. They are necessary in the event\n  // handlers of the upper applications. Set `true` to force calculate them.\n  return normalizeEvent(instance.dom, new FakeGlobalEvent(instance, event), true);\n}\n/**\n * Detect whether the given el is in `painterRoot`.\n */\n\n\nfunction isLocalEl(instance, el) {\n  var elTmp = el;\n  var isLocal = false;\n\n  while (elTmp && elTmp.nodeType !== 9 && !(isLocal = elTmp.domBelongToZr || elTmp !== el && elTmp === instance.painterRoot)) {\n    elTmp = elTmp.parentNode;\n  }\n\n  return isLocal;\n}\n/**\n * Make a fake event but not change the original event,\n * becuase the global event probably be used by other\n * listeners not belonging to zrender.\n * @class\n */\n\n\nfunction FakeGlobalEvent(instance, event) {\n  this.type = event.type;\n  this.target = this.currentTarget = instance.dom;\n  this.pointerType = event.pointerType; // Necessray for the force calculation of zrX, zrY\n\n  this.clientX = event.clientX;\n  this.clientY = event.clientY; // Because we do not mount global listeners to touch events,\n  // we do not copy `targetTouches` and `changedTouches` here.\n}\n\nvar fakeGlobalEventProto = FakeGlobalEvent.prototype; // we make the default methods on the event do nothing,\n// otherwise it is dangerous. See more details in\n// [Drag outside] in `Handler.js`.\n\nfakeGlobalEventProto.stopPropagation = fakeGlobalEventProto.stopImmediatePropagation = fakeGlobalEventProto.preventDefault = zrUtil.noop;\n/**\n * Local DOM Handlers\n * @this {HandlerProxy}\n */\n\nvar localDOMHandlers = {\n  mousedown: function (event) {\n    event = normalizeEvent(this.dom, event);\n    this._mayPointerCapture = [event.zrX, event.zrY];\n    this.trigger('mousedown', event);\n  },\n  mousemove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    var downPoint = this._mayPointerCapture;\n\n    if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) {\n      togglePointerCapture(this, true);\n    }\n\n    this.trigger('mousemove', event);\n  },\n  mouseup: function (event) {\n    event = normalizeEvent(this.dom, event);\n    togglePointerCapture(this, false);\n    this.trigger('mouseup', event);\n  },\n  mouseout: function (event) {\n    event = normalizeEvent(this.dom, event); // Similarly to the browser did on `document` and touch event,\n    // `globalout` will be delayed to final pointer cature release.\n\n    if (this._pointerCapturing) {\n      event.zrEventControl = 'no_globalout';\n    } // There might be some doms created by upper layer application\n    // at the same level of painter.getViewportRoot() (e.g., tooltip\n    // dom created by echarts), where 'globalout' event should not\n    // be triggered when mouse enters these doms. (But 'mouseout'\n    // should be triggered at the original hovered element as usual).\n\n\n    var element = event.toElement || event.relatedTarget;\n    event.zrIsToLocalDOM = isLocalEl(this, element);\n    this.trigger('mouseout', event);\n  },\n  touchstart: function (event) {\n    // Default mouse behaviour should not be disabled here.\n    // For example, page may needs to be slided.\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this._lastTouchMoment = new Date();\n    this.handler.processGesture(event, 'start'); // For consistent event listener for both touch device and mouse device,\n    // we simulate \"mouseover-->mousedown\" in touch device. So we trigger\n    // `mousemove` here (to trigger `mouseover` inside), and then trigger\n    // `mousedown`.\n\n    localDOMHandlers.mousemove.call(this, event);\n    localDOMHandlers.mousedown.call(this, event);\n  },\n  touchmove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'change'); // Mouse move should always be triggered no matter whether\n    // there is gestrue event, because mouse move and pinch may\n    // be used at the same time.\n\n    localDOMHandlers.mousemove.call(this, event);\n  },\n  touchend: function (event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'end');\n    localDOMHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n    // we can conveniently implement \"hover style\" in both PC and touch device just\n    // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n    // to remove \"hover style\" on an element, without any additional code for\n    // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n    // style\" will remain for user view)\n    // click event should always be triggered no matter whether\n    // there is gestrue event. System click can not be prevented.\n\n    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n      localDOMHandlers.click.call(this, event);\n    }\n  },\n  pointerdown: function (event) {\n    localDOMHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {\n    //     this._msGesture.addPointer(event.pointerId);\n    // }\n  },\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    localDOMHandlers.mouseup.call(this, event);\n  },\n  pointerout: function (event) {\n    // pointerout will be triggered when tap on touch screen\n    // (IE11+/Edge on MS Surface) after click event triggered,\n    // which is inconsistent with the mousout behavior we defined\n    // in touchend. So we unify them.\n    // (check localDOMHandlers.touchend for detailed explanation)\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mouseout.call(this, event);\n    }\n  }\n};\n/**\n * Othere DOM UI Event handlers for zr dom.\n * @this {HandlerProxy}\n */\n\nzrUtil.each(['click', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  localDOMHandlers[name] = function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger(name, event);\n  };\n});\n/**\n * DOM UI Event handlers for global page.\n *\n * [Caution]:\n * those handlers should both support in capture phase and bubble phase!\n *\n * @this {HandlerProxy}\n */\n\nvar globalDOMHandlers = {\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      globalDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    globalDOMHandlers.mouseup.call(this, event);\n  },\n  mousemove: function (event) {\n    this.trigger('mousemove', event);\n  },\n  mouseup: function (event) {\n    var pointerCaptureReleasing = this._pointerCapturing;\n    togglePointerCapture(this, false);\n    this.trigger('mouseup', event);\n\n    if (pointerCaptureReleasing) {\n      event.zrEventControl = 'only_globalout';\n      this.trigger('mouseout', event);\n    }\n  }\n};\n/**\n * @param {HandlerProxy} instance\n * @param {DOMHandlerScope} scope\n */\n\nfunction mountLocalDOMEventListeners(instance, scope) {\n  var domHandlers = scope.domHandlers;\n\n  if (env.pointerEventsSupported) {\n    // Only IE11+/Edge\n    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n    // at the same time.\n    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n    // screen, which do not occurs in pointer event.\n    // So we use pointer event to both detect touch gesture and mouse behavior.\n    zrUtil.each(localNativeListenerNames.pointer, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        // markTriggeredFromLocal(event);\n        domHandlers[nativeEventName].call(instance, event);\n      });\n    }); // FIXME\n    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n    // which does not prevent defuault behavior occasionally (which may cause view port\n    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n    // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n    // touch screen. And we only support click behavior on MS touch screen now.\n    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n    // We dont support touch on IE on win7.\n    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n    // if (typeof MSGesture === 'function') {\n    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n    //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n    // }\n  } else {\n    if (env.touchEventsSupported) {\n      zrUtil.each(localNativeListenerNames.touch, function (nativeEventName) {\n        mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n          // markTriggeredFromLocal(event);\n          domHandlers[nativeEventName].call(instance, event);\n          setTouchTimer(scope);\n        });\n      }); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n      // addEventListener(root, 'mouseout', this._mouseoutHandler);\n    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n    // mouse event can not be handle in those devices.\n    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n    // mouseevent after touch event triggered, see `setTouchTimer`.\n\n\n    zrUtil.each(localNativeListenerNames.mouse, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        event = getNativeEvent(event);\n\n        if (!scope.touching) {\n          // markTriggeredFromLocal(event);\n          domHandlers[nativeEventName].call(instance, event);\n        }\n      });\n    });\n  }\n}\n/**\n * @param {HandlerProxy} instance\n * @param {DOMHandlerScope} scope\n */\n\n\nfunction mountGlobalDOMEventListeners(instance, scope) {\n  // Only IE11+/Edge. See the comment in `mountLocalDOMEventListeners`.\n  if (env.pointerEventsSupported) {\n    zrUtil.each(globalNativeListenerNames.pointer, mount);\n  } // Touch event has implemented \"drag outside\" so we do not mount global listener for touch event.\n  // (see https://www.w3.org/TR/touch-events/#the-touchmove-event)\n  // We do not consider \"both-support-touch-and-mouse device\" for this feature (see the comment of\n  // `mountLocalDOMEventListeners`) to avoid bugs util some requirements come.\n  else if (!env.touchEventsSupported) {\n    zrUtil.each(globalNativeListenerNames.mouse, mount);\n  }\n\n  function mount(nativeEventName) {\n    function nativeEventListener(event) {\n      event = getNativeEvent(event); // See the reason in [Drag outside] in `Handler.js`\n      // This checking supports both `useCapture` or not.\n      // PENDING: if there is performance issue in some devices,\n      // we probably can not use `useCapture` and change a easier\n      // to judes whether local (mark).\n\n      if (!isLocalEl(instance, event.target)) {\n        event = normalizeGlobalEvent(instance, event);\n        scope.domHandlers[nativeEventName].call(instance, event);\n      }\n    }\n\n    mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, {\n      capture: true\n    } // See [Drag Outside] in `Handler.js`\n    );\n  }\n}\n\nfunction mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {\n  scope.mounted[nativeEventName] = listener;\n  scope.listenerOpts[nativeEventName] = opt;\n  addEventListener(scope.domTarget, eventNameFix(nativeEventName), listener, opt);\n}\n\nfunction unmountDOMEventListeners(scope) {\n  var mounted = scope.mounted;\n\n  for (var nativeEventName in mounted) {\n    if (mounted.hasOwnProperty(nativeEventName)) {\n      removeEventListener(scope.domTarget, eventNameFix(nativeEventName), mounted[nativeEventName], scope.listenerOpts[nativeEventName]);\n    }\n  }\n\n  scope.mounted = {};\n}\n/**\n * See [Drag Outside] in `Handler.js`.\n * @implement\n * @param {boolean} isPointerCapturing Should never be `null`/`undefined`.\n *        `true`: start to capture pointer if it is not capturing.\n *        `false`: end the capture if it is capturing.\n */\n\n\nfunction togglePointerCapture(instance, isPointerCapturing) {\n  instance._mayPointerCapture = null;\n\n  if (globalEventSupported && instance._pointerCapturing ^ isPointerCapturing) {\n    instance._pointerCapturing = isPointerCapturing;\n    var globalHandlerScope = instance._globalHandlerScope;\n    isPointerCapturing ? mountGlobalDOMEventListeners(instance, globalHandlerScope) : unmountDOMEventListeners(globalHandlerScope);\n  }\n}\n/**\n * @inner\n * @class\n */\n\n\nfunction DOMHandlerScope(domTarget, domHandlers) {\n  this.domTarget = domTarget;\n  this.domHandlers = domHandlers; // Key: eventName, value: mounted handler funcitons.\n  // Used for unmount.\n\n  this.mounted = {};\n  this.listenerOpts = {};\n  this.touchTimer = null;\n  this.touching = false;\n}\n/**\n * @public\n * @class\n */\n\n\nfunction HandlerDomProxy(dom, painterRoot) {\n  Eventful.call(this);\n  this.dom = dom;\n  this.painterRoot = painterRoot;\n  this._localHandlerScope = new DOMHandlerScope(dom, localDOMHandlers);\n\n  if (globalEventSupported) {\n    this._globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);\n  }\n  /**\n   * @type {boolean}\n   */\n\n\n  this._pointerCapturing = false;\n  /**\n   * @type {Array.<number>} [x, y] or null.\n   */\n\n  this._mayPointerCapture = null;\n  mountLocalDOMEventListeners(this, this._localHandlerScope);\n}\n\nvar handlerDomProxyProto = HandlerDomProxy.prototype;\n\nhandlerDomProxyProto.dispose = function () {\n  unmountDOMEventListeners(this._localHandlerScope);\n\n  if (globalEventSupported) {\n    unmountDOMEventListeners(this._globalHandlerScope);\n  }\n};\n\nhandlerDomProxyProto.setCursor = function (cursorStyle) {\n  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n};\n\nzrUtil.mixin(HandlerDomProxy, Eventful);\nvar _default = HandlerDomProxy;\nmodule.exports = _default;","map":{"version":3,"names":["_event","require","addEventListener","removeEventListener","normalizeEvent","getNativeEvent","zrUtil","Eventful","env","TOUCH_CLICK_DELAY","globalEventSupported","domSupported","localNativeListenerNames","mouseHandlerNames","touchHandlerNames","pointerEventNameMap","pointerdown","pointerup","pointermove","pointerout","pointerHandlerNames","map","name","nm","replace","hasOwnProperty","mouse","touch","pointer","globalNativeListenerNames","eventNameFix","browser","firefox","isPointerFromTouch","event","pointerType","setTouchTimer","scope","touching","touchTimer","clearTimeout","setTimeout","markTouch","zrByTouch","normalizeGlobalEvent","instance","dom","FakeGlobalEvent","isLocalEl","el","elTmp","isLocal","nodeType","domBelongToZr","painterRoot","parentNode","type","target","currentTarget","clientX","clientY","fakeGlobalEventProto","prototype","stopPropagation","stopImmediatePropagation","preventDefault","noop","localDOMHandlers","mousedown","_mayPointerCapture","zrX","zrY","trigger","mousemove","downPoint","togglePointerCapture","mouseup","mouseout","_pointerCapturing","zrEventControl","element","toElement","relatedTarget","zrIsToLocalDOM","touchstart","_lastTouchMoment","Date","handler","processGesture","call","touchmove","touchend","click","each","globalDOMHandlers","pointerCaptureReleasing","mountLocalDOMEventListeners","domHandlers","pointerEventsSupported","nativeEventName","mountSingleDOMEventListener","touchEventsSupported","mountGlobalDOMEventListeners","mount","nativeEventListener","capture","listener","opt","mounted","listenerOpts","domTarget","unmountDOMEventListeners","isPointerCapturing","globalHandlerScope","_globalHandlerScope","DOMHandlerScope","HandlerDomProxy","_localHandlerScope","document","handlerDomProxyProto","dispose","setCursor","cursorStyle","style","cursor","mixin","_default","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/zrender/lib/dom/HandlerProxy.js"],"sourcesContent":["var _event = require(\"../core/event\");\n\nvar addEventListener = _event.addEventListener;\nvar removeEventListener = _event.removeEventListener;\nvar normalizeEvent = _event.normalizeEvent;\nvar getNativeEvent = _event.getNativeEvent;\n\nvar zrUtil = require(\"../core/util\");\n\nvar Eventful = require(\"../mixin/Eventful\");\n\nvar env = require(\"../core/env\");\n\n/* global document */\nvar TOUCH_CLICK_DELAY = 300;\nvar globalEventSupported = env.domSupported;\n\nvar localNativeListenerNames = function () {\n  var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\n  var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];\n  var pointerEventNameMap = {\n    pointerdown: 1,\n    pointerup: 1,\n    pointermove: 1,\n    pointerout: 1\n  };\n  var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n    var nm = name.replace('mouse', 'pointer');\n    return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;\n  });\n  return {\n    mouse: mouseHandlerNames,\n    touch: touchHandlerNames,\n    pointer: pointerHandlerNames\n  };\n}();\n\nvar globalNativeListenerNames = {\n  mouse: ['mousemove', 'mouseup'],\n  pointer: ['pointermove', 'pointerup']\n};\n\nfunction eventNameFix(name) {\n  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;\n}\n\nfunction isPointerFromTouch(event) {\n  var pointerType = event.pointerType;\n  return pointerType === 'pen' || pointerType === 'touch';\n} // function useMSGuesture(handlerProxy, event) {\n//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n// }\n// function onMSGestureChange(proxy, event) {\n//     if (event.translationX || event.translationY) {\n//         // mousemove is carried by MSGesture to reduce the sensitivity.\n//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n//     }\n//     if (event.scale !== 1) {\n//         event.pinchX = event.offsetX;\n//         event.pinchY = event.offsetY;\n//         event.pinchScale = event.scale;\n//         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n//     }\n// }\n\n/**\n * Prevent mouse event from being dispatched after Touch Events action\n * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n * Result: Blocking Mouse Events for 700ms.\n *\n * @param {DOMHandlerScope} scope\n */\n\n\nfunction setTouchTimer(scope) {\n  scope.touching = true;\n\n  if (scope.touchTimer != null) {\n    clearTimeout(scope.touchTimer);\n    scope.touchTimer = null;\n  }\n\n  scope.touchTimer = setTimeout(function () {\n    scope.touching = false;\n    scope.touchTimer = null;\n  }, 700);\n} // Mark touch, which is useful in distinguish touch and\n// mouse event in upper applicatoin.\n\n\nfunction markTouch(event) {\n  event && (event.zrByTouch = true);\n} // function markTriggeredFromLocal(event) {\n//     event && (event.__zrIsFromLocal = true);\n// }\n// function isTriggeredFromLocal(instance, event) {\n//     return !!(event && event.__zrIsFromLocal);\n// }\n\n\nfunction normalizeGlobalEvent(instance, event) {\n  // offsetX, offsetY still need to be calculated. They are necessary in the event\n  // handlers of the upper applications. Set `true` to force calculate them.\n  return normalizeEvent(instance.dom, new FakeGlobalEvent(instance, event), true);\n}\n/**\n * Detect whether the given el is in `painterRoot`.\n */\n\n\nfunction isLocalEl(instance, el) {\n  var elTmp = el;\n  var isLocal = false;\n\n  while (elTmp && elTmp.nodeType !== 9 && !(isLocal = elTmp.domBelongToZr || elTmp !== el && elTmp === instance.painterRoot)) {\n    elTmp = elTmp.parentNode;\n  }\n\n  return isLocal;\n}\n/**\n * Make a fake event but not change the original event,\n * becuase the global event probably be used by other\n * listeners not belonging to zrender.\n * @class\n */\n\n\nfunction FakeGlobalEvent(instance, event) {\n  this.type = event.type;\n  this.target = this.currentTarget = instance.dom;\n  this.pointerType = event.pointerType; // Necessray for the force calculation of zrX, zrY\n\n  this.clientX = event.clientX;\n  this.clientY = event.clientY; // Because we do not mount global listeners to touch events,\n  // we do not copy `targetTouches` and `changedTouches` here.\n}\n\nvar fakeGlobalEventProto = FakeGlobalEvent.prototype; // we make the default methods on the event do nothing,\n// otherwise it is dangerous. See more details in\n// [Drag outside] in `Handler.js`.\n\nfakeGlobalEventProto.stopPropagation = fakeGlobalEventProto.stopImmediatePropagation = fakeGlobalEventProto.preventDefault = zrUtil.noop;\n/**\n * Local DOM Handlers\n * @this {HandlerProxy}\n */\n\nvar localDOMHandlers = {\n  mousedown: function (event) {\n    event = normalizeEvent(this.dom, event);\n    this._mayPointerCapture = [event.zrX, event.zrY];\n    this.trigger('mousedown', event);\n  },\n  mousemove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    var downPoint = this._mayPointerCapture;\n\n    if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) {\n      togglePointerCapture(this, true);\n    }\n\n    this.trigger('mousemove', event);\n  },\n  mouseup: function (event) {\n    event = normalizeEvent(this.dom, event);\n    togglePointerCapture(this, false);\n    this.trigger('mouseup', event);\n  },\n  mouseout: function (event) {\n    event = normalizeEvent(this.dom, event); // Similarly to the browser did on `document` and touch event,\n    // `globalout` will be delayed to final pointer cature release.\n\n    if (this._pointerCapturing) {\n      event.zrEventControl = 'no_globalout';\n    } // There might be some doms created by upper layer application\n    // at the same level of painter.getViewportRoot() (e.g., tooltip\n    // dom created by echarts), where 'globalout' event should not\n    // be triggered when mouse enters these doms. (But 'mouseout'\n    // should be triggered at the original hovered element as usual).\n\n\n    var element = event.toElement || event.relatedTarget;\n    event.zrIsToLocalDOM = isLocalEl(this, element);\n    this.trigger('mouseout', event);\n  },\n  touchstart: function (event) {\n    // Default mouse behaviour should not be disabled here.\n    // For example, page may needs to be slided.\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this._lastTouchMoment = new Date();\n    this.handler.processGesture(event, 'start'); // For consistent event listener for both touch device and mouse device,\n    // we simulate \"mouseover-->mousedown\" in touch device. So we trigger\n    // `mousemove` here (to trigger `mouseover` inside), and then trigger\n    // `mousedown`.\n\n    localDOMHandlers.mousemove.call(this, event);\n    localDOMHandlers.mousedown.call(this, event);\n  },\n  touchmove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'change'); // Mouse move should always be triggered no matter whether\n    // there is gestrue event, because mouse move and pinch may\n    // be used at the same time.\n\n    localDOMHandlers.mousemove.call(this, event);\n  },\n  touchend: function (event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'end');\n    localDOMHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n    // we can conveniently implement \"hover style\" in both PC and touch device just\n    // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n    // to remove \"hover style\" on an element, without any additional code for\n    // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n    // style\" will remain for user view)\n    // click event should always be triggered no matter whether\n    // there is gestrue event. System click can not be prevented.\n\n    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n      localDOMHandlers.click.call(this, event);\n    }\n  },\n  pointerdown: function (event) {\n    localDOMHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {\n    //     this._msGesture.addPointer(event.pointerId);\n    // }\n  },\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    localDOMHandlers.mouseup.call(this, event);\n  },\n  pointerout: function (event) {\n    // pointerout will be triggered when tap on touch screen\n    // (IE11+/Edge on MS Surface) after click event triggered,\n    // which is inconsistent with the mousout behavior we defined\n    // in touchend. So we unify them.\n    // (check localDOMHandlers.touchend for detailed explanation)\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mouseout.call(this, event);\n    }\n  }\n};\n/**\n * Othere DOM UI Event handlers for zr dom.\n * @this {HandlerProxy}\n */\n\nzrUtil.each(['click', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  localDOMHandlers[name] = function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger(name, event);\n  };\n});\n/**\n * DOM UI Event handlers for global page.\n *\n * [Caution]:\n * those handlers should both support in capture phase and bubble phase!\n *\n * @this {HandlerProxy}\n */\n\nvar globalDOMHandlers = {\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      globalDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    globalDOMHandlers.mouseup.call(this, event);\n  },\n  mousemove: function (event) {\n    this.trigger('mousemove', event);\n  },\n  mouseup: function (event) {\n    var pointerCaptureReleasing = this._pointerCapturing;\n    togglePointerCapture(this, false);\n    this.trigger('mouseup', event);\n\n    if (pointerCaptureReleasing) {\n      event.zrEventControl = 'only_globalout';\n      this.trigger('mouseout', event);\n    }\n  }\n};\n/**\n * @param {HandlerProxy} instance\n * @param {DOMHandlerScope} scope\n */\n\nfunction mountLocalDOMEventListeners(instance, scope) {\n  var domHandlers = scope.domHandlers;\n\n  if (env.pointerEventsSupported) {\n    // Only IE11+/Edge\n    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n    // at the same time.\n    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n    // screen, which do not occurs in pointer event.\n    // So we use pointer event to both detect touch gesture and mouse behavior.\n    zrUtil.each(localNativeListenerNames.pointer, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        // markTriggeredFromLocal(event);\n        domHandlers[nativeEventName].call(instance, event);\n      });\n    }); // FIXME\n    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n    // which does not prevent defuault behavior occasionally (which may cause view port\n    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n    // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n    // touch screen. And we only support click behavior on MS touch screen now.\n    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n    // We dont support touch on IE on win7.\n    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n    // if (typeof MSGesture === 'function') {\n    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n    //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n    // }\n  } else {\n    if (env.touchEventsSupported) {\n      zrUtil.each(localNativeListenerNames.touch, function (nativeEventName) {\n        mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n          // markTriggeredFromLocal(event);\n          domHandlers[nativeEventName].call(instance, event);\n          setTouchTimer(scope);\n        });\n      }); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n      // addEventListener(root, 'mouseout', this._mouseoutHandler);\n    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n    // mouse event can not be handle in those devices.\n    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n    // mouseevent after touch event triggered, see `setTouchTimer`.\n\n\n    zrUtil.each(localNativeListenerNames.mouse, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        event = getNativeEvent(event);\n\n        if (!scope.touching) {\n          // markTriggeredFromLocal(event);\n          domHandlers[nativeEventName].call(instance, event);\n        }\n      });\n    });\n  }\n}\n/**\n * @param {HandlerProxy} instance\n * @param {DOMHandlerScope} scope\n */\n\n\nfunction mountGlobalDOMEventListeners(instance, scope) {\n  // Only IE11+/Edge. See the comment in `mountLocalDOMEventListeners`.\n  if (env.pointerEventsSupported) {\n    zrUtil.each(globalNativeListenerNames.pointer, mount);\n  } // Touch event has implemented \"drag outside\" so we do not mount global listener for touch event.\n  // (see https://www.w3.org/TR/touch-events/#the-touchmove-event)\n  // We do not consider \"both-support-touch-and-mouse device\" for this feature (see the comment of\n  // `mountLocalDOMEventListeners`) to avoid bugs util some requirements come.\n  else if (!env.touchEventsSupported) {\n      zrUtil.each(globalNativeListenerNames.mouse, mount);\n    }\n\n  function mount(nativeEventName) {\n    function nativeEventListener(event) {\n      event = getNativeEvent(event); // See the reason in [Drag outside] in `Handler.js`\n      // This checking supports both `useCapture` or not.\n      // PENDING: if there is performance issue in some devices,\n      // we probably can not use `useCapture` and change a easier\n      // to judes whether local (mark).\n\n      if (!isLocalEl(instance, event.target)) {\n        event = normalizeGlobalEvent(instance, event);\n        scope.domHandlers[nativeEventName].call(instance, event);\n      }\n    }\n\n    mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, {\n      capture: true\n    } // See [Drag Outside] in `Handler.js`\n    );\n  }\n}\n\nfunction mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {\n  scope.mounted[nativeEventName] = listener;\n  scope.listenerOpts[nativeEventName] = opt;\n  addEventListener(scope.domTarget, eventNameFix(nativeEventName), listener, opt);\n}\n\nfunction unmountDOMEventListeners(scope) {\n  var mounted = scope.mounted;\n\n  for (var nativeEventName in mounted) {\n    if (mounted.hasOwnProperty(nativeEventName)) {\n      removeEventListener(scope.domTarget, eventNameFix(nativeEventName), mounted[nativeEventName], scope.listenerOpts[nativeEventName]);\n    }\n  }\n\n  scope.mounted = {};\n}\n/**\n * See [Drag Outside] in `Handler.js`.\n * @implement\n * @param {boolean} isPointerCapturing Should never be `null`/`undefined`.\n *        `true`: start to capture pointer if it is not capturing.\n *        `false`: end the capture if it is capturing.\n */\n\n\nfunction togglePointerCapture(instance, isPointerCapturing) {\n  instance._mayPointerCapture = null;\n\n  if (globalEventSupported && instance._pointerCapturing ^ isPointerCapturing) {\n    instance._pointerCapturing = isPointerCapturing;\n    var globalHandlerScope = instance._globalHandlerScope;\n    isPointerCapturing ? mountGlobalDOMEventListeners(instance, globalHandlerScope) : unmountDOMEventListeners(globalHandlerScope);\n  }\n}\n/**\n * @inner\n * @class\n */\n\n\nfunction DOMHandlerScope(domTarget, domHandlers) {\n  this.domTarget = domTarget;\n  this.domHandlers = domHandlers; // Key: eventName, value: mounted handler funcitons.\n  // Used for unmount.\n\n  this.mounted = {};\n  this.listenerOpts = {};\n  this.touchTimer = null;\n  this.touching = false;\n}\n/**\n * @public\n * @class\n */\n\n\nfunction HandlerDomProxy(dom, painterRoot) {\n  Eventful.call(this);\n  this.dom = dom;\n  this.painterRoot = painterRoot;\n  this._localHandlerScope = new DOMHandlerScope(dom, localDOMHandlers);\n\n  if (globalEventSupported) {\n    this._globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);\n  }\n  /**\n   * @type {boolean}\n   */\n\n\n  this._pointerCapturing = false;\n  /**\n   * @type {Array.<number>} [x, y] or null.\n   */\n\n  this._mayPointerCapture = null;\n  mountLocalDOMEventListeners(this, this._localHandlerScope);\n}\n\nvar handlerDomProxyProto = HandlerDomProxy.prototype;\n\nhandlerDomProxyProto.dispose = function () {\n  unmountDOMEventListeners(this._localHandlerScope);\n\n  if (globalEventSupported) {\n    unmountDOMEventListeners(this._globalHandlerScope);\n  }\n};\n\nhandlerDomProxyProto.setCursor = function (cursorStyle) {\n  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n};\n\nzrUtil.mixin(HandlerDomProxy, Eventful);\nvar _default = HandlerDomProxy;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}