{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar VisualMapping = require(\"../../visual/VisualMapping\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nfunction _default(ecModel, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n\n    if (nodes.length) {\n      var minValue = Infinity;\n      var maxValue = -Infinity;\n      zrUtil.each(nodes, function (node) {\n        var nodeValue = node.getLayout().value;\n\n        if (nodeValue < minValue) {\n          minValue = nodeValue;\n        }\n\n        if (nodeValue > maxValue) {\n          maxValue = nodeValue;\n        }\n      });\n      zrUtil.each(nodes, function (node) {\n        var mapping = new VisualMapping({\n          type: 'color',\n          mappingMethod: 'linear',\n          dataExtent: [minValue, maxValue],\n          visual: seriesModel.get('color')\n        });\n        var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);\n        var customColor = node.getModel().get('itemStyle.color');\n        customColor != null ? node.setVisual('color', customColor) : node.setVisual('color', mapValueToColor);\n      });\n    }\n  });\n}\n\nmodule.exports = _default;","map":{"version":3,"names":["VisualMapping","require","zrUtil","_default","ecModel","payload","eachSeriesByType","seriesModel","graph","getGraph","nodes","length","minValue","Infinity","maxValue","each","node","nodeValue","getLayout","value","mapping","type","mappingMethod","dataExtent","visual","get","mapValueToColor","mapValueToVisual","customColor","getModel","setVisual","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/chart/sankey/sankeyVisual.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar VisualMapping = require(\"../../visual/VisualMapping\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction _default(ecModel, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n\n    if (nodes.length) {\n      var minValue = Infinity;\n      var maxValue = -Infinity;\n      zrUtil.each(nodes, function (node) {\n        var nodeValue = node.getLayout().value;\n\n        if (nodeValue < minValue) {\n          minValue = nodeValue;\n        }\n\n        if (nodeValue > maxValue) {\n          maxValue = nodeValue;\n        }\n      });\n      zrUtil.each(nodes, function (node) {\n        var mapping = new VisualMapping({\n          type: 'color',\n          mappingMethod: 'linear',\n          dataExtent: [minValue, maxValue],\n          visual: seriesModel.get('color')\n        });\n        var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);\n        var customColor = node.getModel().get('itemStyle.color');\n        customColor != null ? node.setVisual('color', customColor) : node.setVisual('color', mapValueToColor);\n      });\n    }\n  });\n}\n\nmodule.exports = _default;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,4BAAD,CAA3B;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,uBAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,QAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoC;EAClCD,OAAO,CAACE,gBAAR,CAAyB,QAAzB,EAAmC,UAAUC,WAAV,EAAuB;IACxD,IAAIC,KAAK,GAAGD,WAAW,CAACE,QAAZ,EAAZ;IACA,IAAIC,KAAK,GAAGF,KAAK,CAACE,KAAlB;;IAEA,IAAIA,KAAK,CAACC,MAAV,EAAkB;MAChB,IAAIC,QAAQ,GAAGC,QAAf;MACA,IAAIC,QAAQ,GAAG,CAACD,QAAhB;MACAX,MAAM,CAACa,IAAP,CAAYL,KAAZ,EAAmB,UAAUM,IAAV,EAAgB;QACjC,IAAIC,SAAS,GAAGD,IAAI,CAACE,SAAL,GAAiBC,KAAjC;;QAEA,IAAIF,SAAS,GAAGL,QAAhB,EAA0B;UACxBA,QAAQ,GAAGK,SAAX;QACD;;QAED,IAAIA,SAAS,GAAGH,QAAhB,EAA0B;UACxBA,QAAQ,GAAGG,SAAX;QACD;MACF,CAVD;MAWAf,MAAM,CAACa,IAAP,CAAYL,KAAZ,EAAmB,UAAUM,IAAV,EAAgB;QACjC,IAAII,OAAO,GAAG,IAAIpB,aAAJ,CAAkB;UAC9BqB,IAAI,EAAE,OADwB;UAE9BC,aAAa,EAAE,QAFe;UAG9BC,UAAU,EAAE,CAACX,QAAD,EAAWE,QAAX,CAHkB;UAI9BU,MAAM,EAAEjB,WAAW,CAACkB,GAAZ,CAAgB,OAAhB;QAJsB,CAAlB,CAAd;QAMA,IAAIC,eAAe,GAAGN,OAAO,CAACO,gBAAR,CAAyBX,IAAI,CAACE,SAAL,GAAiBC,KAA1C,CAAtB;QACA,IAAIS,WAAW,GAAGZ,IAAI,CAACa,QAAL,GAAgBJ,GAAhB,CAAoB,iBAApB,CAAlB;QACAG,WAAW,IAAI,IAAf,GAAsBZ,IAAI,CAACc,SAAL,CAAe,OAAf,EAAwBF,WAAxB,CAAtB,GAA6DZ,IAAI,CAACc,SAAL,CAAe,OAAf,EAAwBJ,eAAxB,CAA7D;MACD,CAVD;IAWD;EACF,CA9BD;AA+BD;;AAEDK,MAAM,CAACC,OAAP,GAAiB7B,QAAjB"},"metadata":{},"sourceType":"script"}