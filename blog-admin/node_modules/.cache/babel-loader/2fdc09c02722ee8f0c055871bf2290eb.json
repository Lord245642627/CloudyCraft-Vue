{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar graphic = require(\"../../util/graphic\");\n\nvar vec2 = require(\"zrender/lib/core/vector\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Line path for bezier and straight line draw\n */\n\n\nvar straightLineProto = graphic.Line.prototype;\nvar bezierCurveProto = graphic.BezierCurve.prototype;\n\nfunction isLine(shape) {\n  return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);\n}\n\nvar _default = graphic.extendShape({\n  type: 'ec-line',\n  style: {\n    stroke: '#000',\n    fill: null\n  },\n  shape: {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    percent: 1,\n    cpx1: null,\n    cpy1: null\n  },\n  buildPath: function (ctx, shape) {\n    this[isLine(shape) ? '_buildPathLine' : '_buildPathCurve'](ctx, shape);\n  },\n  _buildPathLine: straightLineProto.buildPath,\n  _buildPathCurve: bezierCurveProto.buildPath,\n  pointAt: function (t) {\n    return this[isLine(this.shape) ? '_pointAtLine' : '_pointAtCurve'](t);\n  },\n  _pointAtLine: straightLineProto.pointAt,\n  _pointAtCurve: bezierCurveProto.pointAt,\n  tangentAt: function (t) {\n    var shape = this.shape;\n    var p = isLine(shape) ? [shape.x2 - shape.x1, shape.y2 - shape.y1] : this._tangentAtCurve(t);\n    return vec2.normalize(p, p);\n  },\n  _tangentAtCurve: bezierCurveProto.tangentAt\n});\n\nmodule.exports = _default;","map":{"version":3,"names":["graphic","require","vec2","straightLineProto","Line","prototype","bezierCurveProto","BezierCurve","isLine","shape","isNaN","cpx1","cpy1","_default","extendShape","type","style","stroke","fill","x1","y1","x2","y2","percent","buildPath","ctx","_buildPathLine","_buildPathCurve","pointAt","t","_pointAtLine","_pointAtCurve","tangentAt","p","_tangentAtCurve","normalize","module","exports"],"sources":["/Users/lord/Documents/Programmer/vue/VueProjects/cloudycraft-vue/blog-admin/node_modules/echarts/lib/chart/helper/LinePath.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar graphic = require(\"../../util/graphic\");\n\nvar vec2 = require(\"zrender/lib/core/vector\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Line path for bezier and straight line draw\n */\nvar straightLineProto = graphic.Line.prototype;\nvar bezierCurveProto = graphic.BezierCurve.prototype;\n\nfunction isLine(shape) {\n  return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);\n}\n\nvar _default = graphic.extendShape({\n  type: 'ec-line',\n  style: {\n    stroke: '#000',\n    fill: null\n  },\n  shape: {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    percent: 1,\n    cpx1: null,\n    cpy1: null\n  },\n  buildPath: function (ctx, shape) {\n    this[isLine(shape) ? '_buildPathLine' : '_buildPathCurve'](ctx, shape);\n  },\n  _buildPathLine: straightLineProto.buildPath,\n  _buildPathCurve: bezierCurveProto.buildPath,\n  pointAt: function (t) {\n    return this[isLine(this.shape) ? '_pointAtLine' : '_pointAtCurve'](t);\n  },\n  _pointAtLine: straightLineProto.pointAt,\n  _pointAtCurve: bezierCurveProto.pointAt,\n  tangentAt: function (t) {\n    var shape = this.shape;\n    var p = isLine(shape) ? [shape.x2 - shape.x1, shape.y2 - shape.y1] : this._tangentAtCurve(t);\n    return vec2.normalize(p, p);\n  },\n  _tangentAtCurve: bezierCurveProto.tangentAt\n});\n\nmodule.exports = _default;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAIC,IAAI,GAAGD,OAAO,CAAC,yBAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,IAAIE,iBAAiB,GAAGH,OAAO,CAACI,IAAR,CAAaC,SAArC;AACA,IAAIC,gBAAgB,GAAGN,OAAO,CAACO,WAAR,CAAoBF,SAA3C;;AAEA,SAASG,MAAT,CAAgBC,KAAhB,EAAuB;EACrB,OAAOC,KAAK,CAAC,CAACD,KAAK,CAACE,IAAR,CAAL,IAAsBD,KAAK,CAAC,CAACD,KAAK,CAACG,IAAR,CAAlC;AACD;;AAED,IAAIC,QAAQ,GAAGb,OAAO,CAACc,WAAR,CAAoB;EACjCC,IAAI,EAAE,SAD2B;EAEjCC,KAAK,EAAE;IACLC,MAAM,EAAE,MADH;IAELC,IAAI,EAAE;EAFD,CAF0B;EAMjCT,KAAK,EAAE;IACLU,EAAE,EAAE,CADC;IAELC,EAAE,EAAE,CAFC;IAGLC,EAAE,EAAE,CAHC;IAILC,EAAE,EAAE,CAJC;IAKLC,OAAO,EAAE,CALJ;IAMLZ,IAAI,EAAE,IAND;IAOLC,IAAI,EAAE;EAPD,CAN0B;EAejCY,SAAS,EAAE,UAAUC,GAAV,EAAehB,KAAf,EAAsB;IAC/B,KAAKD,MAAM,CAACC,KAAD,CAAN,GAAgB,gBAAhB,GAAmC,iBAAxC,EAA2DgB,GAA3D,EAAgEhB,KAAhE;EACD,CAjBgC;EAkBjCiB,cAAc,EAAEvB,iBAAiB,CAACqB,SAlBD;EAmBjCG,eAAe,EAAErB,gBAAgB,CAACkB,SAnBD;EAoBjCI,OAAO,EAAE,UAAUC,CAAV,EAAa;IACpB,OAAO,KAAKrB,MAAM,CAAC,KAAKC,KAAN,CAAN,GAAqB,cAArB,GAAsC,eAA3C,EAA4DoB,CAA5D,CAAP;EACD,CAtBgC;EAuBjCC,YAAY,EAAE3B,iBAAiB,CAACyB,OAvBC;EAwBjCG,aAAa,EAAEzB,gBAAgB,CAACsB,OAxBC;EAyBjCI,SAAS,EAAE,UAAUH,CAAV,EAAa;IACtB,IAAIpB,KAAK,GAAG,KAAKA,KAAjB;IACA,IAAIwB,CAAC,GAAGzB,MAAM,CAACC,KAAD,CAAN,GAAgB,CAACA,KAAK,CAACY,EAAN,GAAWZ,KAAK,CAACU,EAAlB,EAAsBV,KAAK,CAACa,EAAN,GAAWb,KAAK,CAACW,EAAvC,CAAhB,GAA6D,KAAKc,eAAL,CAAqBL,CAArB,CAArE;IACA,OAAO3B,IAAI,CAACiC,SAAL,CAAeF,CAAf,EAAkBA,CAAlB,CAAP;EACD,CA7BgC;EA8BjCC,eAAe,EAAE5B,gBAAgB,CAAC0B;AA9BD,CAApB,CAAf;;AAiCAI,MAAM,CAACC,OAAP,GAAiBxB,QAAjB"},"metadata":{},"sourceType":"script"}