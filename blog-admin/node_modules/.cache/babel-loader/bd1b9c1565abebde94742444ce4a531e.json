{"ast":null,"code":"import CrontabSecond from './second.vue';\nimport CrontabMin from './min.vue';\nimport CrontabHour from './hour.vue';\nimport CrontabDay from './day.vue';\nimport CrontabMonth from './month.vue';\nimport CrontabWeek from './week.vue';\nimport CrontabYear from './year.vue';\nimport CrontabResult from './result.vue';\nexport default {\n  data() {\n    return {\n      tabTitles: ['秒', '分钟', '小时', '日', '月', '周', '年'],\n      tabActive: 0,\n      myindex: 0,\n      crontabValueObj: {\n        second: '*',\n        min: '*',\n        hour: '*',\n        day: '*',\n        month: '*',\n        week: '?',\n        year: ''\n      }\n    };\n  },\n\n  name: 'crontab',\n  props: ['expression', 'hideComponent'],\n  components: {\n    CrontabSecond,\n    CrontabMin,\n    CrontabHour,\n    CrontabDay,\n    CrontabMonth,\n    CrontabWeek,\n    CrontabYear,\n    CrontabResult\n  },\n  methods: {\n    resolveExp() {\n      if (this.expression) {\n        let arr = this.expression.split(' ');\n\n        if (arr.length >= 6) {\n          let obj = {\n            second: arr[0],\n            min: arr[1],\n            hour: arr[2],\n            day: arr[3],\n            month: arr[4],\n            week: arr[5],\n            year: arr[6] ? arr[6] : ''\n          };\n          this.crontabValueObj = { ...obj\n          };\n\n          for (let i in obj) {\n            if (obj[i]) this.changeRadio(i, obj[i]);\n          }\n        }\n      } else {\n        this.clearCron();\n      }\n    },\n\n    tabCheck(index) {\n      this.tabActive = index;\n    },\n\n    updateCrontabValue(name, value, from) {\n      'updateCrontabValue', name, value, from;\n      this.crontabValueObj[name] = value;\n\n      if (from && from !== name) {\n        this.changeRadio(name, value);\n      }\n    },\n\n    changeRadio(name, value) {\n      let arr = ['second', 'min', 'hour', 'month'],\n          refName = 'cron' + name,\n          insValue;\n      if (!this.$refs[refName]) return;\n\n      if (arr.includes(name)) {\n        if (value === '*') {\n          insValue = 1;\n        } else if (value.indexOf('-') > -1) {\n          let indexArr = value.split('-');\n          isNaN(indexArr[0]) ? this.$refs[refName].cycle01 = 0 : this.$refs[refName].cycle01 = indexArr[0];\n          this.$refs[refName].cycle02 = indexArr[1];\n          insValue = 2;\n        } else if (value.indexOf('/') > -1) {\n          let indexArr = value.split('/');\n          isNaN(indexArr[0]) ? this.$refs[refName].average01 = 0 : this.$refs[refName].average01 = indexArr[0];\n          this.$refs[refName].average02 = indexArr[1];\n          insValue = 3;\n        } else {\n          insValue = 4;\n          this.$refs[refName].checkboxList = value.split(',');\n        }\n      } else if (name == 'day') {\n        if (value === '*') {\n          insValue = 1;\n        } else if (value == '?') {\n          insValue = 2;\n        } else if (value.indexOf('-') > -1) {\n          let indexArr = value.split('-');\n          isNaN(indexArr[0]) ? this.$refs[refName].cycle01 = 0 : this.$refs[refName].cycle01 = indexArr[0];\n          this.$refs[refName].cycle02 = indexArr[1];\n          insValue = 3;\n        } else if (value.indexOf('/') > -1) {\n          let indexArr = value.split('/');\n          isNaN(indexArr[0]) ? this.$refs[refName].average01 = 0 : this.$refs[refName].average01 = indexArr[0];\n          this.$refs[refName].average02 = indexArr[1];\n          insValue = 4;\n        } else if (value.indexOf('W') > -1) {\n          let indexArr = value.split('W');\n          isNaN(indexArr[0]) ? this.$refs[refName].workday = 0 : this.$refs[refName].workday = indexArr[0];\n          insValue = 5;\n        } else if (value === 'L') {\n          insValue = 6;\n        } else {\n          this.$refs[refName].checkboxList = value.split(',');\n          insValue = 7;\n        }\n      } else if (name == 'week') {\n        if (value === '*') {\n          insValue = 1;\n        } else if (value == '?') {\n          insValue = 2;\n        } else if (value.indexOf('-') > -1) {\n          let indexArr = value.split('-');\n          isNaN(indexArr[0]) ? this.$refs[refName].cycle01 = 0 : this.$refs[refName].cycle01 = indexArr[0];\n          this.$refs[refName].cycle02 = indexArr[1];\n          insValue = 3;\n        } else if (value.indexOf('#') > -1) {\n          let indexArr = value.split('#');\n          isNaN(indexArr[0]) ? this.$refs[refName].average01 = 1 : this.$refs[refName].average01 = indexArr[0];\n          this.$refs[refName].average02 = indexArr[1];\n          insValue = 4;\n        } else if (value.indexOf('L') > -1) {\n          let indexArr = value.split('L');\n          isNaN(indexArr[0]) ? this.$refs[refName].weekday = 1 : this.$refs[refName].weekday = indexArr[0];\n          insValue = 5;\n        } else {\n          this.$refs[refName].checkboxList = value.split(',');\n          insValue = 7;\n        }\n      } else if (name == 'year') {\n        if (value == '') {\n          insValue = 1;\n        } else if (value == '*') {\n          insValue = 2;\n        } else if (value.indexOf('-') > -1) {\n          insValue = 3;\n        } else if (value.indexOf('/') > -1) {\n          insValue = 4;\n        } else {\n          this.$refs[refName].checkboxList = value.split(',');\n          insValue = 5;\n        }\n      }\n\n      this.$refs[refName].radioValue = insValue;\n    },\n\n    checkNumber(value, minLimit, maxLimit) {\n      value = Math.floor(value);\n\n      if (value < minLimit) {\n        value = minLimit;\n      } else if (value > maxLimit) {\n        value = maxLimit;\n      }\n\n      return value;\n    },\n\n    hidePopup() {\n      this.$emit('hide');\n    },\n\n    submitFill() {\n      this.$emit('fill', this.crontabValueString);\n      this.hidePopup();\n    },\n\n    clearCron() {\n      this.crontabValueObj = {\n        second: '*',\n        min: '*',\n        hour: '*',\n        day: '*',\n        month: '*',\n        week: '?',\n        year: ''\n      };\n\n      for (let j in this.crontabValueObj) {\n        this.changeRadio(j, this.crontabValueObj[j]);\n      }\n    }\n\n  },\n  computed: {\n    crontabValueString: function () {\n      let obj = this.crontabValueObj;\n      let str = obj.second + ' ' + obj.min + ' ' + obj.hour + ' ' + obj.day + ' ' + obj.month + ' ' + obj.week + (obj.year == '' ? '' : ' ' + obj.year);\n      return str;\n    }\n  },\n  watch: {\n    expression: 'resolveExp'\n  },\n  mounted: function () {\n    this.resolveExp();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}