{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"layoutBase\"] = factory();else root[\"layoutBase\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // identity function for calling harmony imports with the correct context\n\n      /******/\n\n      __webpack_require__.i = function (value) {\n        return value;\n      };\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 26);\n      /******/\n    }\n    /************************************************************************/\n\n    /******/\n    ([\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function LayoutConstants() {}\n      /**\r\n       * Layout Quality: 0:draft, 1:default, 2:proof\r\n       */\n\n\n      LayoutConstants.QUALITY = 1;\n      /**\r\n       * Default parameters\r\n       */\n\n      LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;\n      LayoutConstants.DEFAULT_INCREMENTAL = false;\n      LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;\n      LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;\n      LayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;\n      LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false; // -----------------------------------------------------------------------------\n      // Section: General other constants\n      // -----------------------------------------------------------------------------\n\n      /*\r\n       * Margins of a graph to be applied on bouding rectangle of its contents. We\r\n       * assume margins on all four sides to be uniform.\r\n       */\n\n      LayoutConstants.DEFAULT_GRAPH_MARGIN = 15;\n      /*\r\n       * Whether to consider labels in node dimensions or not\r\n       */\n\n      LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;\n      /*\r\n       * Default dimension of a non-compound node.\r\n       */\n\n      LayoutConstants.SIMPLE_NODE_SIZE = 40;\n      /*\r\n       * Default dimension of a non-compound node.\r\n       */\n\n      LayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;\n      /*\r\n       * Empty compound node size. When a compound node is empty, its both\r\n       * dimensions should be of this value.\r\n       */\n\n      LayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;\n      /*\r\n       * Minimum length that an edge should take during layout\r\n       */\n\n      LayoutConstants.MIN_EDGE_LENGTH = 1;\n      /*\r\n       * World boundaries that layout operates on\r\n       */\n\n      LayoutConstants.WORLD_BOUNDARY = 1000000;\n      /*\r\n       * World boundaries that random positioning can be performed with\r\n       */\n\n      LayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1000;\n      /*\r\n       * Coordinates of the world center\r\n       */\n\n      LayoutConstants.WORLD_CENTER_X = 1200;\n      LayoutConstants.WORLD_CENTER_Y = 900;\n      module.exports = LayoutConstants;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var LGraphObject = __webpack_require__(2);\n\n      var IGeometry = __webpack_require__(8);\n\n      var IMath = __webpack_require__(9);\n\n      function LEdge(source, target, vEdge) {\n        LGraphObject.call(this, vEdge);\n        this.isOverlapingSourceAndTarget = false;\n        this.vGraphObject = vEdge;\n        this.bendpoints = [];\n        this.source = source;\n        this.target = target;\n      }\n\n      LEdge.prototype = Object.create(LGraphObject.prototype);\n\n      for (var prop in LGraphObject) {\n        LEdge[prop] = LGraphObject[prop];\n      }\n\n      LEdge.prototype.getSource = function () {\n        return this.source;\n      };\n\n      LEdge.prototype.getTarget = function () {\n        return this.target;\n      };\n\n      LEdge.prototype.isInterGraph = function () {\n        return this.isInterGraph;\n      };\n\n      LEdge.prototype.getLength = function () {\n        return this.length;\n      };\n\n      LEdge.prototype.isOverlapingSourceAndTarget = function () {\n        return this.isOverlapingSourceAndTarget;\n      };\n\n      LEdge.prototype.getBendpoints = function () {\n        return this.bendpoints;\n      };\n\n      LEdge.prototype.getLca = function () {\n        return this.lca;\n      };\n\n      LEdge.prototype.getSourceInLca = function () {\n        return this.sourceInLca;\n      };\n\n      LEdge.prototype.getTargetInLca = function () {\n        return this.targetInLca;\n      };\n\n      LEdge.prototype.getOtherEnd = function (node) {\n        if (this.source === node) {\n          return this.target;\n        } else if (this.target === node) {\n          return this.source;\n        } else {\n          throw \"Node is not incident with this edge\";\n        }\n      };\n\n      LEdge.prototype.getOtherEndInGraph = function (node, graph) {\n        var otherEnd = this.getOtherEnd(node);\n        var root = graph.getGraphManager().getRoot();\n\n        while (true) {\n          if (otherEnd.getOwner() == graph) {\n            return otherEnd;\n          }\n\n          if (otherEnd.getOwner() == root) {\n            break;\n          }\n\n          otherEnd = otherEnd.getOwner().getParent();\n        }\n\n        return null;\n      };\n\n      LEdge.prototype.updateLength = function () {\n        var clipPointCoordinates = new Array(4);\n        this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);\n\n        if (!this.isOverlapingSourceAndTarget) {\n          this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];\n          this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];\n\n          if (Math.abs(this.lengthX) < 1.0) {\n            this.lengthX = IMath.sign(this.lengthX);\n          }\n\n          if (Math.abs(this.lengthY) < 1.0) {\n            this.lengthY = IMath.sign(this.lengthY);\n          }\n\n          this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n        }\n      };\n\n      LEdge.prototype.updateLengthSimple = function () {\n        this.lengthX = this.target.getCenterX() - this.source.getCenterX();\n        this.lengthY = this.target.getCenterY() - this.source.getCenterY();\n\n        if (Math.abs(this.lengthX) < 1.0) {\n          this.lengthX = IMath.sign(this.lengthX);\n        }\n\n        if (Math.abs(this.lengthY) < 1.0) {\n          this.lengthY = IMath.sign(this.lengthY);\n        }\n\n        this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n      };\n\n      module.exports = LEdge;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function LGraphObject(vGraphObject) {\n        this.vGraphObject = vGraphObject;\n      }\n\n      module.exports = LGraphObject;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var LGraphObject = __webpack_require__(2);\n\n      var Integer = __webpack_require__(10);\n\n      var RectangleD = __webpack_require__(13);\n\n      var LayoutConstants = __webpack_require__(0);\n\n      var RandomSeed = __webpack_require__(16);\n\n      var PointD = __webpack_require__(4);\n\n      function LNode(gm, loc, size, vNode) {\n        //Alternative constructor 1 : LNode(LGraphManager gm, Point loc, Dimension size, Object vNode)\n        if (size == null && vNode == null) {\n          vNode = loc;\n        }\n\n        LGraphObject.call(this, vNode); //Alternative constructor 2 : LNode(Layout layout, Object vNode)\n\n        if (gm.graphManager != null) gm = gm.graphManager;\n        this.estimatedSize = Integer.MIN_VALUE;\n        this.inclusionTreeDepth = Integer.MAX_VALUE;\n        this.vGraphObject = vNode;\n        this.edges = [];\n        this.graphManager = gm;\n        if (size != null && loc != null) this.rect = new RectangleD(loc.x, loc.y, size.width, size.height);else this.rect = new RectangleD();\n      }\n\n      LNode.prototype = Object.create(LGraphObject.prototype);\n\n      for (var prop in LGraphObject) {\n        LNode[prop] = LGraphObject[prop];\n      }\n\n      LNode.prototype.getEdges = function () {\n        return this.edges;\n      };\n\n      LNode.prototype.getChild = function () {\n        return this.child;\n      };\n\n      LNode.prototype.getOwner = function () {\n        //  if (this.owner != null) {\n        //    if (!(this.owner == null || this.owner.getNodes().indexOf(this) > -1)) {\n        //      throw \"assert failed\";\n        //    }\n        //  }\n        return this.owner;\n      };\n\n      LNode.prototype.getWidth = function () {\n        return this.rect.width;\n      };\n\n      LNode.prototype.setWidth = function (width) {\n        this.rect.width = width;\n      };\n\n      LNode.prototype.getHeight = function () {\n        return this.rect.height;\n      };\n\n      LNode.prototype.setHeight = function (height) {\n        this.rect.height = height;\n      };\n\n      LNode.prototype.getCenterX = function () {\n        return this.rect.x + this.rect.width / 2;\n      };\n\n      LNode.prototype.getCenterY = function () {\n        return this.rect.y + this.rect.height / 2;\n      };\n\n      LNode.prototype.getCenter = function () {\n        return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);\n      };\n\n      LNode.prototype.getLocation = function () {\n        return new PointD(this.rect.x, this.rect.y);\n      };\n\n      LNode.prototype.getRect = function () {\n        return this.rect;\n      };\n\n      LNode.prototype.getDiagonal = function () {\n        return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);\n      };\n      /**\n       * This method returns half the diagonal length of this node.\n       */\n\n\n      LNode.prototype.getHalfTheDiagonal = function () {\n        return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;\n      };\n\n      LNode.prototype.setRect = function (upperLeft, dimension) {\n        this.rect.x = upperLeft.x;\n        this.rect.y = upperLeft.y;\n        this.rect.width = dimension.width;\n        this.rect.height = dimension.height;\n      };\n\n      LNode.prototype.setCenter = function (cx, cy) {\n        this.rect.x = cx - this.rect.width / 2;\n        this.rect.y = cy - this.rect.height / 2;\n      };\n\n      LNode.prototype.setLocation = function (x, y) {\n        this.rect.x = x;\n        this.rect.y = y;\n      };\n\n      LNode.prototype.moveBy = function (dx, dy) {\n        this.rect.x += dx;\n        this.rect.y += dy;\n      };\n\n      LNode.prototype.getEdgeListToNode = function (to) {\n        var edgeList = [];\n        var edge;\n        var self = this;\n        self.edges.forEach(function (edge) {\n          if (edge.target == to) {\n            if (edge.source != self) throw \"Incorrect edge source!\";\n            edgeList.push(edge);\n          }\n        });\n        return edgeList;\n      };\n\n      LNode.prototype.getEdgesBetween = function (other) {\n        var edgeList = [];\n        var edge;\n        var self = this;\n        self.edges.forEach(function (edge) {\n          if (!(edge.source == self || edge.target == self)) throw \"Incorrect edge source and/or target\";\n\n          if (edge.target == other || edge.source == other) {\n            edgeList.push(edge);\n          }\n        });\n        return edgeList;\n      };\n\n      LNode.prototype.getNeighborsList = function () {\n        var neighbors = new Set();\n        var self = this;\n        self.edges.forEach(function (edge) {\n          if (edge.source == self) {\n            neighbors.add(edge.target);\n          } else {\n            if (edge.target != self) {\n              throw \"Incorrect incidency!\";\n            }\n\n            neighbors.add(edge.source);\n          }\n        });\n        return neighbors;\n      };\n\n      LNode.prototype.withChildren = function () {\n        var withNeighborsList = new Set();\n        var childNode;\n        var children;\n        withNeighborsList.add(this);\n\n        if (this.child != null) {\n          var nodes = this.child.getNodes();\n\n          for (var i = 0; i < nodes.length; i++) {\n            childNode = nodes[i];\n            children = childNode.withChildren();\n            children.forEach(function (node) {\n              withNeighborsList.add(node);\n            });\n          }\n        }\n\n        return withNeighborsList;\n      };\n\n      LNode.prototype.getNoOfChildren = function () {\n        var noOfChildren = 0;\n        var childNode;\n\n        if (this.child == null) {\n          noOfChildren = 1;\n        } else {\n          var nodes = this.child.getNodes();\n\n          for (var i = 0; i < nodes.length; i++) {\n            childNode = nodes[i];\n            noOfChildren += childNode.getNoOfChildren();\n          }\n        }\n\n        if (noOfChildren == 0) {\n          noOfChildren = 1;\n        }\n\n        return noOfChildren;\n      };\n\n      LNode.prototype.getEstimatedSize = function () {\n        if (this.estimatedSize == Integer.MIN_VALUE) {\n          throw \"assert failed\";\n        }\n\n        return this.estimatedSize;\n      };\n\n      LNode.prototype.calcEstimatedSize = function () {\n        if (this.child == null) {\n          return this.estimatedSize = (this.rect.width + this.rect.height) / 2;\n        } else {\n          this.estimatedSize = this.child.calcEstimatedSize();\n          this.rect.width = this.estimatedSize;\n          this.rect.height = this.estimatedSize;\n          return this.estimatedSize;\n        }\n      };\n\n      LNode.prototype.scatter = function () {\n        var randomCenterX;\n        var randomCenterY;\n        var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n        var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n        randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;\n        var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n        var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n        randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;\n        this.rect.x = randomCenterX;\n        this.rect.y = randomCenterY;\n      };\n\n      LNode.prototype.updateBounds = function () {\n        if (this.getChild() == null) {\n          throw \"assert failed\";\n        }\n\n        if (this.getChild().getNodes().length != 0) {\n          // wrap the children nodes by re-arranging the boundaries\n          var childGraph = this.getChild();\n          childGraph.updateBounds(true);\n          this.rect.x = childGraph.getLeft();\n          this.rect.y = childGraph.getTop();\n          this.setWidth(childGraph.getRight() - childGraph.getLeft());\n          this.setHeight(childGraph.getBottom() - childGraph.getTop()); // Update compound bounds considering its label properties    \n\n          if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {\n            var width = childGraph.getRight() - childGraph.getLeft();\n            var height = childGraph.getBottom() - childGraph.getTop();\n\n            if (this.labelWidth > width) {\n              this.rect.x -= (this.labelWidth - width) / 2;\n              this.setWidth(this.labelWidth);\n            }\n\n            if (this.labelHeight > height) {\n              if (this.labelPos == \"center\") {\n                this.rect.y -= (this.labelHeight - height) / 2;\n              } else if (this.labelPos == \"top\") {\n                this.rect.y -= this.labelHeight - height;\n              }\n\n              this.setHeight(this.labelHeight);\n            }\n          }\n        }\n      };\n\n      LNode.prototype.getInclusionTreeDepth = function () {\n        if (this.inclusionTreeDepth == Integer.MAX_VALUE) {\n          throw \"assert failed\";\n        }\n\n        return this.inclusionTreeDepth;\n      };\n\n      LNode.prototype.transform = function (trans) {\n        var left = this.rect.x;\n\n        if (left > LayoutConstants.WORLD_BOUNDARY) {\n          left = LayoutConstants.WORLD_BOUNDARY;\n        } else if (left < -LayoutConstants.WORLD_BOUNDARY) {\n          left = -LayoutConstants.WORLD_BOUNDARY;\n        }\n\n        var top = this.rect.y;\n\n        if (top > LayoutConstants.WORLD_BOUNDARY) {\n          top = LayoutConstants.WORLD_BOUNDARY;\n        } else if (top < -LayoutConstants.WORLD_BOUNDARY) {\n          top = -LayoutConstants.WORLD_BOUNDARY;\n        }\n\n        var leftTop = new PointD(left, top);\n        var vLeftTop = trans.inverseTransformPoint(leftTop);\n        this.setLocation(vLeftTop.x, vLeftTop.y);\n      };\n\n      LNode.prototype.getLeft = function () {\n        return this.rect.x;\n      };\n\n      LNode.prototype.getRight = function () {\n        return this.rect.x + this.rect.width;\n      };\n\n      LNode.prototype.getTop = function () {\n        return this.rect.y;\n      };\n\n      LNode.prototype.getBottom = function () {\n        return this.rect.y + this.rect.height;\n      };\n\n      LNode.prototype.getParent = function () {\n        if (this.owner == null) {\n          return null;\n        }\n\n        return this.owner.getParent();\n      };\n\n      module.exports = LNode;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function PointD(x, y) {\n        if (x == null && y == null) {\n          this.x = 0;\n          this.y = 0;\n        } else {\n          this.x = x;\n          this.y = y;\n        }\n      }\n\n      PointD.prototype.getX = function () {\n        return this.x;\n      };\n\n      PointD.prototype.getY = function () {\n        return this.y;\n      };\n\n      PointD.prototype.setX = function (x) {\n        this.x = x;\n      };\n\n      PointD.prototype.setY = function (y) {\n        this.y = y;\n      };\n\n      PointD.prototype.getDifference = function (pt) {\n        return new DimensionD(this.x - pt.x, this.y - pt.y);\n      };\n\n      PointD.prototype.getCopy = function () {\n        return new PointD(this.x, this.y);\n      };\n\n      PointD.prototype.translate = function (dim) {\n        this.x += dim.width;\n        this.y += dim.height;\n        return this;\n      };\n\n      module.exports = PointD;\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var LGraphObject = __webpack_require__(2);\n\n      var Integer = __webpack_require__(10);\n\n      var LayoutConstants = __webpack_require__(0);\n\n      var LGraphManager = __webpack_require__(6);\n\n      var LNode = __webpack_require__(3);\n\n      var LEdge = __webpack_require__(1);\n\n      var RectangleD = __webpack_require__(13);\n\n      var Point = __webpack_require__(12);\n\n      var LinkedList = __webpack_require__(11);\n\n      function LGraph(parent, obj2, vGraph) {\n        LGraphObject.call(this, vGraph);\n        this.estimatedSize = Integer.MIN_VALUE;\n        this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;\n        this.edges = [];\n        this.nodes = [];\n        this.isConnected = false;\n        this.parent = parent;\n\n        if (obj2 != null && obj2 instanceof LGraphManager) {\n          this.graphManager = obj2;\n        } else if (obj2 != null && obj2 instanceof Layout) {\n          this.graphManager = obj2.graphManager;\n        }\n      }\n\n      LGraph.prototype = Object.create(LGraphObject.prototype);\n\n      for (var prop in LGraphObject) {\n        LGraph[prop] = LGraphObject[prop];\n      }\n\n      LGraph.prototype.getNodes = function () {\n        return this.nodes;\n      };\n\n      LGraph.prototype.getEdges = function () {\n        return this.edges;\n      };\n\n      LGraph.prototype.getGraphManager = function () {\n        return this.graphManager;\n      };\n\n      LGraph.prototype.getParent = function () {\n        return this.parent;\n      };\n\n      LGraph.prototype.getLeft = function () {\n        return this.left;\n      };\n\n      LGraph.prototype.getRight = function () {\n        return this.right;\n      };\n\n      LGraph.prototype.getTop = function () {\n        return this.top;\n      };\n\n      LGraph.prototype.getBottom = function () {\n        return this.bottom;\n      };\n\n      LGraph.prototype.isConnected = function () {\n        return this.isConnected;\n      };\n\n      LGraph.prototype.add = function (obj1, sourceNode, targetNode) {\n        if (sourceNode == null && targetNode == null) {\n          var newNode = obj1;\n\n          if (this.graphManager == null) {\n            throw \"Graph has no graph mgr!\";\n          }\n\n          if (this.getNodes().indexOf(newNode) > -1) {\n            throw \"Node already in graph!\";\n          }\n\n          newNode.owner = this;\n          this.getNodes().push(newNode);\n          return newNode;\n        } else {\n          var newEdge = obj1;\n\n          if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {\n            throw \"Source or target not in graph!\";\n          }\n\n          if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {\n            throw \"Both owners must be this graph!\";\n          }\n\n          if (sourceNode.owner != targetNode.owner) {\n            return null;\n          } // set source and target\n\n\n          newEdge.source = sourceNode;\n          newEdge.target = targetNode; // set as intra-graph edge\n\n          newEdge.isInterGraph = false; // add to graph edge list\n\n          this.getEdges().push(newEdge); // add to incidency lists\n\n          sourceNode.edges.push(newEdge);\n\n          if (targetNode != sourceNode) {\n            targetNode.edges.push(newEdge);\n          }\n\n          return newEdge;\n        }\n      };\n\n      LGraph.prototype.remove = function (obj) {\n        var node = obj;\n\n        if (obj instanceof LNode) {\n          if (node == null) {\n            throw \"Node is null!\";\n          }\n\n          if (!(node.owner != null && node.owner == this)) {\n            throw \"Owner graph is invalid!\";\n          }\n\n          if (this.graphManager == null) {\n            throw \"Owner graph manager is invalid!\";\n          } // remove incident edges first (make a copy to do it safely)\n\n\n          var edgesToBeRemoved = node.edges.slice();\n          var edge;\n          var s = edgesToBeRemoved.length;\n\n          for (var i = 0; i < s; i++) {\n            edge = edgesToBeRemoved[i];\n\n            if (edge.isInterGraph) {\n              this.graphManager.remove(edge);\n            } else {\n              edge.source.owner.remove(edge);\n            }\n          } // now the node itself\n\n\n          var index = this.nodes.indexOf(node);\n\n          if (index == -1) {\n            throw \"Node not in owner node list!\";\n          }\n\n          this.nodes.splice(index, 1);\n        } else if (obj instanceof LEdge) {\n          var edge = obj;\n\n          if (edge == null) {\n            throw \"Edge is null!\";\n          }\n\n          if (!(edge.source != null && edge.target != null)) {\n            throw \"Source and/or target is null!\";\n          }\n\n          if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {\n            throw \"Source and/or target owner is invalid!\";\n          }\n\n          var sourceIndex = edge.source.edges.indexOf(edge);\n          var targetIndex = edge.target.edges.indexOf(edge);\n\n          if (!(sourceIndex > -1 && targetIndex > -1)) {\n            throw \"Source and/or target doesn't know this edge!\";\n          }\n\n          edge.source.edges.splice(sourceIndex, 1);\n\n          if (edge.target != edge.source) {\n            edge.target.edges.splice(targetIndex, 1);\n          }\n\n          var index = edge.source.owner.getEdges().indexOf(edge);\n\n          if (index == -1) {\n            throw \"Not in owner's edge list!\";\n          }\n\n          edge.source.owner.getEdges().splice(index, 1);\n        }\n      };\n\n      LGraph.prototype.updateLeftTop = function () {\n        var top = Integer.MAX_VALUE;\n        var left = Integer.MAX_VALUE;\n        var nodeTop;\n        var nodeLeft;\n        var margin;\n        var nodes = this.getNodes();\n        var s = nodes.length;\n\n        for (var i = 0; i < s; i++) {\n          var lNode = nodes[i];\n          nodeTop = lNode.getTop();\n          nodeLeft = lNode.getLeft();\n\n          if (top > nodeTop) {\n            top = nodeTop;\n          }\n\n          if (left > nodeLeft) {\n            left = nodeLeft;\n          }\n        } // Do we have any nodes in this graph?\n\n\n        if (top == Integer.MAX_VALUE) {\n          return null;\n        }\n\n        if (nodes[0].getParent().paddingLeft != undefined) {\n          margin = nodes[0].getParent().paddingLeft;\n        } else {\n          margin = this.margin;\n        }\n\n        this.left = left - margin;\n        this.top = top - margin; // Apply the margins and return the result\n\n        return new Point(this.left, this.top);\n      };\n\n      LGraph.prototype.updateBounds = function (recursive) {\n        // calculate bounds\n        var left = Integer.MAX_VALUE;\n        var right = -Integer.MAX_VALUE;\n        var top = Integer.MAX_VALUE;\n        var bottom = -Integer.MAX_VALUE;\n        var nodeLeft;\n        var nodeRight;\n        var nodeTop;\n        var nodeBottom;\n        var margin;\n        var nodes = this.nodes;\n        var s = nodes.length;\n\n        for (var i = 0; i < s; i++) {\n          var lNode = nodes[i];\n\n          if (recursive && lNode.child != null) {\n            lNode.updateBounds();\n          }\n\n          nodeLeft = lNode.getLeft();\n          nodeRight = lNode.getRight();\n          nodeTop = lNode.getTop();\n          nodeBottom = lNode.getBottom();\n\n          if (left > nodeLeft) {\n            left = nodeLeft;\n          }\n\n          if (right < nodeRight) {\n            right = nodeRight;\n          }\n\n          if (top > nodeTop) {\n            top = nodeTop;\n          }\n\n          if (bottom < nodeBottom) {\n            bottom = nodeBottom;\n          }\n        }\n\n        var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n\n        if (left == Integer.MAX_VALUE) {\n          this.left = this.parent.getLeft();\n          this.right = this.parent.getRight();\n          this.top = this.parent.getTop();\n          this.bottom = this.parent.getBottom();\n        }\n\n        if (nodes[0].getParent().paddingLeft != undefined) {\n          margin = nodes[0].getParent().paddingLeft;\n        } else {\n          margin = this.margin;\n        }\n\n        this.left = boundingRect.x - margin;\n        this.right = boundingRect.x + boundingRect.width + margin;\n        this.top = boundingRect.y - margin;\n        this.bottom = boundingRect.y + boundingRect.height + margin;\n      };\n\n      LGraph.calculateBounds = function (nodes) {\n        var left = Integer.MAX_VALUE;\n        var right = -Integer.MAX_VALUE;\n        var top = Integer.MAX_VALUE;\n        var bottom = -Integer.MAX_VALUE;\n        var nodeLeft;\n        var nodeRight;\n        var nodeTop;\n        var nodeBottom;\n        var s = nodes.length;\n\n        for (var i = 0; i < s; i++) {\n          var lNode = nodes[i];\n          nodeLeft = lNode.getLeft();\n          nodeRight = lNode.getRight();\n          nodeTop = lNode.getTop();\n          nodeBottom = lNode.getBottom();\n\n          if (left > nodeLeft) {\n            left = nodeLeft;\n          }\n\n          if (right < nodeRight) {\n            right = nodeRight;\n          }\n\n          if (top > nodeTop) {\n            top = nodeTop;\n          }\n\n          if (bottom < nodeBottom) {\n            bottom = nodeBottom;\n          }\n        }\n\n        var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n        return boundingRect;\n      };\n\n      LGraph.prototype.getInclusionTreeDepth = function () {\n        if (this == this.graphManager.getRoot()) {\n          return 1;\n        } else {\n          return this.parent.getInclusionTreeDepth();\n        }\n      };\n\n      LGraph.prototype.getEstimatedSize = function () {\n        if (this.estimatedSize == Integer.MIN_VALUE) {\n          throw \"assert failed\";\n        }\n\n        return this.estimatedSize;\n      };\n\n      LGraph.prototype.calcEstimatedSize = function () {\n        var size = 0;\n        var nodes = this.nodes;\n        var s = nodes.length;\n\n        for (var i = 0; i < s; i++) {\n          var lNode = nodes[i];\n          size += lNode.calcEstimatedSize();\n        }\n\n        if (size == 0) {\n          this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;\n        } else {\n          this.estimatedSize = size / Math.sqrt(this.nodes.length);\n        }\n\n        return this.estimatedSize;\n      };\n\n      LGraph.prototype.updateConnected = function () {\n        var self = this;\n\n        if (this.nodes.length == 0) {\n          this.isConnected = true;\n          return;\n        }\n\n        var queue = new LinkedList();\n        var visited = new Set();\n        var currentNode = this.nodes[0];\n        var neighborEdges;\n        var currentNeighbor;\n        var childrenOfNode = currentNode.withChildren();\n        childrenOfNode.forEach(function (node) {\n          queue.push(node);\n          visited.add(node);\n        });\n\n        while (queue.length !== 0) {\n          currentNode = queue.shift(); // Traverse all neighbors of this node\n\n          neighborEdges = currentNode.getEdges();\n          var size = neighborEdges.length;\n\n          for (var i = 0; i < size; i++) {\n            var neighborEdge = neighborEdges[i];\n            currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this); // Add unvisited neighbors to the list to visit\n\n            if (currentNeighbor != null && !visited.has(currentNeighbor)) {\n              var childrenOfNeighbor = currentNeighbor.withChildren();\n              childrenOfNeighbor.forEach(function (node) {\n                queue.push(node);\n                visited.add(node);\n              });\n            }\n          }\n        }\n\n        this.isConnected = false;\n\n        if (visited.size >= this.nodes.length) {\n          var noOfVisitedInThisGraph = 0;\n          visited.forEach(function (visitedNode) {\n            if (visitedNode.owner == self) {\n              noOfVisitedInThisGraph++;\n            }\n          });\n\n          if (noOfVisitedInThisGraph == this.nodes.length) {\n            this.isConnected = true;\n          }\n        }\n      };\n\n      module.exports = LGraph;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var LGraph;\n\n      var LEdge = __webpack_require__(1);\n\n      function LGraphManager(layout) {\n        LGraph = __webpack_require__(5); // It may be better to initilize this out of this function but it gives an error (Right-hand side of 'instanceof' is not callable) now.\n\n        this.layout = layout;\n        this.graphs = [];\n        this.edges = [];\n      }\n\n      LGraphManager.prototype.addRoot = function () {\n        var ngraph = this.layout.newGraph();\n        var nnode = this.layout.newNode(null);\n        var root = this.add(ngraph, nnode);\n        this.setRootGraph(root);\n        return this.rootGraph;\n      };\n\n      LGraphManager.prototype.add = function (newGraph, parentNode, newEdge, sourceNode, targetNode) {\n        //there are just 2 parameters are passed then it adds an LGraph else it adds an LEdge\n        if (newEdge == null && sourceNode == null && targetNode == null) {\n          if (newGraph == null) {\n            throw \"Graph is null!\";\n          }\n\n          if (parentNode == null) {\n            throw \"Parent node is null!\";\n          }\n\n          if (this.graphs.indexOf(newGraph) > -1) {\n            throw \"Graph already in this graph mgr!\";\n          }\n\n          this.graphs.push(newGraph);\n\n          if (newGraph.parent != null) {\n            throw \"Already has a parent!\";\n          }\n\n          if (parentNode.child != null) {\n            throw \"Already has a child!\";\n          }\n\n          newGraph.parent = parentNode;\n          parentNode.child = newGraph;\n          return newGraph;\n        } else {\n          //change the order of the parameters\n          targetNode = newEdge;\n          sourceNode = parentNode;\n          newEdge = newGraph;\n          var sourceGraph = sourceNode.getOwner();\n          var targetGraph = targetNode.getOwner();\n\n          if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {\n            throw \"Source not in this graph mgr!\";\n          }\n\n          if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {\n            throw \"Target not in this graph mgr!\";\n          }\n\n          if (sourceGraph == targetGraph) {\n            newEdge.isInterGraph = false;\n            return sourceGraph.add(newEdge, sourceNode, targetNode);\n          } else {\n            newEdge.isInterGraph = true; // set source and target\n\n            newEdge.source = sourceNode;\n            newEdge.target = targetNode; // add edge to inter-graph edge list\n\n            if (this.edges.indexOf(newEdge) > -1) {\n              throw \"Edge already in inter-graph edge list!\";\n            }\n\n            this.edges.push(newEdge); // add edge to source and target incidency lists\n\n            if (!(newEdge.source != null && newEdge.target != null)) {\n              throw \"Edge source and/or target is null!\";\n            }\n\n            if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {\n              throw \"Edge already in source and/or target incidency list!\";\n            }\n\n            newEdge.source.edges.push(newEdge);\n            newEdge.target.edges.push(newEdge);\n            return newEdge;\n          }\n        }\n      };\n\n      LGraphManager.prototype.remove = function (lObj) {\n        if (lObj instanceof LGraph) {\n          var graph = lObj;\n\n          if (graph.getGraphManager() != this) {\n            throw \"Graph not in this graph mgr\";\n          }\n\n          if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {\n            throw \"Invalid parent node!\";\n          } // first the edges (make a copy to do it safely)\n\n\n          var edgesToBeRemoved = [];\n          edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());\n          var edge;\n          var s = edgesToBeRemoved.length;\n\n          for (var i = 0; i < s; i++) {\n            edge = edgesToBeRemoved[i];\n            graph.remove(edge);\n          } // then the nodes (make a copy to do it safely)\n\n\n          var nodesToBeRemoved = [];\n          nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());\n          var node;\n          s = nodesToBeRemoved.length;\n\n          for (var i = 0; i < s; i++) {\n            node = nodesToBeRemoved[i];\n            graph.remove(node);\n          } // check if graph is the root\n\n\n          if (graph == this.rootGraph) {\n            this.setRootGraph(null);\n          } // now remove the graph itself\n\n\n          var index = this.graphs.indexOf(graph);\n          this.graphs.splice(index, 1); // also reset the parent of the graph\n\n          graph.parent = null;\n        } else if (lObj instanceof LEdge) {\n          edge = lObj;\n\n          if (edge == null) {\n            throw \"Edge is null!\";\n          }\n\n          if (!edge.isInterGraph) {\n            throw \"Not an inter-graph edge!\";\n          }\n\n          if (!(edge.source != null && edge.target != null)) {\n            throw \"Source and/or target is null!\";\n          } // remove edge from source and target nodes' incidency lists\n\n\n          if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {\n            throw \"Source and/or target doesn't know this edge!\";\n          }\n\n          var index = edge.source.edges.indexOf(edge);\n          edge.source.edges.splice(index, 1);\n          index = edge.target.edges.indexOf(edge);\n          edge.target.edges.splice(index, 1); // remove edge from owner graph manager's inter-graph edge list\n\n          if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {\n            throw \"Edge owner graph or owner graph manager is null!\";\n          }\n\n          if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {\n            throw \"Not in owner graph manager's edge list!\";\n          }\n\n          var index = edge.source.owner.getGraphManager().edges.indexOf(edge);\n          edge.source.owner.getGraphManager().edges.splice(index, 1);\n        }\n      };\n\n      LGraphManager.prototype.updateBounds = function () {\n        this.rootGraph.updateBounds(true);\n      };\n\n      LGraphManager.prototype.getGraphs = function () {\n        return this.graphs;\n      };\n\n      LGraphManager.prototype.getAllNodes = function () {\n        if (this.allNodes == null) {\n          var nodeList = [];\n          var graphs = this.getGraphs();\n          var s = graphs.length;\n\n          for (var i = 0; i < s; i++) {\n            nodeList = nodeList.concat(graphs[i].getNodes());\n          }\n\n          this.allNodes = nodeList;\n        }\n\n        return this.allNodes;\n      };\n\n      LGraphManager.prototype.resetAllNodes = function () {\n        this.allNodes = null;\n      };\n\n      LGraphManager.prototype.resetAllEdges = function () {\n        this.allEdges = null;\n      };\n\n      LGraphManager.prototype.resetAllNodesToApplyGravitation = function () {\n        this.allNodesToApplyGravitation = null;\n      };\n\n      LGraphManager.prototype.getAllEdges = function () {\n        if (this.allEdges == null) {\n          var edgeList = [];\n          var graphs = this.getGraphs();\n          var s = graphs.length;\n\n          for (var i = 0; i < graphs.length; i++) {\n            edgeList = edgeList.concat(graphs[i].getEdges());\n          }\n\n          edgeList = edgeList.concat(this.edges);\n          this.allEdges = edgeList;\n        }\n\n        return this.allEdges;\n      };\n\n      LGraphManager.prototype.getAllNodesToApplyGravitation = function () {\n        return this.allNodesToApplyGravitation;\n      };\n\n      LGraphManager.prototype.setAllNodesToApplyGravitation = function (nodeList) {\n        if (this.allNodesToApplyGravitation != null) {\n          throw \"assert failed\";\n        }\n\n        this.allNodesToApplyGravitation = nodeList;\n      };\n\n      LGraphManager.prototype.getRoot = function () {\n        return this.rootGraph;\n      };\n\n      LGraphManager.prototype.setRootGraph = function (graph) {\n        if (graph.getGraphManager() != this) {\n          throw \"Root not in this graph mgr!\";\n        }\n\n        this.rootGraph = graph; // root graph must have a root node associated with it for convenience\n\n        if (graph.parent == null) {\n          graph.parent = this.layout.newNode(\"Root node\");\n        }\n      };\n\n      LGraphManager.prototype.getLayout = function () {\n        return this.layout;\n      };\n\n      LGraphManager.prototype.isOneAncestorOfOther = function (firstNode, secondNode) {\n        if (!(firstNode != null && secondNode != null)) {\n          throw \"assert failed\";\n        }\n\n        if (firstNode == secondNode) {\n          return true;\n        } // Is second node an ancestor of the first one?\n\n\n        var ownerGraph = firstNode.getOwner();\n        var parentNode;\n\n        do {\n          parentNode = ownerGraph.getParent();\n\n          if (parentNode == null) {\n            break;\n          }\n\n          if (parentNode == secondNode) {\n            return true;\n          }\n\n          ownerGraph = parentNode.getOwner();\n\n          if (ownerGraph == null) {\n            break;\n          }\n        } while (true); // Is first node an ancestor of the second one?\n\n\n        ownerGraph = secondNode.getOwner();\n\n        do {\n          parentNode = ownerGraph.getParent();\n\n          if (parentNode == null) {\n            break;\n          }\n\n          if (parentNode == firstNode) {\n            return true;\n          }\n\n          ownerGraph = parentNode.getOwner();\n\n          if (ownerGraph == null) {\n            break;\n          }\n        } while (true);\n\n        return false;\n      };\n\n      LGraphManager.prototype.calcLowestCommonAncestors = function () {\n        var edge;\n        var sourceNode;\n        var targetNode;\n        var sourceAncestorGraph;\n        var targetAncestorGraph;\n        var edges = this.getAllEdges();\n        var s = edges.length;\n\n        for (var i = 0; i < s; i++) {\n          edge = edges[i];\n          sourceNode = edge.source;\n          targetNode = edge.target;\n          edge.lca = null;\n          edge.sourceInLca = sourceNode;\n          edge.targetInLca = targetNode;\n\n          if (sourceNode == targetNode) {\n            edge.lca = sourceNode.getOwner();\n            continue;\n          }\n\n          sourceAncestorGraph = sourceNode.getOwner();\n\n          while (edge.lca == null) {\n            edge.targetInLca = targetNode;\n            targetAncestorGraph = targetNode.getOwner();\n\n            while (edge.lca == null) {\n              if (targetAncestorGraph == sourceAncestorGraph) {\n                edge.lca = targetAncestorGraph;\n                break;\n              }\n\n              if (targetAncestorGraph == this.rootGraph) {\n                break;\n              }\n\n              if (edge.lca != null) {\n                throw \"assert failed\";\n              }\n\n              edge.targetInLca = targetAncestorGraph.getParent();\n              targetAncestorGraph = edge.targetInLca.getOwner();\n            }\n\n            if (sourceAncestorGraph == this.rootGraph) {\n              break;\n            }\n\n            if (edge.lca == null) {\n              edge.sourceInLca = sourceAncestorGraph.getParent();\n              sourceAncestorGraph = edge.sourceInLca.getOwner();\n            }\n          }\n\n          if (edge.lca == null) {\n            throw \"assert failed\";\n          }\n        }\n      };\n\n      LGraphManager.prototype.calcLowestCommonAncestor = function (firstNode, secondNode) {\n        if (firstNode == secondNode) {\n          return firstNode.getOwner();\n        }\n\n        var firstOwnerGraph = firstNode.getOwner();\n\n        do {\n          if (firstOwnerGraph == null) {\n            break;\n          }\n\n          var secondOwnerGraph = secondNode.getOwner();\n\n          do {\n            if (secondOwnerGraph == null) {\n              break;\n            }\n\n            if (secondOwnerGraph == firstOwnerGraph) {\n              return secondOwnerGraph;\n            }\n\n            secondOwnerGraph = secondOwnerGraph.getParent().getOwner();\n          } while (true);\n\n          firstOwnerGraph = firstOwnerGraph.getParent().getOwner();\n        } while (true);\n\n        return firstOwnerGraph;\n      };\n\n      LGraphManager.prototype.calcInclusionTreeDepths = function (graph, depth) {\n        if (graph == null && depth == null) {\n          graph = this.rootGraph;\n          depth = 1;\n        }\n\n        var node;\n        var nodes = graph.getNodes();\n        var s = nodes.length;\n\n        for (var i = 0; i < s; i++) {\n          node = nodes[i];\n          node.inclusionTreeDepth = depth;\n\n          if (node.child != null) {\n            this.calcInclusionTreeDepths(node.child, depth + 1);\n          }\n        }\n      };\n\n      LGraphManager.prototype.includesInvalidEdge = function () {\n        var edge;\n        var s = this.edges.length;\n\n        for (var i = 0; i < s; i++) {\n          edge = this.edges[i];\n\n          if (this.isOneAncestorOfOther(edge.source, edge.target)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n\n      module.exports = LGraphManager;\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var LayoutConstants = __webpack_require__(0);\n\n      function FDLayoutConstants() {} //FDLayoutConstants inherits static props in LayoutConstants\n\n\n      for (var prop in LayoutConstants) {\n        FDLayoutConstants[prop] = LayoutConstants[prop];\n      }\n\n      FDLayoutConstants.MAX_ITERATIONS = 2500;\n      FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;\n      FDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;\n      FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500.0;\n      FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;\n      FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1.0;\n      FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;\n      FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;\n      FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;\n      FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;\n      FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;\n      FDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;\n      FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1000;\n      FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5000;\n      FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100.0;\n      FDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;\n      FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10.0;\n      FDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;\n      FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;\n      FDLayoutConstants.MIN_EDGE_LENGTH = 1;\n      FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;\n      module.exports = FDLayoutConstants;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       * This class maintains a list of static geometry related utility methods.\n       *\n       *\n       * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\n       */\n\n      var Point = __webpack_require__(12);\n\n      function IGeometry() {}\n      /**\n       * This method calculates *half* the amount in x and y directions of the two\n       * input rectangles needed to separate them keeping their respective\n       * positioning, and returns the result in the input array. An input\n       * separation buffer added to the amount in both directions. We assume that\n       * the two rectangles do intersect.\n       */\n\n\n      IGeometry.calcSeparationAmount = function (rectA, rectB, overlapAmount, separationBuffer) {\n        if (!rectA.intersects(rectB)) {\n          throw \"assert failed\";\n        }\n\n        var directions = new Array(2);\n        this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);\n        overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);\n        overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y); // update the overlapping amounts for the following cases:\n\n        if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {\n          /* Case x.1:\n          *\n          * rectA\n          * \t|                       |\n          * \t|        _________      |\n          * \t|        |       |      |\n          * \t|________|_______|______|\n          * \t\t\t |       |\n          *           |       |\n          *        rectB\n          */\n          overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());\n        } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {\n          /* Case x.2:\n          *\n          * rectB\n          * \t|                       |\n          * \t|        _________      |\n          * \t|        |       |      |\n          * \t|________|_______|______|\n          * \t\t\t |       |\n          *           |       |\n          *        rectA\n          */\n          overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());\n        }\n\n        if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {\n          /* Case y.1:\n           *          ________ rectA\n           *         |\n           *         |\n           *   ______|____  rectB\n           *         |    |\n           *         |    |\n           *   ______|____|\n           *         |\n           *         |\n           *         |________\n           *\n           */\n          overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());\n        } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {\n          /* Case y.2:\n          *          ________ rectB\n          *         |\n          *         |\n          *   ______|____  rectA\n          *         |    |\n          *         |    |\n          *   ______|____|\n          *         |\n          *         |\n          *         |________\n          *\n          */\n          overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());\n        } // find slope of the line passes two centers\n\n\n        var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX())); // if centers are overlapped\n\n        if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {\n          // assume the slope is 1 (45 degree)\n          slope = 1.0;\n        }\n\n        var moveByY = slope * overlapAmount[0];\n        var moveByX = overlapAmount[1] / slope;\n\n        if (overlapAmount[0] < moveByX) {\n          moveByX = overlapAmount[0];\n        } else {\n          moveByY = overlapAmount[1];\n        } // return half the amount so that if each rectangle is moved by these\n        // amounts in opposite directions, overlap will be resolved\n\n\n        overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);\n        overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);\n      };\n      /**\n       * This method decides the separation direction of overlapping nodes\n       *\n       * if directions[0] = -1, then rectA goes left\n       * if directions[0] = 1,  then rectA goes right\n       * if directions[1] = -1, then rectA goes up\n       * if directions[1] = 1,  then rectA goes down\n       */\n\n\n      IGeometry.decideDirectionsForOverlappingNodes = function (rectA, rectB, directions) {\n        if (rectA.getCenterX() < rectB.getCenterX()) {\n          directions[0] = -1;\n        } else {\n          directions[0] = 1;\n        }\n\n        if (rectA.getCenterY() < rectB.getCenterY()) {\n          directions[1] = -1;\n        } else {\n          directions[1] = 1;\n        }\n      };\n      /**\n       * This method calculates the intersection (clipping) points of the two\n       * input rectangles with line segment defined by the centers of these two\n       * rectangles. The clipping points are saved in the input double array and\n       * whether or not the two rectangles overlap is returned.\n       */\n\n\n      IGeometry.getIntersection2 = function (rectA, rectB, result) {\n        //result[0-1] will contain clipPoint of rectA, result[2-3] will contain clipPoint of rectB\n        var p1x = rectA.getCenterX();\n        var p1y = rectA.getCenterY();\n        var p2x = rectB.getCenterX();\n        var p2y = rectB.getCenterY(); //if two rectangles intersect, then clipping points are centers\n\n        if (rectA.intersects(rectB)) {\n          result[0] = p1x;\n          result[1] = p1y;\n          result[2] = p2x;\n          result[3] = p2y;\n          return true;\n        } //variables for rectA\n\n\n        var topLeftAx = rectA.getX();\n        var topLeftAy = rectA.getY();\n        var topRightAx = rectA.getRight();\n        var bottomLeftAx = rectA.getX();\n        var bottomLeftAy = rectA.getBottom();\n        var bottomRightAx = rectA.getRight();\n        var halfWidthA = rectA.getWidthHalf();\n        var halfHeightA = rectA.getHeightHalf(); //variables for rectB\n\n        var topLeftBx = rectB.getX();\n        var topLeftBy = rectB.getY();\n        var topRightBx = rectB.getRight();\n        var bottomLeftBx = rectB.getX();\n        var bottomLeftBy = rectB.getBottom();\n        var bottomRightBx = rectB.getRight();\n        var halfWidthB = rectB.getWidthHalf();\n        var halfHeightB = rectB.getHeightHalf(); //flag whether clipping points are found\n\n        var clipPointAFound = false;\n        var clipPointBFound = false; // line is vertical\n\n        if (p1x === p2x) {\n          if (p1y > p2y) {\n            result[0] = p1x;\n            result[1] = topLeftAy;\n            result[2] = p2x;\n            result[3] = bottomLeftBy;\n            return false;\n          } else if (p1y < p2y) {\n            result[0] = p1x;\n            result[1] = bottomLeftAy;\n            result[2] = p2x;\n            result[3] = topLeftBy;\n            return false;\n          } else {//not line, return null;\n          }\n        } // line is horizontal\n        else if (p1y === p2y) {\n          if (p1x > p2x) {\n            result[0] = topLeftAx;\n            result[1] = p1y;\n            result[2] = topRightBx;\n            result[3] = p2y;\n            return false;\n          } else if (p1x < p2x) {\n            result[0] = topRightAx;\n            result[1] = p1y;\n            result[2] = topLeftBx;\n            result[3] = p2y;\n            return false;\n          } else {//not valid line, return null;\n          }\n        } else {\n          //slopes of rectA's and rectB's diagonals\n          var slopeA = rectA.height / rectA.width;\n          var slopeB = rectB.height / rectB.width; //slope of line between center of rectA and center of rectB\n\n          var slopePrime = (p2y - p1y) / (p2x - p1x);\n          var cardinalDirectionA = void 0;\n          var cardinalDirectionB = void 0;\n          var tempPointAx = void 0;\n          var tempPointAy = void 0;\n          var tempPointBx = void 0;\n          var tempPointBy = void 0; //determine whether clipping point is the corner of nodeA\n\n          if (-slopeA === slopePrime) {\n            if (p1x > p2x) {\n              result[0] = bottomLeftAx;\n              result[1] = bottomLeftAy;\n              clipPointAFound = true;\n            } else {\n              result[0] = topRightAx;\n              result[1] = topLeftAy;\n              clipPointAFound = true;\n            }\n          } else if (slopeA === slopePrime) {\n            if (p1x > p2x) {\n              result[0] = topLeftAx;\n              result[1] = topLeftAy;\n              clipPointAFound = true;\n            } else {\n              result[0] = bottomRightAx;\n              result[1] = bottomLeftAy;\n              clipPointAFound = true;\n            }\n          } //determine whether clipping point is the corner of nodeB\n\n\n          if (-slopeB === slopePrime) {\n            if (p2x > p1x) {\n              result[2] = bottomLeftBx;\n              result[3] = bottomLeftBy;\n              clipPointBFound = true;\n            } else {\n              result[2] = topRightBx;\n              result[3] = topLeftBy;\n              clipPointBFound = true;\n            }\n          } else if (slopeB === slopePrime) {\n            if (p2x > p1x) {\n              result[2] = topLeftBx;\n              result[3] = topLeftBy;\n              clipPointBFound = true;\n            } else {\n              result[2] = bottomRightBx;\n              result[3] = bottomLeftBy;\n              clipPointBFound = true;\n            }\n          } //if both clipping points are corners\n\n\n          if (clipPointAFound && clipPointBFound) {\n            return false;\n          } //determine Cardinal Direction of rectangles\n\n\n          if (p1x > p2x) {\n            if (p1y > p2y) {\n              cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);\n              cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);\n            } else {\n              cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);\n              cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);\n            }\n          } else {\n            if (p1y > p2y) {\n              cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);\n              cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);\n            } else {\n              cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);\n              cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);\n            }\n          } //calculate clipping Point if it is not found before\n\n\n          if (!clipPointAFound) {\n            switch (cardinalDirectionA) {\n              case 1:\n                tempPointAy = topLeftAy;\n                tempPointAx = p1x + -halfHeightA / slopePrime;\n                result[0] = tempPointAx;\n                result[1] = tempPointAy;\n                break;\n\n              case 2:\n                tempPointAx = bottomRightAx;\n                tempPointAy = p1y + halfWidthA * slopePrime;\n                result[0] = tempPointAx;\n                result[1] = tempPointAy;\n                break;\n\n              case 3:\n                tempPointAy = bottomLeftAy;\n                tempPointAx = p1x + halfHeightA / slopePrime;\n                result[0] = tempPointAx;\n                result[1] = tempPointAy;\n                break;\n\n              case 4:\n                tempPointAx = bottomLeftAx;\n                tempPointAy = p1y + -halfWidthA * slopePrime;\n                result[0] = tempPointAx;\n                result[1] = tempPointAy;\n                break;\n            }\n          }\n\n          if (!clipPointBFound) {\n            switch (cardinalDirectionB) {\n              case 1:\n                tempPointBy = topLeftBy;\n                tempPointBx = p2x + -halfHeightB / slopePrime;\n                result[2] = tempPointBx;\n                result[3] = tempPointBy;\n                break;\n\n              case 2:\n                tempPointBx = bottomRightBx;\n                tempPointBy = p2y + halfWidthB * slopePrime;\n                result[2] = tempPointBx;\n                result[3] = tempPointBy;\n                break;\n\n              case 3:\n                tempPointBy = bottomLeftBy;\n                tempPointBx = p2x + halfHeightB / slopePrime;\n                result[2] = tempPointBx;\n                result[3] = tempPointBy;\n                break;\n\n              case 4:\n                tempPointBx = bottomLeftBx;\n                tempPointBy = p2y + -halfWidthB * slopePrime;\n                result[2] = tempPointBx;\n                result[3] = tempPointBy;\n                break;\n            }\n          }\n        }\n\n        return false;\n      };\n      /**\n       * This method returns in which cardinal direction does input point stays\n       * 1: North\n       * 2: East\n       * 3: South\n       * 4: West\n       */\n\n\n      IGeometry.getCardinalDirection = function (slope, slopePrime, line) {\n        if (slope > slopePrime) {\n          return line;\n        } else {\n          return 1 + line % 4;\n        }\n      };\n      /**\n       * This method calculates the intersection of the two lines defined by\n       * point pairs (s1,s2) and (f1,f2).\n       */\n\n\n      IGeometry.getIntersection = function (s1, s2, f1, f2) {\n        if (f2 == null) {\n          return this.getIntersection2(s1, s2, f1);\n        }\n\n        var x1 = s1.x;\n        var y1 = s1.y;\n        var x2 = s2.x;\n        var y2 = s2.y;\n        var x3 = f1.x;\n        var y3 = f1.y;\n        var x4 = f2.x;\n        var y4 = f2.y;\n        var x = void 0,\n            y = void 0; // intersection point\n\n        var a1 = void 0,\n            a2 = void 0,\n            b1 = void 0,\n            b2 = void 0,\n            c1 = void 0,\n            c2 = void 0; // coefficients of line eqns.\n\n        var denom = void 0;\n        a1 = y2 - y1;\n        b1 = x1 - x2;\n        c1 = x2 * y1 - x1 * y2; // { a1*x + b1*y + c1 = 0 is line 1 }\n\n        a2 = y4 - y3;\n        b2 = x3 - x4;\n        c2 = x4 * y3 - x3 * y4; // { a2*x + b2*y + c2 = 0 is line 2 }\n\n        denom = a1 * b2 - a2 * b1;\n\n        if (denom === 0) {\n          return null;\n        }\n\n        x = (b1 * c2 - b2 * c1) / denom;\n        y = (a2 * c1 - a1 * c2) / denom;\n        return new Point(x, y);\n      };\n      /**\n       * This method finds and returns the angle of the vector from the + x-axis\n       * in clockwise direction (compatible w/ Java coordinate system!).\n       */\n\n\n      IGeometry.angleOfVector = function (Cx, Cy, Nx, Ny) {\n        var C_angle = void 0;\n\n        if (Cx !== Nx) {\n          C_angle = Math.atan((Ny - Cy) / (Nx - Cx));\n\n          if (Nx < Cx) {\n            C_angle += Math.PI;\n          } else if (Ny < Cy) {\n            C_angle += this.TWO_PI;\n          }\n        } else if (Ny < Cy) {\n          C_angle = this.ONE_AND_HALF_PI; // 270 degrees\n        } else {\n          C_angle = this.HALF_PI; // 90 degrees\n        }\n\n        return C_angle;\n      };\n      /**\n       * This method checks whether the given two line segments (one with point\n       * p1 and p2, the other with point p3 and p4) intersect at a point other\n       * than these points.\n       */\n\n\n      IGeometry.doIntersect = function (p1, p2, p3, p4) {\n        var a = p1.x;\n        var b = p1.y;\n        var c = p2.x;\n        var d = p2.y;\n        var p = p3.x;\n        var q = p3.y;\n        var r = p4.x;\n        var s = p4.y;\n        var det = (c - a) * (s - q) - (r - p) * (d - b);\n\n        if (det === 0) {\n          return false;\n        } else {\n          var lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;\n          var gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;\n          return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;\n        }\n      }; // -----------------------------------------------------------------------------\n      // Section: Class Constants\n      // -----------------------------------------------------------------------------\n\n      /**\n       * Some useful pre-calculated constants\n       */\n\n\n      IGeometry.HALF_PI = 0.5 * Math.PI;\n      IGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;\n      IGeometry.TWO_PI = 2.0 * Math.PI;\n      IGeometry.THREE_PI = 3.0 * Math.PI;\n      module.exports = IGeometry;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function IMath() {}\n      /**\n       * This method returns the sign of the input value.\n       */\n\n\n      IMath.sign = function (value) {\n        if (value > 0) {\n          return 1;\n        } else if (value < 0) {\n          return -1;\n        } else {\n          return 0;\n        }\n      };\n\n      IMath.floor = function (value) {\n        return value < 0 ? Math.ceil(value) : Math.floor(value);\n      };\n\n      IMath.ceil = function (value) {\n        return value < 0 ? Math.floor(value) : Math.ceil(value);\n      };\n\n      module.exports = IMath;\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function Integer() {}\n\n      Integer.MAX_VALUE = 2147483647;\n      Integer.MIN_VALUE = -2147483648;\n      module.exports = Integer;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      var nodeFrom = function nodeFrom(value) {\n        return {\n          value: value,\n          next: null,\n          prev: null\n        };\n      };\n\n      var add = function add(prev, node, next, list) {\n        if (prev !== null) {\n          prev.next = node;\n        } else {\n          list.head = node;\n        }\n\n        if (next !== null) {\n          next.prev = node;\n        } else {\n          list.tail = node;\n        }\n\n        node.prev = prev;\n        node.next = next;\n        list.length++;\n        return node;\n      };\n\n      var _remove = function _remove(node, list) {\n        var prev = node.prev,\n            next = node.next;\n\n        if (prev !== null) {\n          prev.next = next;\n        } else {\n          list.head = next;\n        }\n\n        if (next !== null) {\n          next.prev = prev;\n        } else {\n          list.tail = prev;\n        }\n\n        node.prev = node.next = null;\n        list.length--;\n        return node;\n      };\n\n      var LinkedList = function () {\n        function LinkedList(vals) {\n          var _this = this;\n\n          _classCallCheck(this, LinkedList);\n\n          this.length = 0;\n          this.head = null;\n          this.tail = null;\n\n          if (vals != null) {\n            vals.forEach(function (v) {\n              return _this.push(v);\n            });\n          }\n        }\n\n        _createClass(LinkedList, [{\n          key: \"size\",\n          value: function size() {\n            return this.length;\n          }\n        }, {\n          key: \"insertBefore\",\n          value: function insertBefore(val, otherNode) {\n            return add(otherNode.prev, nodeFrom(val), otherNode, this);\n          }\n        }, {\n          key: \"insertAfter\",\n          value: function insertAfter(val, otherNode) {\n            return add(otherNode, nodeFrom(val), otherNode.next, this);\n          }\n        }, {\n          key: \"insertNodeBefore\",\n          value: function insertNodeBefore(newNode, otherNode) {\n            return add(otherNode.prev, newNode, otherNode, this);\n          }\n        }, {\n          key: \"insertNodeAfter\",\n          value: function insertNodeAfter(newNode, otherNode) {\n            return add(otherNode, newNode, otherNode.next, this);\n          }\n        }, {\n          key: \"push\",\n          value: function push(val) {\n            return add(this.tail, nodeFrom(val), null, this);\n          }\n        }, {\n          key: \"unshift\",\n          value: function unshift(val) {\n            return add(null, nodeFrom(val), this.head, this);\n          }\n        }, {\n          key: \"remove\",\n          value: function remove(node) {\n            return _remove(node, this);\n          }\n        }, {\n          key: \"pop\",\n          value: function pop() {\n            return _remove(this.tail, this).value;\n          }\n        }, {\n          key: \"popNode\",\n          value: function popNode() {\n            return _remove(this.tail, this);\n          }\n        }, {\n          key: \"shift\",\n          value: function shift() {\n            return _remove(this.head, this).value;\n          }\n        }, {\n          key: \"shiftNode\",\n          value: function shiftNode() {\n            return _remove(this.head, this);\n          }\n        }, {\n          key: \"get_object_at\",\n          value: function get_object_at(index) {\n            if (index <= this.length()) {\n              var i = 1;\n              var current = this.head;\n\n              while (i < index) {\n                current = current.next;\n                i++;\n              }\n\n              return current.value;\n            }\n          }\n        }, {\n          key: \"set_object_at\",\n          value: function set_object_at(index, value) {\n            if (index <= this.length()) {\n              var i = 1;\n              var current = this.head;\n\n              while (i < index) {\n                current = current.next;\n                i++;\n              }\n\n              current.value = value;\n            }\n          }\n        }]);\n\n        return LinkedList;\n      }();\n\n      module.exports = LinkedList;\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /*\r\n       *This class is the javascript implementation of the Point.java class in jdk\r\n       */\n\n      function Point(x, y, p) {\n        this.x = null;\n        this.y = null;\n\n        if (x == null && y == null && p == null) {\n          this.x = 0;\n          this.y = 0;\n        } else if (typeof x == 'number' && typeof y == 'number' && p == null) {\n          this.x = x;\n          this.y = y;\n        } else if (x.constructor.name == 'Point' && y == null && p == null) {\n          p = x;\n          this.x = p.x;\n          this.y = p.y;\n        }\n      }\n\n      Point.prototype.getX = function () {\n        return this.x;\n      };\n\n      Point.prototype.getY = function () {\n        return this.y;\n      };\n\n      Point.prototype.getLocation = function () {\n        return new Point(this.x, this.y);\n      };\n\n      Point.prototype.setLocation = function (x, y, p) {\n        if (x.constructor.name == 'Point' && y == null && p == null) {\n          p = x;\n          this.setLocation(p.x, p.y);\n        } else if (typeof x == 'number' && typeof y == 'number' && p == null) {\n          //if both parameters are integer just move (x,y) location\n          if (parseInt(x) == x && parseInt(y) == y) {\n            this.move(x, y);\n          } else {\n            this.x = Math.floor(x + 0.5);\n            this.y = Math.floor(y + 0.5);\n          }\n        }\n      };\n\n      Point.prototype.move = function (x, y) {\n        this.x = x;\n        this.y = y;\n      };\n\n      Point.prototype.translate = function (dx, dy) {\n        this.x += dx;\n        this.y += dy;\n      };\n\n      Point.prototype.equals = function (obj) {\n        if (obj.constructor.name == \"Point\") {\n          var pt = obj;\n          return this.x == pt.x && this.y == pt.y;\n        }\n\n        return this == obj;\n      };\n\n      Point.prototype.toString = function () {\n        return new Point().constructor.name + \"[x=\" + this.x + \",y=\" + this.y + \"]\";\n      };\n\n      module.exports = Point;\n      /***/\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function RectangleD(x, y, width, height) {\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n\n        if (x != null && y != null && width != null && height != null) {\n          this.x = x;\n          this.y = y;\n          this.width = width;\n          this.height = height;\n        }\n      }\n\n      RectangleD.prototype.getX = function () {\n        return this.x;\n      };\n\n      RectangleD.prototype.setX = function (x) {\n        this.x = x;\n      };\n\n      RectangleD.prototype.getY = function () {\n        return this.y;\n      };\n\n      RectangleD.prototype.setY = function (y) {\n        this.y = y;\n      };\n\n      RectangleD.prototype.getWidth = function () {\n        return this.width;\n      };\n\n      RectangleD.prototype.setWidth = function (width) {\n        this.width = width;\n      };\n\n      RectangleD.prototype.getHeight = function () {\n        return this.height;\n      };\n\n      RectangleD.prototype.setHeight = function (height) {\n        this.height = height;\n      };\n\n      RectangleD.prototype.getRight = function () {\n        return this.x + this.width;\n      };\n\n      RectangleD.prototype.getBottom = function () {\n        return this.y + this.height;\n      };\n\n      RectangleD.prototype.intersects = function (a) {\n        if (this.getRight() < a.x) {\n          return false;\n        }\n\n        if (this.getBottom() < a.y) {\n          return false;\n        }\n\n        if (a.getRight() < this.x) {\n          return false;\n        }\n\n        if (a.getBottom() < this.y) {\n          return false;\n        }\n\n        return true;\n      };\n\n      RectangleD.prototype.getCenterX = function () {\n        return this.x + this.width / 2;\n      };\n\n      RectangleD.prototype.getMinX = function () {\n        return this.getX();\n      };\n\n      RectangleD.prototype.getMaxX = function () {\n        return this.getX() + this.width;\n      };\n\n      RectangleD.prototype.getCenterY = function () {\n        return this.y + this.height / 2;\n      };\n\n      RectangleD.prototype.getMinY = function () {\n        return this.getY();\n      };\n\n      RectangleD.prototype.getMaxY = function () {\n        return this.getY() + this.height;\n      };\n\n      RectangleD.prototype.getWidthHalf = function () {\n        return this.width / 2;\n      };\n\n      RectangleD.prototype.getHeightHalf = function () {\n        return this.height / 2;\n      };\n\n      module.exports = RectangleD;\n      /***/\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      function UniqueIDGeneretor() {}\n\n      UniqueIDGeneretor.lastID = 0;\n\n      UniqueIDGeneretor.createID = function (obj) {\n        if (UniqueIDGeneretor.isPrimitive(obj)) {\n          return obj;\n        }\n\n        if (obj.uniqueID != null) {\n          return obj.uniqueID;\n        }\n\n        obj.uniqueID = UniqueIDGeneretor.getString();\n        UniqueIDGeneretor.lastID++;\n        return obj.uniqueID;\n      };\n\n      UniqueIDGeneretor.getString = function (id) {\n        if (id == null) id = UniqueIDGeneretor.lastID;\n        return \"Object#\" + id + \"\";\n      };\n\n      UniqueIDGeneretor.isPrimitive = function (arg) {\n        var type = typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg);\n        return arg == null || type != \"object\" && type != \"function\";\n      };\n\n      module.exports = UniqueIDGeneretor;\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _toConsumableArray(arr) {\n        if (Array.isArray(arr)) {\n          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n            arr2[i] = arr[i];\n          }\n\n          return arr2;\n        } else {\n          return Array.from(arr);\n        }\n      }\n\n      var LayoutConstants = __webpack_require__(0);\n\n      var LGraphManager = __webpack_require__(6);\n\n      var LNode = __webpack_require__(3);\n\n      var LEdge = __webpack_require__(1);\n\n      var LGraph = __webpack_require__(5);\n\n      var PointD = __webpack_require__(4);\n\n      var Transform = __webpack_require__(17);\n\n      var Emitter = __webpack_require__(27);\n\n      function Layout(isRemoteUse) {\n        Emitter.call(this); //Layout Quality: 0:draft, 1:default, 2:proof\n\n        this.layoutQuality = LayoutConstants.QUALITY; //Whether layout should create bendpoints as needed or not\n\n        this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED; //Whether layout should be incremental or not\n\n        this.incremental = LayoutConstants.DEFAULT_INCREMENTAL; //Whether we animate from before to after layout node positions\n\n        this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT; //Whether we animate the layout process or not\n\n        this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT; //Number iterations that should be done between two successive animations\n\n        this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n        /**\r\n         * Whether or not leaf nodes (non-compound nodes) are of uniform sizes. When\r\n         * they are, both spring and repulsion forces between two leaf nodes can be\r\n         * calculated without the expensive clipping point calculations, resulting\r\n         * in major speed-up.\r\n         */\n\n        this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n        /**\r\n         * This is used for creation of bendpoints by using dummy nodes and edges.\r\n         * Maps an LEdge to its dummy bendpoint path.\r\n         */\n\n        this.edgeToDummyNodes = new Map();\n        this.graphManager = new LGraphManager(this);\n        this.isLayoutFinished = false;\n        this.isSubLayout = false;\n        this.isRemoteUse = false;\n\n        if (isRemoteUse != null) {\n          this.isRemoteUse = isRemoteUse;\n        }\n      }\n\n      Layout.RANDOM_SEED = 1;\n      Layout.prototype = Object.create(Emitter.prototype);\n\n      Layout.prototype.getGraphManager = function () {\n        return this.graphManager;\n      };\n\n      Layout.prototype.getAllNodes = function () {\n        return this.graphManager.getAllNodes();\n      };\n\n      Layout.prototype.getAllEdges = function () {\n        return this.graphManager.getAllEdges();\n      };\n\n      Layout.prototype.getAllNodesToApplyGravitation = function () {\n        return this.graphManager.getAllNodesToApplyGravitation();\n      };\n\n      Layout.prototype.newGraphManager = function () {\n        var gm = new LGraphManager(this);\n        this.graphManager = gm;\n        return gm;\n      };\n\n      Layout.prototype.newGraph = function (vGraph) {\n        return new LGraph(null, this.graphManager, vGraph);\n      };\n\n      Layout.prototype.newNode = function (vNode) {\n        return new LNode(this.graphManager, vNode);\n      };\n\n      Layout.prototype.newEdge = function (vEdge) {\n        return new LEdge(null, null, vEdge);\n      };\n\n      Layout.prototype.checkLayoutSuccess = function () {\n        return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();\n      };\n\n      Layout.prototype.runLayout = function () {\n        this.isLayoutFinished = false;\n\n        if (this.tilingPreLayout) {\n          this.tilingPreLayout();\n        }\n\n        this.initParameters();\n        var isLayoutSuccessfull;\n\n        if (this.checkLayoutSuccess()) {\n          isLayoutSuccessfull = false;\n        } else {\n          isLayoutSuccessfull = this.layout();\n        }\n\n        if (LayoutConstants.ANIMATE === 'during') {\n          // If this is a 'during' layout animation. Layout is not finished yet. \n          // We need to perform these in index.js when layout is really finished.\n          return false;\n        }\n\n        if (isLayoutSuccessfull) {\n          if (!this.isSubLayout) {\n            this.doPostLayout();\n          }\n        }\n\n        if (this.tilingPostLayout) {\n          this.tilingPostLayout();\n        }\n\n        this.isLayoutFinished = true;\n        return isLayoutSuccessfull;\n      };\n      /**\r\n       * This method performs the operations required after layout.\r\n       */\n\n\n      Layout.prototype.doPostLayout = function () {\n        //assert !isSubLayout : \"Should not be called on sub-layout!\";\n        // Propagate geometric changes to v-level objects\n        if (!this.incremental) {\n          this.transform();\n        }\n\n        this.update();\n      };\n      /**\r\n       * This method updates the geometry of the target graph according to\r\n       * calculated layout.\r\n       */\n\n\n      Layout.prototype.update2 = function () {\n        // update bend points\n        if (this.createBendsAsNeeded) {\n          this.createBendpointsFromDummyNodes(); // reset all edges, since the topology has changed\n\n          this.graphManager.resetAllEdges();\n        } // perform edge, node and root updates if layout is not called\n        // remotely\n\n\n        if (!this.isRemoteUse) {\n          // update all edges\n          var edge;\n          var allEdges = this.graphManager.getAllEdges();\n\n          for (var i = 0; i < allEdges.length; i++) {\n            edge = allEdges[i]; //      this.update(edge);\n          } // recursively update nodes\n\n\n          var node;\n          var nodes = this.graphManager.getRoot().getNodes();\n\n          for (var i = 0; i < nodes.length; i++) {\n            node = nodes[i]; //      this.update(node);\n          } // update root graph\n\n\n          this.update(this.graphManager.getRoot());\n        }\n      };\n\n      Layout.prototype.update = function (obj) {\n        if (obj == null) {\n          this.update2();\n        } else if (obj instanceof LNode) {\n          var node = obj;\n\n          if (node.getChild() != null) {\n            // since node is compound, recursively update child nodes\n            var nodes = node.getChild().getNodes();\n\n            for (var i = 0; i < nodes.length; i++) {\n              update(nodes[i]);\n            }\n          } // if the l-level node is associated with a v-level graph object,\n          // then it is assumed that the v-level node implements the\n          // interface Updatable.\n\n\n          if (node.vGraphObject != null) {\n            // cast to Updatable without any type check\n            var vNode = node.vGraphObject; // call the update method of the interface\n\n            vNode.update(node);\n          }\n        } else if (obj instanceof LEdge) {\n          var edge = obj; // if the l-level edge is associated with a v-level graph object,\n          // then it is assumed that the v-level edge implements the\n          // interface Updatable.\n\n          if (edge.vGraphObject != null) {\n            // cast to Updatable without any type check\n            var vEdge = edge.vGraphObject; // call the update method of the interface\n\n            vEdge.update(edge);\n          }\n        } else if (obj instanceof LGraph) {\n          var graph = obj; // if the l-level graph is associated with a v-level graph object,\n          // then it is assumed that the v-level object implements the\n          // interface Updatable.\n\n          if (graph.vGraphObject != null) {\n            // cast to Updatable without any type check\n            var vGraph = graph.vGraphObject; // call the update method of the interface\n\n            vGraph.update(graph);\n          }\n        }\n      };\n      /**\r\n       * This method is used to set all layout parameters to default values\r\n       * determined at compile time.\r\n       */\n\n\n      Layout.prototype.initParameters = function () {\n        if (!this.isSubLayout) {\n          this.layoutQuality = LayoutConstants.QUALITY;\n          this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\n          this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n          this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\n          this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\n          this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n          this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n        }\n\n        if (this.animationDuringLayout) {\n          this.animationOnLayout = false;\n        }\n      };\n\n      Layout.prototype.transform = function (newLeftTop) {\n        if (newLeftTop == undefined) {\n          this.transform(new PointD(0, 0));\n        } else {\n          // create a transformation object (from Eclipse to layout). When an\n          // inverse transform is applied, we get upper-left coordinate of the\n          // drawing or the root graph at given input coordinate (some margins\n          // already included in calculation of left-top).\n          var trans = new Transform();\n          var leftTop = this.graphManager.getRoot().updateLeftTop();\n\n          if (leftTop != null) {\n            trans.setWorldOrgX(newLeftTop.x);\n            trans.setWorldOrgY(newLeftTop.y);\n            trans.setDeviceOrgX(leftTop.x);\n            trans.setDeviceOrgY(leftTop.y);\n            var nodes = this.getAllNodes();\n            var node;\n\n            for (var i = 0; i < nodes.length; i++) {\n              node = nodes[i];\n              node.transform(trans);\n            }\n          }\n        }\n      };\n\n      Layout.prototype.positionNodesRandomly = function (graph) {\n        if (graph == undefined) {\n          //assert !this.incremental;\n          this.positionNodesRandomly(this.getGraphManager().getRoot());\n          this.getGraphManager().getRoot().updateBounds(true);\n        } else {\n          var lNode;\n          var childGraph;\n          var nodes = graph.getNodes();\n\n          for (var i = 0; i < nodes.length; i++) {\n            lNode = nodes[i];\n            childGraph = lNode.getChild();\n\n            if (childGraph == null) {\n              lNode.scatter();\n            } else if (childGraph.getNodes().length == 0) {\n              lNode.scatter();\n            } else {\n              this.positionNodesRandomly(childGraph);\n              lNode.updateBounds();\n            }\n          }\n        }\n      };\n      /**\r\n       * This method returns a list of trees where each tree is represented as a\r\n       * list of l-nodes. The method returns a list of size 0 when:\r\n       * - The graph is not flat or\r\n       * - One of the component(s) of the graph is not a tree.\r\n       */\n\n\n      Layout.prototype.getFlatForest = function () {\n        var flatForest = [];\n        var isForest = true; // Quick reference for all nodes in the graph manager associated with\n        // this layout. The list should not be changed.\n\n        var allNodes = this.graphManager.getRoot().getNodes(); // First be sure that the graph is flat\n\n        var isFlat = true;\n\n        for (var i = 0; i < allNodes.length; i++) {\n          if (allNodes[i].getChild() != null) {\n            isFlat = false;\n          }\n        } // Return empty forest if the graph is not flat.\n\n\n        if (!isFlat) {\n          return flatForest;\n        } // Run BFS for each component of the graph.\n\n\n        var visited = new Set();\n        var toBeVisited = [];\n        var parents = new Map();\n        var unProcessedNodes = [];\n        unProcessedNodes = unProcessedNodes.concat(allNodes); // Each iteration of this loop finds a component of the graph and\n        // decides whether it is a tree or not. If it is a tree, adds it to the\n        // forest and continued with the next component.\n\n        while (unProcessedNodes.length > 0 && isForest) {\n          toBeVisited.push(unProcessedNodes[0]); // Start the BFS. Each iteration of this loop visits a node in a\n          // BFS manner.\n\n          while (toBeVisited.length > 0 && isForest) {\n            //pool operation\n            var currentNode = toBeVisited[0];\n            toBeVisited.splice(0, 1);\n            visited.add(currentNode); // Traverse all neighbors of this node\n\n            var neighborEdges = currentNode.getEdges();\n\n            for (var i = 0; i < neighborEdges.length; i++) {\n              var currentNeighbor = neighborEdges[i].getOtherEnd(currentNode); // If BFS is not growing from this neighbor.\n\n              if (parents.get(currentNode) != currentNeighbor) {\n                // We haven't previously visited this neighbor.\n                if (!visited.has(currentNeighbor)) {\n                  toBeVisited.push(currentNeighbor);\n                  parents.set(currentNeighbor, currentNode);\n                } // Since we have previously visited this neighbor and\n                // this neighbor is not parent of currentNode, given\n                // graph contains a component that is not tree, hence\n                // it is not a forest.\n                else {\n                  isForest = false;\n                  break;\n                }\n              }\n            }\n          } // The graph contains a component that is not a tree. Empty\n          // previously found trees. The method will end.\n\n\n          if (!isForest) {\n            flatForest = [];\n          } // Save currently visited nodes as a tree in our forest. Reset\n          // visited and parents lists. Continue with the next component of\n          // the graph, if any.\n          else {\n            var temp = [].concat(_toConsumableArray(visited));\n            flatForest.push(temp); //flatForest = flatForest.concat(temp);\n            //unProcessedNodes.removeAll(visited);\n\n            for (var i = 0; i < temp.length; i++) {\n              var value = temp[i];\n              var index = unProcessedNodes.indexOf(value);\n\n              if (index > -1) {\n                unProcessedNodes.splice(index, 1);\n              }\n            }\n\n            visited = new Set();\n            parents = new Map();\n          }\n        }\n\n        return flatForest;\n      };\n      /**\r\n       * This method creates dummy nodes (an l-level node with minimal dimensions)\r\n       * for the given edge (one per bendpoint). The existing l-level structure\r\n       * is updated accordingly.\r\n       */\n\n\n      Layout.prototype.createDummyNodesForBendpoints = function (edge) {\n        var dummyNodes = [];\n        var prev = edge.source;\n        var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);\n\n        for (var i = 0; i < edge.bendpoints.length; i++) {\n          // create new dummy node\n          var dummyNode = this.newNode(null);\n          dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));\n          graph.add(dummyNode); // create new dummy edge between prev and dummy node\n\n          var dummyEdge = this.newEdge(null);\n          this.graphManager.add(dummyEdge, prev, dummyNode);\n          dummyNodes.add(dummyNode);\n          prev = dummyNode;\n        }\n\n        var dummyEdge = this.newEdge(null);\n        this.graphManager.add(dummyEdge, prev, edge.target);\n        this.edgeToDummyNodes.set(edge, dummyNodes); // remove real edge from graph manager if it is inter-graph\n\n        if (edge.isInterGraph()) {\n          this.graphManager.remove(edge);\n        } // else, remove the edge from the current graph\n        else {\n          graph.remove(edge);\n        }\n\n        return dummyNodes;\n      };\n      /**\r\n       * This method creates bendpoints for edges from the dummy nodes\r\n       * at l-level.\r\n       */\n\n\n      Layout.prototype.createBendpointsFromDummyNodes = function () {\n        var edges = [];\n        edges = edges.concat(this.graphManager.getAllEdges());\n        edges = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges);\n\n        for (var k = 0; k < edges.length; k++) {\n          var lEdge = edges[k];\n\n          if (lEdge.bendpoints.length > 0) {\n            var path = this.edgeToDummyNodes.get(lEdge);\n\n            for (var i = 0; i < path.length; i++) {\n              var dummyNode = path[i];\n              var p = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY()); // update bendpoint's location according to dummy node\n\n              var ebp = lEdge.bendpoints.get(i);\n              ebp.x = p.x;\n              ebp.y = p.y; // remove the dummy node, dummy edges incident with this\n              // dummy node is also removed (within the remove method)\n\n              dummyNode.getOwner().remove(dummyNode);\n            } // add the real edge to graph\n\n\n            this.graphManager.add(lEdge, lEdge.source, lEdge.target);\n          }\n        }\n      };\n\n      Layout.transform = function (sliderValue, defaultValue, minDiv, maxMul) {\n        if (minDiv != undefined && maxMul != undefined) {\n          var value = defaultValue;\n\n          if (sliderValue <= 50) {\n            var minValue = defaultValue / minDiv;\n            value -= (defaultValue - minValue) / 50 * (50 - sliderValue);\n          } else {\n            var maxValue = defaultValue * maxMul;\n            value += (maxValue - defaultValue) / 50 * (sliderValue - 50);\n          }\n\n          return value;\n        } else {\n          var a, b;\n\n          if (sliderValue <= 50) {\n            a = 9.0 * defaultValue / 500.0;\n            b = defaultValue / 10.0;\n          } else {\n            a = 9.0 * defaultValue / 50.0;\n            b = -8 * defaultValue;\n          }\n\n          return a * sliderValue + b;\n        }\n      };\n      /**\r\n       * This method finds and returns the center of the given nodes, assuming\r\n       * that the given nodes form a tree in themselves.\r\n       */\n\n\n      Layout.findCenterOfTree = function (nodes) {\n        var list = [];\n        list = list.concat(nodes);\n        var removedNodes = [];\n        var remainingDegrees = new Map();\n        var foundCenter = false;\n        var centerNode = null;\n\n        if (list.length == 1 || list.length == 2) {\n          foundCenter = true;\n          centerNode = list[0];\n        }\n\n        for (var i = 0; i < list.length; i++) {\n          var node = list[i];\n          var degree = node.getNeighborsList().size;\n          remainingDegrees.set(node, node.getNeighborsList().size);\n\n          if (degree == 1) {\n            removedNodes.push(node);\n          }\n        }\n\n        var tempList = [];\n        tempList = tempList.concat(removedNodes);\n\n        while (!foundCenter) {\n          var tempList2 = [];\n          tempList2 = tempList2.concat(tempList);\n          tempList = [];\n\n          for (var i = 0; i < list.length; i++) {\n            var node = list[i];\n            var index = list.indexOf(node);\n\n            if (index >= 0) {\n              list.splice(index, 1);\n            }\n\n            var neighbours = node.getNeighborsList();\n            neighbours.forEach(function (neighbour) {\n              if (removedNodes.indexOf(neighbour) < 0) {\n                var otherDegree = remainingDegrees.get(neighbour);\n                var newDegree = otherDegree - 1;\n\n                if (newDegree == 1) {\n                  tempList.push(neighbour);\n                }\n\n                remainingDegrees.set(neighbour, newDegree);\n              }\n            });\n          }\n\n          removedNodes = removedNodes.concat(tempList);\n\n          if (list.length == 1 || list.length == 2) {\n            foundCenter = true;\n            centerNode = list[0];\n          }\n        }\n\n        return centerNode;\n      };\n      /**\r\n       * During the coarsening process, this layout may be referenced by two graph managers\r\n       * this setter function grants access to change the currently being used graph manager\r\n       */\n\n\n      Layout.prototype.setGraphManager = function (gm) {\n        this.graphManager = gm;\n      };\n\n      module.exports = Layout;\n      /***/\n    },\n    /* 16 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function RandomSeed() {} // adapted from: https://stackoverflow.com/a/19303725\n\n\n      RandomSeed.seed = 1;\n      RandomSeed.x = 0;\n\n      RandomSeed.nextDouble = function () {\n        RandomSeed.x = Math.sin(RandomSeed.seed++) * 10000;\n        return RandomSeed.x - Math.floor(RandomSeed.x);\n      };\n\n      module.exports = RandomSeed;\n      /***/\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var PointD = __webpack_require__(4);\n\n      function Transform(x, y) {\n        this.lworldOrgX = 0.0;\n        this.lworldOrgY = 0.0;\n        this.ldeviceOrgX = 0.0;\n        this.ldeviceOrgY = 0.0;\n        this.lworldExtX = 1.0;\n        this.lworldExtY = 1.0;\n        this.ldeviceExtX = 1.0;\n        this.ldeviceExtY = 1.0;\n      }\n\n      Transform.prototype.getWorldOrgX = function () {\n        return this.lworldOrgX;\n      };\n\n      Transform.prototype.setWorldOrgX = function (wox) {\n        this.lworldOrgX = wox;\n      };\n\n      Transform.prototype.getWorldOrgY = function () {\n        return this.lworldOrgY;\n      };\n\n      Transform.prototype.setWorldOrgY = function (woy) {\n        this.lworldOrgY = woy;\n      };\n\n      Transform.prototype.getWorldExtX = function () {\n        return this.lworldExtX;\n      };\n\n      Transform.prototype.setWorldExtX = function (wex) {\n        this.lworldExtX = wex;\n      };\n\n      Transform.prototype.getWorldExtY = function () {\n        return this.lworldExtY;\n      };\n\n      Transform.prototype.setWorldExtY = function (wey) {\n        this.lworldExtY = wey;\n      };\n      /* Device related */\n\n\n      Transform.prototype.getDeviceOrgX = function () {\n        return this.ldeviceOrgX;\n      };\n\n      Transform.prototype.setDeviceOrgX = function (dox) {\n        this.ldeviceOrgX = dox;\n      };\n\n      Transform.prototype.getDeviceOrgY = function () {\n        return this.ldeviceOrgY;\n      };\n\n      Transform.prototype.setDeviceOrgY = function (doy) {\n        this.ldeviceOrgY = doy;\n      };\n\n      Transform.prototype.getDeviceExtX = function () {\n        return this.ldeviceExtX;\n      };\n\n      Transform.prototype.setDeviceExtX = function (dex) {\n        this.ldeviceExtX = dex;\n      };\n\n      Transform.prototype.getDeviceExtY = function () {\n        return this.ldeviceExtY;\n      };\n\n      Transform.prototype.setDeviceExtY = function (dey) {\n        this.ldeviceExtY = dey;\n      };\n\n      Transform.prototype.transformX = function (x) {\n        var xDevice = 0.0;\n        var worldExtX = this.lworldExtX;\n\n        if (worldExtX != 0.0) {\n          xDevice = this.ldeviceOrgX + (x - this.lworldOrgX) * this.ldeviceExtX / worldExtX;\n        }\n\n        return xDevice;\n      };\n\n      Transform.prototype.transformY = function (y) {\n        var yDevice = 0.0;\n        var worldExtY = this.lworldExtY;\n\n        if (worldExtY != 0.0) {\n          yDevice = this.ldeviceOrgY + (y - this.lworldOrgY) * this.ldeviceExtY / worldExtY;\n        }\n\n        return yDevice;\n      };\n\n      Transform.prototype.inverseTransformX = function (x) {\n        var xWorld = 0.0;\n        var deviceExtX = this.ldeviceExtX;\n\n        if (deviceExtX != 0.0) {\n          xWorld = this.lworldOrgX + (x - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;\n        }\n\n        return xWorld;\n      };\n\n      Transform.prototype.inverseTransformY = function (y) {\n        var yWorld = 0.0;\n        var deviceExtY = this.ldeviceExtY;\n\n        if (deviceExtY != 0.0) {\n          yWorld = this.lworldOrgY + (y - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;\n        }\n\n        return yWorld;\n      };\n\n      Transform.prototype.inverseTransformPoint = function (inPoint) {\n        var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));\n        return outPoint;\n      };\n\n      module.exports = Transform;\n      /***/\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _toConsumableArray(arr) {\n        if (Array.isArray(arr)) {\n          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n            arr2[i] = arr[i];\n          }\n\n          return arr2;\n        } else {\n          return Array.from(arr);\n        }\n      }\n\n      var Layout = __webpack_require__(15);\n\n      var FDLayoutConstants = __webpack_require__(7);\n\n      var LayoutConstants = __webpack_require__(0);\n\n      var IGeometry = __webpack_require__(8);\n\n      var IMath = __webpack_require__(9);\n\n      function FDLayout() {\n        Layout.call(this);\n        this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n        this.idealEdgeLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n        this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\n        this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\n        this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n        this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n        this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n        this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n        this.displacementThresholdPerNode = 3.0 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;\n        this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n        this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n        this.totalDisplacement = 0.0;\n        this.oldTotalDisplacement = 0.0;\n        this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;\n      }\n\n      FDLayout.prototype = Object.create(Layout.prototype);\n\n      for (var prop in Layout) {\n        FDLayout[prop] = Layout[prop];\n      }\n\n      FDLayout.prototype.initParameters = function () {\n        Layout.prototype.initParameters.call(this, arguments);\n        this.totalIterations = 0;\n        this.notAnimatedIterations = 0;\n        this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;\n        this.grid = [];\n      };\n\n      FDLayout.prototype.calcIdealEdgeLengths = function () {\n        var edge;\n        var lcaDepth;\n        var source;\n        var target;\n        var sizeOfSourceInLca;\n        var sizeOfTargetInLca;\n        var allEdges = this.getGraphManager().getAllEdges();\n\n        for (var i = 0; i < allEdges.length; i++) {\n          edge = allEdges[i];\n          edge.idealLength = this.idealEdgeLength;\n\n          if (edge.isInterGraph) {\n            source = edge.getSource();\n            target = edge.getTarget();\n            sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();\n            sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();\n\n            if (this.useSmartIdealEdgeLengthCalculation) {\n              edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;\n            }\n\n            lcaDepth = edge.getLca().getInclusionTreeDepth();\n            edge.idealLength += FDLayoutConstants.DEFAULT_EDGE_LENGTH * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);\n          }\n        }\n      };\n\n      FDLayout.prototype.initSpringEmbedder = function () {\n        var s = this.getAllNodes().length;\n\n        if (this.incremental) {\n          if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n            this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n          }\n\n          this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;\n        } else {\n          if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n            this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1.0 - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n          } else {\n            this.coolingFactor = 1.0;\n          }\n\n          this.initialCoolingFactor = this.coolingFactor;\n          this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;\n        }\n\n        this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);\n        this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;\n        this.repulsionRange = this.calcRepulsionRange();\n      };\n\n      FDLayout.prototype.calcSpringForces = function () {\n        var lEdges = this.getAllEdges();\n        var edge;\n\n        for (var i = 0; i < lEdges.length; i++) {\n          edge = lEdges[i];\n          this.calcSpringForce(edge, edge.idealLength);\n        }\n      };\n\n      FDLayout.prototype.calcRepulsionForces = function () {\n        var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var i, j;\n        var nodeA, nodeB;\n        var lNodes = this.getAllNodes();\n        var processedNodeSet;\n\n        if (this.useFRGridVariant) {\n          if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {\n            this.updateGrid();\n          }\n\n          processedNodeSet = new Set(); // calculate repulsion forces between each nodes and its surrounding\n\n          for (i = 0; i < lNodes.length; i++) {\n            nodeA = lNodes[i];\n            this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);\n            processedNodeSet.add(nodeA);\n          }\n        } else {\n          for (i = 0; i < lNodes.length; i++) {\n            nodeA = lNodes[i];\n\n            for (j = i + 1; j < lNodes.length; j++) {\n              nodeB = lNodes[j]; // If both nodes are not members of the same graph, skip.\n\n              if (nodeA.getOwner() != nodeB.getOwner()) {\n                continue;\n              }\n\n              this.calcRepulsionForce(nodeA, nodeB);\n            }\n          }\n        }\n      };\n\n      FDLayout.prototype.calcGravitationalForces = function () {\n        var node;\n        var lNodes = this.getAllNodesToApplyGravitation();\n\n        for (var i = 0; i < lNodes.length; i++) {\n          node = lNodes[i];\n          this.calcGravitationalForce(node);\n        }\n      };\n\n      FDLayout.prototype.moveNodes = function () {\n        var lNodes = this.getAllNodes();\n        var node;\n\n        for (var i = 0; i < lNodes.length; i++) {\n          node = lNodes[i];\n          node.move();\n        }\n      };\n\n      FDLayout.prototype.calcSpringForce = function (edge, idealLength) {\n        var sourceNode = edge.getSource();\n        var targetNode = edge.getTarget();\n        var length;\n        var springForce;\n        var springForceX;\n        var springForceY; // Update edge length\n\n        if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {\n          edge.updateLengthSimple();\n        } else {\n          edge.updateLength();\n\n          if (edge.isOverlapingSourceAndTarget) {\n            return;\n          }\n        }\n\n        length = edge.getLength();\n        if (length == 0) return; // Calculate spring forces\n\n        springForce = this.springConstant * (length - idealLength); // Project force onto x and y axes\n\n        springForceX = springForce * (edge.lengthX / length);\n        springForceY = springForce * (edge.lengthY / length); // Apply forces on the end nodes\n\n        sourceNode.springForceX += springForceX;\n        sourceNode.springForceY += springForceY;\n        targetNode.springForceX -= springForceX;\n        targetNode.springForceY -= springForceY;\n      };\n\n      FDLayout.prototype.calcRepulsionForce = function (nodeA, nodeB) {\n        var rectA = nodeA.getRect();\n        var rectB = nodeB.getRect();\n        var overlapAmount = new Array(2);\n        var clipPoints = new Array(4);\n        var distanceX;\n        var distanceY;\n        var distanceSquared;\n        var distance;\n        var repulsionForce;\n        var repulsionForceX;\n        var repulsionForceY;\n\n        if (rectA.intersects(rectB)) // two nodes overlap\n          {\n            // calculate separation amount in x and y directions\n            IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2.0);\n            repulsionForceX = 2 * overlapAmount[0];\n            repulsionForceY = 2 * overlapAmount[1];\n            var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren); // Apply forces on the two nodes\n\n            nodeA.repulsionForceX -= childrenConstant * repulsionForceX;\n            nodeA.repulsionForceY -= childrenConstant * repulsionForceY;\n            nodeB.repulsionForceX += childrenConstant * repulsionForceX;\n            nodeB.repulsionForceY += childrenConstant * repulsionForceY;\n          } else // no overlap\n          {\n            // calculate distance\n            if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) // simply base repulsion on distance of node centers\n              {\n                distanceX = rectB.getCenterX() - rectA.getCenterX();\n                distanceY = rectB.getCenterY() - rectA.getCenterY();\n              } else // use clipping points\n              {\n                IGeometry.getIntersection(rectA, rectB, clipPoints);\n                distanceX = clipPoints[2] - clipPoints[0];\n                distanceY = clipPoints[3] - clipPoints[1];\n              } // No repulsion range. FR grid variant should take care of this.\n\n\n            if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {\n              distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;\n            }\n\n            if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {\n              distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;\n            }\n\n            distanceSquared = distanceX * distanceX + distanceY * distanceY;\n            distance = Math.sqrt(distanceSquared);\n            repulsionForce = this.repulsionConstant * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared; // Project force onto x and y axes\n\n            repulsionForceX = repulsionForce * distanceX / distance;\n            repulsionForceY = repulsionForce * distanceY / distance; // Apply forces on the two nodes    \n\n            nodeA.repulsionForceX -= repulsionForceX;\n            nodeA.repulsionForceY -= repulsionForceY;\n            nodeB.repulsionForceX += repulsionForceX;\n            nodeB.repulsionForceY += repulsionForceY;\n          }\n      };\n\n      FDLayout.prototype.calcGravitationalForce = function (node) {\n        var ownerGraph;\n        var ownerCenterX;\n        var ownerCenterY;\n        var distanceX;\n        var distanceY;\n        var absDistanceX;\n        var absDistanceY;\n        var estimatedSize;\n        ownerGraph = node.getOwner();\n        ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;\n        ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;\n        distanceX = node.getCenterX() - ownerCenterX;\n        distanceY = node.getCenterY() - ownerCenterY;\n        absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;\n        absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;\n\n        if (node.getOwner() == this.graphManager.getRoot()) // in the root graph\n          {\n            estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;\n\n            if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n              node.gravitationForceX = -this.gravityConstant * distanceX;\n              node.gravitationForceY = -this.gravityConstant * distanceY;\n            }\n          } else // inside a compound\n          {\n            estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;\n\n            if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n              node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;\n              node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;\n            }\n          }\n      };\n\n      FDLayout.prototype.isConverged = function () {\n        var converged;\n        var oscilating = false;\n\n        if (this.totalIterations > this.maxIterations / 3) {\n          oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;\n        }\n\n        converged = this.totalDisplacement < this.totalDisplacementThreshold;\n        this.oldTotalDisplacement = this.totalDisplacement;\n        return converged || oscilating;\n      };\n\n      FDLayout.prototype.animate = function () {\n        if (this.animationDuringLayout && !this.isSubLayout) {\n          if (this.notAnimatedIterations == this.animationPeriod) {\n            this.update();\n            this.notAnimatedIterations = 0;\n          } else {\n            this.notAnimatedIterations++;\n          }\n        }\n      }; //This method calculates the number of children (weight) for all nodes\n\n\n      FDLayout.prototype.calcNoOfChildrenForAllNodes = function () {\n        var node;\n        var allNodes = this.graphManager.getAllNodes();\n\n        for (var i = 0; i < allNodes.length; i++) {\n          node = allNodes[i];\n          node.noOfChildren = node.getNoOfChildren();\n        }\n      }; // -----------------------------------------------------------------------------\n      // Section: FR-Grid Variant Repulsion Force Calculation\n      // -----------------------------------------------------------------------------\n\n\n      FDLayout.prototype.calcGrid = function (graph) {\n        var sizeX = 0;\n        var sizeY = 0;\n        sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));\n        sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));\n        var grid = new Array(sizeX);\n\n        for (var i = 0; i < sizeX; i++) {\n          grid[i] = new Array(sizeY);\n        }\n\n        for (var i = 0; i < sizeX; i++) {\n          for (var j = 0; j < sizeY; j++) {\n            grid[i][j] = new Array();\n          }\n        }\n\n        return grid;\n      };\n\n      FDLayout.prototype.addNodeToGrid = function (v, left, top) {\n        var startX = 0;\n        var finishX = 0;\n        var startY = 0;\n        var finishY = 0;\n        startX = parseInt(Math.floor((v.getRect().x - left) / this.repulsionRange));\n        finishX = parseInt(Math.floor((v.getRect().width + v.getRect().x - left) / this.repulsionRange));\n        startY = parseInt(Math.floor((v.getRect().y - top) / this.repulsionRange));\n        finishY = parseInt(Math.floor((v.getRect().height + v.getRect().y - top) / this.repulsionRange));\n\n        for (var i = startX; i <= finishX; i++) {\n          for (var j = startY; j <= finishY; j++) {\n            this.grid[i][j].push(v);\n            v.setGridCoordinates(startX, finishX, startY, finishY);\n          }\n        }\n      };\n\n      FDLayout.prototype.updateGrid = function () {\n        var i;\n        var nodeA;\n        var lNodes = this.getAllNodes();\n        this.grid = this.calcGrid(this.graphManager.getRoot()); // put all nodes to proper grid cells\n\n        for (i = 0; i < lNodes.length; i++) {\n          nodeA = lNodes[i];\n          this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());\n        }\n      };\n\n      FDLayout.prototype.calculateRepulsionForceOfANode = function (nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {\n        if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {\n          var surrounding = new Set();\n          nodeA.surrounding = new Array();\n          var nodeB;\n          var grid = this.grid;\n\n          for (var i = nodeA.startX - 1; i < nodeA.finishX + 2; i++) {\n            for (var j = nodeA.startY - 1; j < nodeA.finishY + 2; j++) {\n              if (!(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length)) {\n                for (var k = 0; k < grid[i][j].length; k++) {\n                  nodeB = grid[i][j][k]; // If both nodes are not members of the same graph, \n                  // or both nodes are the same, skip.\n\n                  if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {\n                    continue;\n                  } // check if the repulsion force between\n                  // nodeA and nodeB has already been calculated\n\n\n                  if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {\n                    var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);\n                    var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2); // if the distance between nodeA and nodeB \n                    // is less then calculation range\n\n                    if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {\n                      //then add nodeB to surrounding of nodeA\n                      surrounding.add(nodeB);\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          nodeA.surrounding = [].concat(_toConsumableArray(surrounding));\n        }\n\n        for (i = 0; i < nodeA.surrounding.length; i++) {\n          this.calcRepulsionForce(nodeA, nodeA.surrounding[i]);\n        }\n      };\n\n      FDLayout.prototype.calcRepulsionRange = function () {\n        return 0.0;\n      };\n\n      module.exports = FDLayout;\n      /***/\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var LEdge = __webpack_require__(1);\n\n      var FDLayoutConstants = __webpack_require__(7);\n\n      function FDLayoutEdge(source, target, vEdge) {\n        LEdge.call(this, source, target, vEdge);\n        this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n      }\n\n      FDLayoutEdge.prototype = Object.create(LEdge.prototype);\n\n      for (var prop in LEdge) {\n        FDLayoutEdge[prop] = LEdge[prop];\n      }\n\n      module.exports = FDLayoutEdge;\n      /***/\n    },\n    /* 20 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var LNode = __webpack_require__(3);\n\n      function FDLayoutNode(gm, loc, size, vNode) {\n        // alternative constructor is handled inside LNode\n        LNode.call(this, gm, loc, size, vNode); //Spring, repulsion and gravitational forces acting on this node\n\n        this.springForceX = 0;\n        this.springForceY = 0;\n        this.repulsionForceX = 0;\n        this.repulsionForceY = 0;\n        this.gravitationForceX = 0;\n        this.gravitationForceY = 0; //Amount by which this node is to be moved in this iteration\n\n        this.displacementX = 0;\n        this.displacementY = 0; //Start and finish grid coordinates that this node is fallen into\n\n        this.startX = 0;\n        this.finishX = 0;\n        this.startY = 0;\n        this.finishY = 0; //Geometric neighbors of this node\n\n        this.surrounding = [];\n      }\n\n      FDLayoutNode.prototype = Object.create(LNode.prototype);\n\n      for (var prop in LNode) {\n        FDLayoutNode[prop] = LNode[prop];\n      }\n\n      FDLayoutNode.prototype.setGridCoordinates = function (_startX, _finishX, _startY, _finishY) {\n        this.startX = _startX;\n        this.finishX = _finishX;\n        this.startY = _startY;\n        this.finishY = _finishY;\n      };\n\n      module.exports = FDLayoutNode;\n      /***/\n    },\n    /* 21 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function DimensionD(width, height) {\n        this.width = 0;\n        this.height = 0;\n\n        if (width !== null && height !== null) {\n          this.height = height;\n          this.width = width;\n        }\n      }\n\n      DimensionD.prototype.getWidth = function () {\n        return this.width;\n      };\n\n      DimensionD.prototype.setWidth = function (width) {\n        this.width = width;\n      };\n\n      DimensionD.prototype.getHeight = function () {\n        return this.height;\n      };\n\n      DimensionD.prototype.setHeight = function (height) {\n        this.height = height;\n      };\n\n      module.exports = DimensionD;\n      /***/\n    },\n    /* 22 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var UniqueIDGeneretor = __webpack_require__(14);\n\n      function HashMap() {\n        this.map = {};\n        this.keys = [];\n      }\n\n      HashMap.prototype.put = function (key, value) {\n        var theId = UniqueIDGeneretor.createID(key);\n\n        if (!this.contains(theId)) {\n          this.map[theId] = value;\n          this.keys.push(key);\n        }\n      };\n\n      HashMap.prototype.contains = function (key) {\n        var theId = UniqueIDGeneretor.createID(key);\n        return this.map[key] != null;\n      };\n\n      HashMap.prototype.get = function (key) {\n        var theId = UniqueIDGeneretor.createID(key);\n        return this.map[theId];\n      };\n\n      HashMap.prototype.keySet = function () {\n        return this.keys;\n      };\n\n      module.exports = HashMap;\n      /***/\n    },\n    /* 23 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var UniqueIDGeneretor = __webpack_require__(14);\n\n      function HashSet() {\n        this.set = {};\n      }\n\n      ;\n\n      HashSet.prototype.add = function (obj) {\n        var theId = UniqueIDGeneretor.createID(obj);\n        if (!this.contains(theId)) this.set[theId] = obj;\n      };\n\n      HashSet.prototype.remove = function (obj) {\n        delete this.set[UniqueIDGeneretor.createID(obj)];\n      };\n\n      HashSet.prototype.clear = function () {\n        this.set = {};\n      };\n\n      HashSet.prototype.contains = function (obj) {\n        return this.set[UniqueIDGeneretor.createID(obj)] == obj;\n      };\n\n      HashSet.prototype.isEmpty = function () {\n        return this.size() === 0;\n      };\n\n      HashSet.prototype.size = function () {\n        return Object.keys(this.set).length;\n      }; //concats this.set to the given list\n\n\n      HashSet.prototype.addAllTo = function (list) {\n        var keys = Object.keys(this.set);\n        var length = keys.length;\n\n        for (var i = 0; i < length; i++) {\n          list.push(this.set[keys[i]]);\n        }\n      };\n\n      HashSet.prototype.size = function () {\n        return Object.keys(this.set).length;\n      };\n\n      HashSet.prototype.addAll = function (list) {\n        var s = list.length;\n\n        for (var i = 0; i < s; i++) {\n          var v = list[i];\n          this.add(v);\n        }\n      };\n\n      module.exports = HashSet;\n      /***/\n    },\n    /* 24 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n       * A classic Quicksort algorithm with Hoare's partition\n       * - Works also on LinkedList objects\n       *\n       * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\n       */\n\n\n      var LinkedList = __webpack_require__(11);\n\n      var Quicksort = function () {\n        function Quicksort(A, compareFunction) {\n          _classCallCheck(this, Quicksort);\n\n          if (compareFunction !== null || compareFunction !== undefined) this.compareFunction = this._defaultCompareFunction;\n          var length = void 0;\n          if (A instanceof LinkedList) length = A.size();else length = A.length;\n\n          this._quicksort(A, 0, length - 1);\n        }\n\n        _createClass(Quicksort, [{\n          key: '_quicksort',\n          value: function _quicksort(A, p, r) {\n            if (p < r) {\n              var q = this._partition(A, p, r);\n\n              this._quicksort(A, p, q);\n\n              this._quicksort(A, q + 1, r);\n            }\n          }\n        }, {\n          key: '_partition',\n          value: function _partition(A, p, r) {\n            var x = this._get(A, p);\n\n            var i = p;\n            var j = r;\n\n            while (true) {\n              while (this.compareFunction(x, this._get(A, j))) {\n                j--;\n              }\n\n              while (this.compareFunction(this._get(A, i), x)) {\n                i++;\n              }\n\n              if (i < j) {\n                this._swap(A, i, j);\n\n                i++;\n                j--;\n              } else return j;\n            }\n          }\n        }, {\n          key: '_get',\n          value: function _get(object, index) {\n            if (object instanceof LinkedList) return object.get_object_at(index);else return object[index];\n          }\n        }, {\n          key: '_set',\n          value: function _set(object, index, value) {\n            if (object instanceof LinkedList) object.set_object_at(index, value);else object[index] = value;\n          }\n        }, {\n          key: '_swap',\n          value: function _swap(A, i, j) {\n            var temp = this._get(A, i);\n\n            this._set(A, i, this._get(A, j));\n\n            this._set(A, j, temp);\n          }\n        }, {\n          key: '_defaultCompareFunction',\n          value: function _defaultCompareFunction(a, b) {\n            return b > a;\n          }\n        }]);\n\n        return Quicksort;\n      }();\n\n      module.exports = Quicksort;\n      /***/\n    },\n    /* 25 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n       *   Needleman-Wunsch algorithm is an procedure to compute the optimal global alignment of two string\n       *   sequences by S.B.Needleman and C.D.Wunsch (1970).\n       *\n       *   Aside from the inputs, you can assign the scores for,\n       *   - Match: The two characters at the current index are same.\n       *   - Mismatch: The two characters at the current index are different.\n       *   - Insertion/Deletion(gaps): The best alignment involves one letter aligning to a gap in the other string.\n       */\n\n\n      var NeedlemanWunsch = function () {\n        function NeedlemanWunsch(sequence1, sequence2) {\n          var match_score = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n          var mismatch_penalty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n          var gap_penalty = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n\n          _classCallCheck(this, NeedlemanWunsch);\n\n          this.sequence1 = sequence1;\n          this.sequence2 = sequence2;\n          this.match_score = match_score;\n          this.mismatch_penalty = mismatch_penalty;\n          this.gap_penalty = gap_penalty; // Just the remove redundancy\n\n          this.iMax = sequence1.length + 1;\n          this.jMax = sequence2.length + 1; // Grid matrix of scores\n\n          this.grid = new Array(this.iMax);\n\n          for (var i = 0; i < this.iMax; i++) {\n            this.grid[i] = new Array(this.jMax);\n\n            for (var j = 0; j < this.jMax; j++) {\n              this.grid[i][j] = 0;\n            }\n          } // Traceback matrix (2D array, each cell is an array of boolean values for [`Diag`, `Up`, `Left`] positions)\n\n\n          this.tracebackGrid = new Array(this.iMax);\n\n          for (var _i = 0; _i < this.iMax; _i++) {\n            this.tracebackGrid[_i] = new Array(this.jMax);\n\n            for (var _j = 0; _j < this.jMax; _j++) {\n              this.tracebackGrid[_i][_j] = [null, null, null];\n            }\n          } // The aligned sequences (return multiple possibilities)\n\n\n          this.alignments = []; // Final alignment score\n\n          this.score = -1; // Calculate scores and tracebacks\n\n          this.computeGrids();\n        }\n\n        _createClass(NeedlemanWunsch, [{\n          key: \"getScore\",\n          value: function getScore() {\n            return this.score;\n          }\n        }, {\n          key: \"getAlignments\",\n          value: function getAlignments() {\n            return this.alignments;\n          } // Main dynamic programming procedure\n\n        }, {\n          key: \"computeGrids\",\n          value: function computeGrids() {\n            // Fill in the first row\n            for (var j = 1; j < this.jMax; j++) {\n              this.grid[0][j] = this.grid[0][j - 1] + this.gap_penalty;\n              this.tracebackGrid[0][j] = [false, false, true];\n            } // Fill in the first column\n\n\n            for (var i = 1; i < this.iMax; i++) {\n              this.grid[i][0] = this.grid[i - 1][0] + this.gap_penalty;\n              this.tracebackGrid[i][0] = [false, true, false];\n            } // Fill the rest of the grid\n\n\n            for (var _i2 = 1; _i2 < this.iMax; _i2++) {\n              for (var _j2 = 1; _j2 < this.jMax; _j2++) {\n                // Find the max score(s) among [`Diag`, `Up`, `Left`]\n                var diag = void 0;\n                if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1]) diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;else diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;\n                var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;\n                var left = this.grid[_i2][_j2 - 1] + this.gap_penalty; // If there exists multiple max values, capture them for multiple paths\n\n                var maxOf = [diag, up, left];\n                var indices = this.arrayAllMaxIndexes(maxOf); // Update Grids\n\n                this.grid[_i2][_j2] = maxOf[indices[0]];\n                this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];\n              }\n            } // Update alignment score\n\n\n            this.score = this.grid[this.iMax - 1][this.jMax - 1];\n          } // Gets all possible valid sequence combinations\n\n        }, {\n          key: \"alignmentTraceback\",\n          value: function alignmentTraceback() {\n            var inProcessAlignments = [];\n            inProcessAlignments.push({\n              pos: [this.sequence1.length, this.sequence2.length],\n              seq1: \"\",\n              seq2: \"\"\n            });\n\n            while (inProcessAlignments[0]) {\n              var current = inProcessAlignments[0];\n              var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];\n\n              if (directions[0]) {\n                inProcessAlignments.push({\n                  pos: [current.pos[0] - 1, current.pos[1] - 1],\n                  seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                  seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                });\n              }\n\n              if (directions[1]) {\n                inProcessAlignments.push({\n                  pos: [current.pos[0] - 1, current.pos[1]],\n                  seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                  seq2: '-' + current.seq2\n                });\n              }\n\n              if (directions[2]) {\n                inProcessAlignments.push({\n                  pos: [current.pos[0], current.pos[1] - 1],\n                  seq1: '-' + current.seq1,\n                  seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                });\n              }\n\n              if (current.pos[0] === 0 && current.pos[1] === 0) this.alignments.push({\n                sequence1: current.seq1,\n                sequence2: current.seq2\n              });\n              inProcessAlignments.shift();\n            }\n\n            return this.alignments;\n          } // Helper Functions\n\n        }, {\n          key: \"getAllIndexes\",\n          value: function getAllIndexes(arr, val) {\n            var indexes = [],\n                i = -1;\n\n            while ((i = arr.indexOf(val, i + 1)) !== -1) {\n              indexes.push(i);\n            }\n\n            return indexes;\n          }\n        }, {\n          key: \"arrayAllMaxIndexes\",\n          value: function arrayAllMaxIndexes(array) {\n            return this.getAllIndexes(array, Math.max.apply(null, array));\n          }\n        }]);\n\n        return NeedlemanWunsch;\n      }();\n\n      module.exports = NeedlemanWunsch;\n      /***/\n    },\n    /* 26 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var layoutBase = function layoutBase() {\n        return;\n      };\n\n      layoutBase.FDLayout = __webpack_require__(18);\n      layoutBase.FDLayoutConstants = __webpack_require__(7);\n      layoutBase.FDLayoutEdge = __webpack_require__(19);\n      layoutBase.FDLayoutNode = __webpack_require__(20);\n      layoutBase.DimensionD = __webpack_require__(21);\n      layoutBase.HashMap = __webpack_require__(22);\n      layoutBase.HashSet = __webpack_require__(23);\n      layoutBase.IGeometry = __webpack_require__(8);\n      layoutBase.IMath = __webpack_require__(9);\n      layoutBase.Integer = __webpack_require__(10);\n      layoutBase.Point = __webpack_require__(12);\n      layoutBase.PointD = __webpack_require__(4);\n      layoutBase.RandomSeed = __webpack_require__(16);\n      layoutBase.RectangleD = __webpack_require__(13);\n      layoutBase.Transform = __webpack_require__(17);\n      layoutBase.UniqueIDGeneretor = __webpack_require__(14);\n      layoutBase.Quicksort = __webpack_require__(24);\n      layoutBase.LinkedList = __webpack_require__(11);\n      layoutBase.LGraphObject = __webpack_require__(2);\n      layoutBase.LGraph = __webpack_require__(5);\n      layoutBase.LEdge = __webpack_require__(1);\n      layoutBase.LGraphManager = __webpack_require__(6);\n      layoutBase.LNode = __webpack_require__(3);\n      layoutBase.Layout = __webpack_require__(15);\n      layoutBase.LayoutConstants = __webpack_require__(0);\n      layoutBase.NeedlemanWunsch = __webpack_require__(25);\n      module.exports = layoutBase;\n      /***/\n    },\n    /* 27 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function Emitter() {\n        this.listeners = [];\n      }\n\n      var p = Emitter.prototype;\n\n      p.addListener = function (event, callback) {\n        this.listeners.push({\n          event: event,\n          callback: callback\n        });\n      };\n\n      p.removeListener = function (event, callback) {\n        for (var i = this.listeners.length; i >= 0; i--) {\n          var l = this.listeners[i];\n\n          if (l.event === event && l.callback === callback) {\n            this.listeners.splice(i, 1);\n          }\n        }\n      };\n\n      p.emit = function (event, data) {\n        for (var i = 0; i < this.listeners.length; i++) {\n          var l = this.listeners[i];\n\n          if (event === l.event) {\n            l.callback(data);\n          }\n        }\n      };\n\n      module.exports = Emitter;\n      /***/\n    }\n    /******/\n    ])\n  );\n});","map":null,"metadata":{},"sourceType":"script"}